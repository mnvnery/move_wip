/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { activationFnSnippet, biasActivationSnippet, typeSnippet } from './activation_util';
import { makeMatMulPackedSource, makeMatMulPackedVec4Source } from './matmul_packed_webgpu';
import { computeDispatch, computeWorkGroupSizeForConv2d, computeWorkPerThreadForConv2d } from './webgpu_util';
function conv2dCommonSnippet(isChannelsLast, fitAOuter, fitBOuter, fitInner, addBias = false, activation = null, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4, innerElementSize = 4) {
    const getXSnippet = (innerElementSize) => {
        switch (innerElementSize) {
            case 1:
                return 'resData = x[xIndex];';
            case 3:
                return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';
            case 4:
                return 'resData = x[xIndex / 4];';
            default:
                throw new Error(`innerElementSize ${innerElementSize} is not supported.`);
        }
    };
    const getWSnippet = (innerElementSize) => {
        switch (innerElementSize) {
            case 1:
                return 'return W[row * uniforms.wShape[3] + colIn];';
            case 4:
                return 'return W[row * uniforms.wShape[3] / 4 + colIn];';
            default:
                throw new Error(`innerElementSize ${innerElementSize} is not supported.`);
        }
    };
    const coordASnippet = isChannelsLast ? `
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      ` :
        `
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `;
    const coordResSnippet = isChannelsLast ? `
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      ` :
        `
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `;
    const xHight = isChannelsLast ? 'uniforms.xShape[1]' : 'uniforms.xShape[2]';
    const xWidth = isChannelsLast ? 'uniforms.xShape[2]' : 'uniforms.xShape[3]';
    const row = isChannelsLast ? 'row' : 'col';
    const col = isChannelsLast ? 'col' : 'row';
    const readXSnippet = `
      let inChannels = uniforms.wShape[2];
      let outWidth = ${isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};
      let outRow = ${row} / outWidth;
      let outCol = ${row} % outWidth;

      let WRow = ${col} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${col} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
      let xCh = ${col} % inChannels;
      var resData = ${typeSnippet(innerElementSizeX)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${xHight} && xCol >= 0 && xCol < ${xWidth}) {
        ${coordASnippet}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${getXSnippet(innerElementSizeX)}
      }
      return resData;`;
    const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `
      let col = colIn * ${innerElementSizeX};
      ${readXSnippet}` :
        `
      let col = colIn * ${innerElementSizeX};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${readXSnippet}
      }
      return ${typeSnippet(innerElementSizeX)}(0.0);`) :
        (fitInner && fitBOuter ? `
      let col = colIn * ${innerElementSizeX};
      ${readXSnippet}` :
            `
      let col = colIn * ${innerElementSizeX};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${readXSnippet}
      }
      return ${typeSnippet(innerElementSizeX)}(0.0);`);
    const sampleW = `${getWSnippet(innerElementSizeW)}`;
    const resType = typeSnippet(innerElementSize);
    const aType = isChannelsLast ? typeSnippet(innerElementSizeX) :
        typeSnippet(innerElementSizeW);
    const bType = isChannelsLast ? typeSnippet(innerElementSizeW) :
        typeSnippet(innerElementSizeX);
    const userCode = `
      ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}
      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {
        ${isChannelsLast ? sampleX : sampleW}
      }

      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {
        ${isChannelsLast ? sampleW : sampleX}
      }

      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {
        let col = colIn * ${innerElementSize};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};
        ${coordResSnippet}
        ${biasActivationSnippet(addBias, activation)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`;
    return userCode;
}
export class Conv2DMMProgram {
    constructor(convInfo, dimAOuter, dimBOuter, dimInner, addBias = false, activation = null, hasPreluActivationWeights = false, sequentialAccessByThreads = false) {
        this.variableNames = ['x', 'W'];
        this.uniforms = `filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;
        this.outputShape = convInfo.outShape;
        this.isChannelsLast = convInfo.dataFormat === 'channelsLast';
        this.isVec4 =
            (((convInfo.inChannels % 4 === 0 || convInfo.inChannels % 3 === 0) &&
                this.isChannelsLast) ||
                (convInfo.outWidth % 4 === 0 && !this.isChannelsLast)) &&
                convInfo.outChannels % 4 === 0;
        this.dispatchLayout = this.isChannelsLast ? { x: [3], y: [1, 2], z: [0] } :
            { x: [2, 3], y: [1], z: [0] };
        this.workGroupSize = computeWorkGroupSizeForConv2d(this.dispatchLayout, this.outputShape, this.isVec4);
        this.elementsPerThread = computeWorkPerThreadForConv2d(this.dispatchLayout, this.outputShape, this.isVec4);
        this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workGroupSize, this.elementsPerThread);
        if (this.isVec4) {
            if (this.isChannelsLast && convInfo.inChannels % 4 !== 0) {
                this.innerElementSize = 3;
                this.variableTypes = ['f32', 'vec4<f32>'];
            }
            else {
                this.innerElementSize = 4;
                this.variableTypes = ['vec4<f32>', 'vec4<f32>'];
            }
            if (addBias) {
                this.variableNames.push('bias');
                this.variableTypes.push('vec4<f32>');
            }
            if (hasPreluActivationWeights) {
                this.variableNames.push('preluActivationWeights');
                this.variableTypes.push('vec4<f32>');
            }
        }
        else {
            this.innerElementSize = this.elementsPerThread[0];
            if (addBias) {
                this.variableNames.push('bias');
            }
            if (hasPreluActivationWeights) {
                this.variableNames.push('preluActivationWeights');
            }
        }
        this.sequentialAccessByThreads = sequentialAccessByThreads;
        this.addBias = addBias;
        this.activation = activation;
        this.hasPreluActivationWeights = hasPreluActivationWeights;
        this.tileAOuter = this.workGroupSize[1] * this.elementsPerThread[1];
        this.tileBOuter = this.workGroupSize[0] * this.elementsPerThread[0];
        this.tileInner = Math.max(this.workGroupSize[0] * this.innerElementSize, this.workGroupSize[1]);
        this.fitAOuter = dimAOuter % this.tileAOuter === 0;
        this.fitBOuter = dimBOuter % this.tileBOuter === 0;
        this.fitInner = dimInner % this.tileInner === 0;
        this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`;
    }
    getUserCode() {
        const matMulSource = this.isVec4 ?
            makeMatMulPackedVec4Source(this.elementsPerThread, this.workGroupSize, !this.isChannelsLast, this.tileInner) :
            makeMatMulPackedSource(this.elementsPerThread, this.workGroupSize, !this.isChannelsLast, this.tileInner, false, null, this.sequentialAccessByThreads);
        const elementsSize = this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];
        const userCode = `
    ${conv2dCommonSnippet(this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner, this.addBias, this.activation, this.hasPreluActivationWeights, elementsSize[0], elementsSize[1], elementsSize[2])}
    ${matMulSource}
  `;
        return userCode;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udjJkX21tX3dlYmdwdS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJncHUvc3JjL2NvbnYyZF9tbV93ZWJncHUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsT0FBTyxFQUFDLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLFdBQVcsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQzFGLE9BQU8sRUFBQyxzQkFBc0IsRUFBRSwwQkFBMEIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRTFGLE9BQU8sRUFBQyxlQUFlLEVBQUUsNkJBQTZCLEVBQUUsNkJBQTZCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFNUcsU0FBUyxtQkFBbUIsQ0FDeEIsY0FBdUIsRUFBRSxTQUFrQixFQUFFLFNBQWtCLEVBQy9ELFFBQWlCLEVBQUUsT0FBTyxHQUFHLEtBQUssRUFDbEMsYUFBc0MsSUFBSSxFQUMxQyx5QkFBeUIsR0FBRyxLQUFLLEVBQUUsaUJBQWlCLEdBQUcsQ0FBQyxFQUN4RCxpQkFBaUIsR0FBRyxDQUFDLEVBQUUsZ0JBQWdCLEdBQUcsQ0FBQztJQUM3QyxNQUFNLFdBQVcsR0FBRyxDQUFDLGdCQUF3QixFQUFFLEVBQUU7UUFDL0MsUUFBUSxnQkFBZ0IsRUFBRTtZQUN4QixLQUFLLENBQUM7Z0JBQ0osT0FBTyxzQkFBc0IsQ0FBQztZQUNoQyxLQUFLLENBQUM7Z0JBQ0osT0FBTywrREFBK0QsQ0FBQztZQUN6RSxLQUFLLENBQUM7Z0JBQ0osT0FBTywwQkFBMEIsQ0FBQztZQUNwQztnQkFDRSxNQUFNLElBQUksS0FBSyxDQUNYLG9CQUFvQixnQkFBZ0Isb0JBQW9CLENBQUMsQ0FBQztTQUNqRTtJQUNILENBQUMsQ0FBQztJQUNGLE1BQU0sV0FBVyxHQUFHLENBQUMsZ0JBQXdCLEVBQUUsRUFBRTtRQUMvQyxRQUFRLGdCQUFnQixFQUFFO1lBQ3hCLEtBQUss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SSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFDbEUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyx5QkFBeUIsRUFDN0QsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDeEQsWUFBWTtHQUNmLENBQUM7UUFDQSxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7YmFja2VuZF91dGlsfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge2FjdGl2YXRpb25GblNuaXBwZXQsIGJpYXNBY3RpdmF0aW9uU25pcHBldCwgdHlwZVNuaXBwZXR9IGZyb20gJy4vYWN0aXZhdGlvbl91dGlsJztcbmltcG9ydCB7bWFrZU1hdE11bFBhY2tlZFNvdXJjZSwgbWFrZU1hdE11bFBhY2tlZFZlYzRTb3VyY2V9IGZyb20gJy4vbWF0bXVsX3BhY2tlZF93ZWJncHUnO1xuaW1wb3J0IHtXZWJHUFVQcm9ncmFtfSBmcm9tICcuL3dlYmdwdV9wcm9ncmFtJztcbmltcG9ydCB7Y29tcHV0ZURpc3BhdGNoLCBjb21wdXRlV29ya0dyb3VwU2l6ZUZvckNvbnYyZCwgY29tcHV0ZVdvcmtQZXJUaHJlYWRGb3JDb252MmR9IGZyb20gJy4vd2ViZ3B1X3V0aWwnO1xuXG5mdW5jdGlvbiBjb252MmRDb21tb25TbmlwcGV0KFxuICAgIGlzQ2hhbm5lbHNMYXN0OiBib29sZWFuLCBmaXRBT3V0ZXI6IGJvb2xlYW4sIGZpdEJPdXRlcjogYm9vbGVhbixcbiAgICBmaXRJbm5lcjogYm9vbGVhbiwgYWRkQmlhcyA9IGZhbHNlLFxuICAgIGFjdGl2YXRpb246IGJhY2tlbmRfdXRpbC5BY3RpdmF0aW9uID0gbnVsbCxcbiAgICBoYXNQcmVsdUFjdGl2YXRpb25XZWlnaHRzID0gZmFsc2UsIGlubmVyRWxlbWVudFNpemVYID0gNCxcbiAgICBpbm5lckVsZW1lbnRTaXplVyA9IDQsIGlubmVyRWxlbWVudFNpemUgPSA0KSB7XG4gIGNvbnN0IGdldFhTbmlwcGV0ID0gKGlubmVyRWxlbWVudFNpemU6IG51bWJlcikgPT4ge1xuICAgIHN3aXRjaCAoaW5uZXJFbGVtZW50U2l6ZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gJ3Jlc0RhdGEgPSB4W3hJbmRleF07JztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuICdyZXNEYXRhID0gdmVjMzxmMzI+KHhbeEluZGV4XSwgeFt4SW5kZXggKyAxXSwgeFt4SW5kZXggKyAyXSk7JztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuICdyZXNEYXRhID0geFt4SW5kZXggLyA0XTsnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYGlubmVyRWxlbWVudFNpemUgJHtpbm5lckVsZW1lbnRTaXplfSBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0V1NuaXBwZXQgPSAoaW5uZXJFbGVtZW50U2l6ZTogbnVtYmVyKSA9PiB7XG4gICAgc3dpdGNoIChpbm5lckVsZW1lbnRTaXplKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiAncmV0dXJuIFdbcm93ICogdW5pZm9ybXMud1NoYXBlWzNdICsgY29sSW5dOyc7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiAncmV0dXJuIFdbcm93ICogdW5pZm9ybXMud1NoYXBlWzNdIC8gNCArIGNvbEluXTsnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYGlubmVyRWxlbWVudFNpemUgJHtpbm5lckVsZW1lbnRTaXplfSBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY29vcmRBU25pcHBldCA9IGlzQ2hhbm5lbHNMYXN0ID8gYFxuICAgICAgbGV0IGNvb3JkID0gdmVjNDxpMzI+KGJhdGNoLCB4Um93LCB4Q29sLCB4Q2gpO1xuICAgICAgYCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcbiAgICAgIGxldCBjb29yZCA9IHZlYzQ8aTMyPihiYXRjaCwgeENoLCB4Um93LCB4Q29sKTtcbiAgICAgIGA7XG5cbiAgY29uc3QgY29vcmRSZXNTbmlwcGV0ID0gaXNDaGFubmVsc0xhc3QgPyBgXG4gICAgICBsZXQgY29vcmRzID0gdmVjNDxpMzI+KFxuICAgICAgICBiYXRjaCxcbiAgICAgICAgcm93IC8gb3V0V2lkdGgsXG4gICAgICAgIHJvdyAlIG91dFdpZHRoLFxuICAgICAgICBjb2wpO1xuICAgICAgYCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgbGV0IGNvb3JkcyA9IHZlYzQ8aTMyPihcbiAgICAgICAgYmF0Y2gsXG4gICAgICAgIHJvdyxcbiAgICAgICAgY29sIC8gb3V0V2lkdGgsXG4gICAgICAgIGNvbCAlIG91dFdpZHRoKTtcbiAgICAgIGA7XG5cbiAgY29uc3QgeEhpZ2h0ID0gaXNDaGFubmVsc0xhc3QgPyAndW5pZm9ybXMueFNoYXBlWzFdJyA6ICd1bmlmb3Jtcy54U2hhcGVbMl0nO1xuICBjb25zdCB4V2lkdGggPSBpc0NoYW5uZWxzTGFzdCA/ICd1bmlmb3Jtcy54U2hhcGVbMl0nIDogJ3VuaWZvcm1zLnhTaGFwZVszXSc7XG4gIGNvbnN0IHJvdyA9IGlzQ2hhbm5lbHNMYXN0ID8gJ3JvdycgOiAnY29sJztcbiAgY29uc3QgY29sID0gaXNDaGFubmVsc0xhc3QgPyAnY29sJyA6ICdyb3cnO1xuICBjb25zdCByZWFkWFNuaXBwZXQgPSBgXG4gICAgICBsZXQgaW5DaGFubmVscyA9IHVuaWZvcm1zLndTaGFwZVsyXTtcbiAgICAgIGxldCBvdXRXaWR0aCA9ICR7XG4gICAgICBpc0NoYW5uZWxzTGFzdCA/ICd1bmlmb3Jtcy5vdXRTaGFwZVsyXScgOiAndW5pZm9ybXMub3V0U2hhcGVbM10nfTtcbiAgICAgIGxldCBvdXRSb3cgPSAke3Jvd30gLyBvdXRXaWR0aDtcbiAgICAgIGxldCBvdXRDb2wgPSAke3Jvd30gJSBvdXRXaWR0aDtcblxuICAgICAgbGV0IFdSb3cgPSAke2NvbH0gLyAodW5pZm9ybXMuZmlsdGVyRGltc1sxXSAqIGluQ2hhbm5lbHMpO1xuICAgICAgbGV0IFdDb2wgPSAke2NvbH0gLyBpbkNoYW5uZWxzICUgdW5pZm9ybXMuZmlsdGVyRGltc1sxXTtcbiAgICAgIGxldCB4Um93ID0gb3V0Um93ICogdW5pZm9ybXMuc3RyaWRlWzBdICsgdW5pZm9ybXMuZGlsYXRpb25bMF0gKiBXUm93IC0gdW5pZm9ybXMucGFkWzBdO1xuICAgICAgbGV0IHhDb2wgPSBvdXRDb2wgKiB1bmlmb3Jtcy5zdHJpZGVbMV0gKyB1bmlmb3Jtcy5kaWxhdGlvblsxXSAqIFdDb2wgLSB1bmlmb3Jtcy5wYWRbMV07XG4gICAgICBsZXQgeENoID0gJHtjb2x9ICUgaW5DaGFubmVscztcbiAgICAgIHZhciByZXNEYXRhID0gJHt0eXBlU25pcHBldChpbm5lckVsZW1lbnRTaXplWCl9KDAuMCk7XG4gICAgICAvLyBUaGUgYm91bmRzIGNoZWNraW5nIGlzIGFsd2F5cyBuZWVkZWQgc2luY2Ugd2UgdXNlIGl0IHRvIHBhZCB6ZXJvIGZvclxuICAgICAgLy8gdGhlICdzYW1lJyBwYWRkaW5nIHR5cGUuXG4gICAgICBpZiAoeFJvdyA+PSAwICYmIHhSb3cgPCAke3hIaWdodH0gJiYgeENvbCA+PSAwICYmIHhDb2wgPCAke3hXaWR0aH0pIHtcbiAgICAgICAgJHtjb29yZEFTbmlwcGV0fVxuICAgICAgICBsZXQgeEluZGV4ID0gZ2V0SW5kZXhGcm9tQ29vcmRzNEQoY29vcmQsIHVuaWZvcm1zLnhTaGFwZSk7XG4gICAgICAgICR7Z2V0WFNuaXBwZXQoaW5uZXJFbGVtZW50U2l6ZVgpfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc0RhdGE7YDtcblxuICBjb25zdCBzYW1wbGVYID0gaXNDaGFubmVsc0xhc3QgPyAoZml0QU91dGVyICYmIGZpdElubmVyID8gYFxuICAgICAgbGV0IGNvbCA9IGNvbEluICogJHtpbm5lckVsZW1lbnRTaXplWH07XG4gICAgICAke3JlYWRYU25pcHBldH1gIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcbiAgICAgIGxldCBjb2wgPSBjb2xJbiAqICR7aW5uZXJFbGVtZW50U2l6ZVh9O1xuICAgICAgaWYgKHJvdyA8IHVuaWZvcm1zLmRpbUFPdXRlciAmJiBjb2wgPCB1bmlmb3Jtcy5kaW1Jbm5lcikge1xuICAgICAgICAke3JlYWRYU25pcHBldH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAke3R5cGVTbmlwcGV0KGlubmVyRWxlbWVudFNpemVYKX0oMC4wKTtgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmaXRJbm5lciAmJiBmaXRCT3V0ZXIgPyBgXG4gICAgICBsZXQgY29sID0gY29sSW4gKiAke2lubmVyRWxlbWVudFNpemVYfTtcbiAgICAgICR7cmVhZFhTbmlwcGV0fWAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgbGV0IGNvbCA9IGNvbEluICogJHtpbm5lckVsZW1lbnRTaXplWH07XG4gICAgICBpZiAocm93IDwgdW5pZm9ybXMuZGltSW5uZXIgJiYgY29sIDwgdW5pZm9ybXMuZGltQk91dGVyKSB7XG4gICAgICAgICR7cmVhZFhTbmlwcGV0fVxuICAgICAgfVxuICAgICAgcmV0dXJuICR7dHlwZVNuaXBwZXQoaW5uZXJFbGVtZW50U2l6ZVgpfSgwLjApO2ApO1xuXG4gIGNvbnN0IHNhbXBsZVcgPSBgJHtnZXRXU25pcHBldChpbm5lckVsZW1lbnRTaXplVyl9YDtcblxuICBjb25zdCByZXNUeXBlID0gdHlwZVNuaXBwZXQoaW5uZXJFbGVtZW50U2l6ZSk7XG4gIGNvbnN0IGFUeXBlID0gaXNDaGFubmVsc0xhc3QgPyB0eXBlU25pcHBldChpbm5lckVsZW1lbnRTaXplWCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZVNuaXBwZXQoaW5uZXJFbGVtZW50U2l6ZVcpO1xuICBjb25zdCBiVHlwZSA9IGlzQ2hhbm5lbHNMYXN0ID8gdHlwZVNuaXBwZXQoaW5uZXJFbGVtZW50U2l6ZVcpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVTbmlwcGV0KGlubmVyRWxlbWVudFNpemVYKTtcbiAgY29uc3QgdXNlckNvZGUgPSBgXG4gICAgICAke1xuICAgICAgYWN0aXZhdGlvbkZuU25pcHBldChcbiAgICAgICAgICBhY3RpdmF0aW9uLCBoYXNQcmVsdUFjdGl2YXRpb25XZWlnaHRzLCBpbm5lckVsZW1lbnRTaXplID09PSA0LCA0KX1cbiAgICAgIGZuIG1tX3JlYWRBKGJhdGNoOiBpMzIsIHJvdyA6IGkzMiwgY29sSW4gOiBpMzIpIC0+ICR7YVR5cGV9IHtcbiAgICAgICAgJHtpc0NoYW5uZWxzTGFzdCA/IHNhbXBsZVggOiBzYW1wbGVXfVxuICAgICAgfVxuXG4gICAgICBmbiBtbV9yZWFkQihiYXRjaDogaTMyLCByb3cgOiBpMzIsIGNvbEluIDogaTMyKSAtPiAke2JUeXBlfSB7XG4gICAgICAgICR7aXNDaGFubmVsc0xhc3QgPyBzYW1wbGVXIDogc2FtcGxlWH1cbiAgICAgIH1cblxuICAgICAgZm4gbW1fd3JpdGUoYmF0Y2g6IGkzMiwgcm93IDogaTMyLCBjb2xJbiA6IGkzMiwgdmFsdWVJbiA6ICR7cmVzVHlwZX0pIHtcbiAgICAgICAgbGV0IGNvbCA9IGNvbEluICogJHtpbm5lckVsZW1lbnRTaXplfTtcbiAgICAgICAgaWYgKHJvdyA8IHVuaWZvcm1zLmRpbUFPdXRlciAmJiBjb2wgPCB1bmlmb3Jtcy5kaW1CT3V0ZXIpXG4gICAgICAgIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVJbjtcbiAgICAgICAgbGV0IG91dFdpZHRoID0gJHtcbiAgICAgIGlzQ2hhbm5lbHNMYXN0ID8gJ3VuaWZvcm1zLm91dFNoYXBlWzJdJyA6ICd1bmlmb3Jtcy5vdXRTaGFwZVszXSd9O1xuICAgICAgICAke2Nvb3JkUmVzU25pcHBldH1cbiAgICAgICAgJHtiaWFzQWN0aXZhdGlvblNuaXBwZXQoYWRkQmlhcywgYWN0aXZhdGlvbil9XG4gICAgICAgIHNldE91dHB1dEF0Q29vcmRzKGNvb3Jkc1swXSwgY29vcmRzWzFdLCBjb29yZHNbMl0sIGNvb3Jkc1szXSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9YDtcbiAgcmV0dXJuIHVzZXJDb2RlO1xufVxuXG5leHBvcnQgY2xhc3MgQ29udjJETU1Qcm9ncmFtIGltcGxlbWVudHMgV2ViR1BVUHJvZ3JhbSB7XG4gIG91dHB1dFNoYXBlOiBudW1iZXJbXTtcbiAgc2hhZGVyS2V5OiBzdHJpbmc7XG4gIGRpc3BhdGNoTGF5b3V0OiB7eDogbnVtYmVyW10sIHk6IG51bWJlcltdLCB6OiBudW1iZXJbXX07XG4gIGRpc3BhdGNoOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gIHZhcmlhYmxlTmFtZXMgPSBbJ3gnLCAnVyddO1xuICB2YXJpYWJsZVR5cGVzOiBzdHJpbmdbXTtcbiAgdW5pZm9ybXMgPVxuICAgICAgYGZpbHRlckRpbXMgOiB2ZWMyPGkzMj4sIHBhZCA6IHZlYzI8aTMyPiwgc3RyaWRlIDogdmVjMjxpMzI+LCBkaWxhdGlvbiA6IHZlYzI8aTMyPiwgZGltQU91dGVyIDogaTMyLCBkaW1CT3V0ZXIgOiBpMzIsIGRpbUlubmVyIDogaTMyLGA7XG4gIHdvcmtHcm91cFNpemU6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgZWxlbWVudHNQZXJUaHJlYWQ6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgYWRkQmlhczogYm9vbGVhbjtcbiAgYWN0aXZhdGlvbjogYmFja2VuZF91dGlsLkFjdGl2YXRpb247XG4gIGhhc1ByZWx1QWN0aXZhdGlvbldlaWdodHM6IGJvb2xlYW47XG4gIGlzQ2hhbm5lbHNMYXN0OiBib29sZWFuO1xuICBmaXRBT3V0ZXI6IGJvb2xlYW47XG4gIGZpdEJPdXRlcjogYm9vbGVhbjtcbiAgZml0SW5uZXI6IGJvb2xlYW47XG4gIHRpbGVBT3V0ZXI6IG51bWJlcjtcbiAgdGlsZUJPdXRlcjogbnVtYmVyO1xuICB0aWxlSW5uZXI6IG51bWJlcjtcbiAgaW5uZXJFbGVtZW50U2l6ZTogbnVtYmVyO1xuICBpc1ZlYzQ/OiBib29sZWFuO1xuICBwcml2YXRlIHNlcXVlbnRpYWxBY2Nlc3NCeVRocmVhZHM6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBjb252SW5mbzogYmFja2VuZF91dGlsLkNvbnYyREluZm8sIGRpbUFPdXRlcjogbnVtYmVyLCBkaW1CT3V0ZXI6IG51bWJlcixcbiAgICAgIGRpbUlubmVyOiBudW1iZXIsIGFkZEJpYXMgPSBmYWxzZSxcbiAgICAgIGFjdGl2YXRpb246IGJhY2tlbmRfdXRpbC5BY3RpdmF0aW9uID0gbnVsbCxcbiAgICAgIGhhc1ByZWx1QWN0aXZhdGlvbldlaWdodHMgPSBmYWxzZSwgc2VxdWVudGlhbEFjY2Vzc0J5VGhyZWFkcyA9IGZhbHNlKSB7XG4gICAgdGhpcy5vdXRwdXRTaGFwZSA9IGNvbnZJbmZvLm91dFNoYXBlO1xuICAgIHRoaXMuaXNDaGFubmVsc0xhc3QgPSBjb252SW5mby5kYXRhRm9ybWF0ID09PSAnY2hhbm5lbHNMYXN0JztcbiAgICB0aGlzLmlzVmVjNCA9XG4gICAgICAgICgoKGNvbnZJbmZvLmluQ2hhbm5lbHMgJSA0ID09PSAwIHx8IGNvbnZJbmZvLmluQ2hhbm5lbHMgJSAzID09PSAwKSAmJlxuICAgICAgICAgIHRoaXMuaXNDaGFubmVsc0xhc3QpIHx8XG4gICAgICAgICAoY29udkluZm8ub3V0V2lkdGggJSA0ID09PSAwICYmICF0aGlzLmlzQ2hhbm5lbHNMYXN0KSkgJiZcbiAgICAgICAgY29udkluZm8ub3V0Q2hhbm5lbHMgJSA0ID09PSAwO1xuICAgIHRoaXMuZGlzcGF0Y2hMYXlvdXQgPSB0aGlzLmlzQ2hhbm5lbHNMYXN0ID8ge3g6IFszXSwgeTogWzEsIDJdLCB6OiBbMF19IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBbMiwgM10sIHk6IFsxXSwgejogWzBdfTtcbiAgICB0aGlzLndvcmtHcm91cFNpemUgPSBjb21wdXRlV29ya0dyb3VwU2l6ZUZvckNvbnYyZChcbiAgICAgICAgdGhpcy5kaXNwYXRjaExheW91dCwgdGhpcy5vdXRwdXRTaGFwZSwgdGhpcy5pc1ZlYzQpO1xuICAgIHRoaXMuZWxlbWVudHNQZXJUaHJlYWQgPSBjb21wdXRlV29ya1BlclRocmVhZEZvckNvbnYyZChcbiAgICAgICAgdGhpcy5kaXNwYXRjaExheW91dCwgdGhpcy5vdXRwdXRTaGFwZSwgdGhpcy5pc1ZlYzQpO1xuXG4gICAgdGhpcy5kaXNwYXRjaCA9IGNvbXB1dGVEaXNwYXRjaChcbiAgICAgICAgdGhpcy5kaXNwYXRjaExheW91dCwgdGhpcy5vdXRwdXRTaGFwZSwgdGhpcy53b3JrR3JvdXBTaXplLFxuICAgICAgICB0aGlzLmVsZW1lbnRzUGVyVGhyZWFkKTtcblxuICAgIGlmICh0aGlzLmlzVmVjNCkge1xuICAgICAgaWYgKHRoaXMuaXNDaGFubmVsc0xhc3QgJiYgY29udkluZm8uaW5DaGFubmVscyAlIDQgIT09IDApIHtcbiAgICAgICAgdGhpcy5pbm5lckVsZW1lbnRTaXplID0gMztcbiAgICAgICAgdGhpcy52YXJpYWJsZVR5cGVzID0gWydmMzInLCAndmVjNDxmMzI+J107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlubmVyRWxlbWVudFNpemUgPSA0O1xuICAgICAgICB0aGlzLnZhcmlhYmxlVHlwZXMgPSBbJ3ZlYzQ8ZjMyPicsICd2ZWM0PGYzMj4nXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZEJpYXMpIHtcbiAgICAgICAgdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goJ2JpYXMnKTtcbiAgICAgICAgdGhpcy52YXJpYWJsZVR5cGVzLnB1c2goJ3ZlYzQ8ZjMyPicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzUHJlbHVBY3RpdmF0aW9uV2VpZ2h0cykge1xuICAgICAgICB0aGlzLnZhcmlhYmxlTmFtZXMucHVzaCgncHJlbHVBY3RpdmF0aW9uV2VpZ2h0cycpO1xuICAgICAgICB0aGlzLnZhcmlhYmxlVHlwZXMucHVzaCgndmVjNDxmMzI+Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5uZXJFbGVtZW50U2l6ZSA9IHRoaXMuZWxlbWVudHNQZXJUaHJlYWRbMF07XG4gICAgICBpZiAoYWRkQmlhcykge1xuICAgICAgICB0aGlzLnZhcmlhYmxlTmFtZXMucHVzaCgnYmlhcycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzUHJlbHVBY3RpdmF0aW9uV2VpZ2h0cykge1xuICAgICAgICB0aGlzLnZhcmlhYmxlTmFtZXMucHVzaCgncHJlbHVBY3RpdmF0aW9uV2VpZ2h0cycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2VxdWVudGlhbEFjY2Vzc0J5VGhyZWFkcyA9IHNlcXVlbnRpYWxBY2Nlc3NCeVRocmVhZHM7XG4gICAgdGhpcy5hZGRCaWFzID0gYWRkQmlhcztcbiAgICB0aGlzLmFjdGl2YXRpb24gPSBhY3RpdmF0aW9uO1xuICAgIHRoaXMuaGFzUHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyA9IGhhc1ByZWx1QWN0aXZhdGlvbldlaWdodHM7XG5cbiAgICB0aGlzLnRpbGVBT3V0ZXIgPSB0aGlzLndvcmtHcm91cFNpemVbMV0gKiB0aGlzLmVsZW1lbnRzUGVyVGhyZWFkWzFdO1xuICAgIHRoaXMudGlsZUJPdXRlciA9IHRoaXMud29ya0dyb3VwU2l6ZVswXSAqIHRoaXMuZWxlbWVudHNQZXJUaHJlYWRbMF07XG4gICAgdGhpcy50aWxlSW5uZXIgPSBNYXRoLm1heChcbiAgICAgICAgdGhpcy53b3JrR3JvdXBTaXplWzBdICogdGhpcy5pbm5lckVsZW1lbnRTaXplLCB0aGlzLndvcmtHcm91cFNpemVbMV0pO1xuXG4gICAgdGhpcy5maXRBT3V0ZXIgPSBkaW1BT3V0ZXIgJSB0aGlzLnRpbGVBT3V0ZXIgPT09IDA7XG4gICAgdGhpcy5maXRCT3V0ZXIgPSBkaW1CT3V0ZXIgJSB0aGlzLnRpbGVCT3V0ZXIgPT09IDA7XG4gICAgdGhpcy5maXRJbm5lciA9IGRpbUlubmVyICUgdGhpcy50aWxlSW5uZXIgPT09IDA7XG5cbiAgICB0aGlzLnNoYWRlcktleSA9IGBjb252MkRNTV8ke3RoaXMuZWxlbWVudHNQZXJUaHJlYWR9XyR7dGhpcy5hY3RpdmF0aW9ufX1fJHtcbiAgICAgICAgdGhpcy5maXRBT3V0ZXJ9XyR7dGhpcy5maXRCT3V0ZXJ9XyR7dGhpcy5maXRJbm5lcn1fJHt0aGlzLmlzVmVjNH1fJHtcbiAgICAgICAgdGhpcy5pbm5lckVsZW1lbnRTaXplfV8ke3RoaXMuaXNDaGFubmVsc0xhc3R9XyR7XG4gICAgICAgIHRoaXMuc2VxdWVudGlhbEFjY2Vzc0J5VGhyZWFkc31gO1xuICB9XG5cbiAgZ2V0VXNlckNvZGUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBtYXRNdWxTb3VyY2UgPSB0aGlzLmlzVmVjNCA/XG4gICAgICAgIG1ha2VNYXRNdWxQYWNrZWRWZWM0U291cmNlKFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1BlclRocmVhZCwgdGhpcy53b3JrR3JvdXBTaXplLCAhdGhpcy5pc0NoYW5uZWxzTGFzdCxcbiAgICAgICAgICAgIHRoaXMudGlsZUlubmVyKSA6XG4gICAgICAgIG1ha2VNYXRNdWxQYWNrZWRTb3VyY2UoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzUGVyVGhyZWFkLCB0aGlzLndvcmtHcm91cFNpemUsICF0aGlzLmlzQ2hhbm5lbHNMYXN0LFxuICAgICAgICAgICAgdGhpcy50aWxlSW5uZXIsIGZhbHNlLCBudWxsLCB0aGlzLnNlcXVlbnRpYWxBY2Nlc3NCeVRocmVhZHMpO1xuICAgIGNvbnN0IGVsZW1lbnRzU2l6ZSA9XG4gICAgICAgIHRoaXMuaXNWZWM0ID8gW3RoaXMuaW5uZXJFbGVtZW50U2l6ZSwgNCwgNF0gOiBbMSwgMSwgMV07XG4gICAgY29uc3QgdXNlckNvZGUgPSBgXG4gICAgJHtcbiAgICAgICAgY29udjJkQ29tbW9uU25pcHBldChcbiAgICAgICAgICAgIHRoaXMuaXNDaGFubmVsc0xhc3QsIHRoaXMuZml0QU91dGVyLCB0aGlzLmZpdEJPdXRlciwgdGhpcy5maXRJbm5lcixcbiAgICAgICAgICAgIHRoaXMuYWRkQmlhcywgdGhpcy5hY3RpdmF0aW9uLCB0aGlzLmhhc1ByZWx1QWN0aXZhdGlvbldlaWdodHMsXG4gICAgICAgICAgICBlbGVtZW50c1NpemVbMF0sIGVsZW1lbnRzU2l6ZVsxXSwgZWxlbWVudHNTaXplWzJdKX1cbiAgICAke21hdE11bFNvdXJjZX1cbiAgYDtcbiAgICByZXR1cm4gdXNlckNvZGU7XG4gIH1cbn1cbiJdfQ==