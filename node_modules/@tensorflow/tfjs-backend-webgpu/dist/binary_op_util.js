/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
export var BinaryOpType;
(function (BinaryOpType) {
    BinaryOpType[BinaryOpType["MUL"] = 0] = "MUL";
    BinaryOpType[BinaryOpType["ADD"] = 1] = "ADD";
    BinaryOpType[BinaryOpType["ATAN2"] = 2] = "ATAN2";
    BinaryOpType[BinaryOpType["SUB"] = 3] = "SUB";
    BinaryOpType[BinaryOpType["DIV"] = 4] = "DIV";
    BinaryOpType[BinaryOpType["EQUAL"] = 5] = "EQUAL";
    BinaryOpType[BinaryOpType["GREATER"] = 6] = "GREATER";
    BinaryOpType[BinaryOpType["GREATER_EQUAL"] = 7] = "GREATER_EQUAL";
    BinaryOpType[BinaryOpType["LESS"] = 8] = "LESS";
    BinaryOpType[BinaryOpType["LESS_EQUAL"] = 9] = "LESS_EQUAL";
    BinaryOpType[BinaryOpType["LOGICAL_AND"] = 10] = "LOGICAL_AND";
    BinaryOpType[BinaryOpType["NOT_EQUAL"] = 11] = "NOT_EQUAL";
    BinaryOpType[BinaryOpType["SQUARED_DIFFERENCE"] = 12] = "SQUARED_DIFFERENCE";
    BinaryOpType[BinaryOpType["INT_DIV"] = 13] = "INT_DIV";
    BinaryOpType[BinaryOpType["POW"] = 14] = "POW";
    BinaryOpType[BinaryOpType["PRELU"] = 15] = "PRELU";
    BinaryOpType[BinaryOpType["MAX"] = 16] = "MAX";
    BinaryOpType[BinaryOpType["MIN"] = 17] = "MIN";
    BinaryOpType[BinaryOpType["COMPLEX_MULTIPLY_REAL"] = 18] = "COMPLEX_MULTIPLY_REAL";
    BinaryOpType[BinaryOpType["COMPLEX_MULTIPLY_IMAG"] = 19] = "COMPLEX_MULTIPLY_IMAG";
})(BinaryOpType || (BinaryOpType = {}));
const CHECK_NAN_SNIPPET = `
  if (isnan(a)) { return a; }
  if (isnan(b)) { return b; }
  `;
const CHECK_NAN_SNIPPET_VEC4_INNER = `
  if (isNaN.r) {
    resultTemp.r = valueForNaN;
  }
  if (isNaN.g) {
    resultTemp.g = valueForNaN;
  }
  if (isNaN.b) {
    resultTemp.b = valueForNaN;
  }
  if (isNaN.a) {
    resultTemp.a = valueForNaN;
  }
  `;
const CHECK_NAN_SNIPPET_VEC4 = `
  let isNaN = isnanVec4(a) | isnanVec4(b);
  ${CHECK_NAN_SNIPPET_VEC4_INNER}
  `;
const ADD = 'return a + b;';
// (Ar + Ai)(Br + Bi) =
// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr
// Yr = ArBr - AB
// Yi = ArBi + AiBr
const COMPLEX_MULTIPLY_REAL = 'return areal * breal - aimag * bimag;';
const COMPLEX_MULTIPLY_IMAG = 'return areal * bimag + aimag * breal;';
const DIV = 'return a / b;';
const MUL = 'return a * b;';
const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
const SUB = 'return a - b;';
const EQUAL = 'return f32(a == b);';
const EQUAL_VEC4 = 'return vec4<f32>(a == b);';
const GREATER = 'return f32(a > b);';
const GREATER_VEC4 = 'return vec4<f32>(a > b);';
const GREATER_EQUAL = 'return f32(a >= b);';
const GREATER_EQUAL_VEC4 = 'return vec4<f32>(a >= b);';
const LESS = 'return f32(a < b);';
const LESS_VEC4 = 'return vec4<f32>(a < b);';
const LESS_EQUAL = 'return f32(a <= b);';
const LESS_EQUAL_VEC4 = 'return vec4<f32>(a <= b);';
const LOGICAL_AND = 'return f32(f32(a) >= 1.0 && f32(b) >= 1.0);';
const LOGICAL_AND_VEC4 = `return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`;
const INT_DIV = `
  let s = sign(a) * sign(b);
  let ia = i32(round(a));
  let ib = i32(round(b));
  return f32(idiv(ia, ib, s));
  `;
const INT_DIV_VEC4 = `
  let ia = vec4<i32>(round(a));
  let ib = vec4<i32>(round(b));
  let cond = ib != vec4<i32>(0);
  var resultTemp = vec4<i32>(0);
  let s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    resultTemp[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    resultTemp[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    resultTemp[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    resultTemp[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4<f32>(resultTemp);
  `;
const NOT_EQUAL = `
  if (isnan(a) || isnan(b)) {
    return 1.0;
  }
  return f32(a != b);
`;
const NOT_EQUAL_VEC4 = `
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
  ${CHECK_NAN_SNIPPET_VEC4}

  return resultTemp;
`;
const POW = `
  if(a < 0.0 && floor(b) < b) {
    return uniforms.NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  if (round(abs(b) % 2.0) != 1.0) {
    return pow(abs(a), b);
  }
  return sign(a) * pow(abs(a), b);
  `;
const POW_VEC4 = `
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
  let valueForNaN = uniforms.NAN;
  ${CHECK_NAN_SNIPPET_VEC4_INNER}
  return resultTemp;
  `;
const PRELU = `if (a < 0.0) { return b * a; }  return a;`;
const PRELU_VEC4 = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
  `;
function getBinaryWithNanString(op, useVec4, valueForNaN = 'uniforms.NAN') {
    const checkNanSnippet = useVec4 ? CHECK_NAN_SNIPPET_VEC4 : CHECK_NAN_SNIPPET;
    return useVec4 ? `
    let valueForNaN = ${valueForNaN};
    var resultTemp = vec4<f32>(${op}(a, b));
    ` + checkNanSnippet +
        `
    return resultTemp;
  ` :
        checkNanSnippet + `
    return ${op}(a, b);
  `;
}
export function getBinaryOpString(type, useVec4) {
    switch (type) {
        case BinaryOpType.MUL:
            return MUL;
        case BinaryOpType.ADD:
            return ADD;
        case BinaryOpType.ATAN2:
            return getBinaryWithNanString('atan2', useVec4);
        case BinaryOpType.SUB:
            return SUB;
        case BinaryOpType.DIV:
            return DIV;
        case BinaryOpType.EQUAL:
            return useVec4 ? EQUAL_VEC4 : EQUAL;
        case BinaryOpType.GREATER:
            return useVec4 ? GREATER_VEC4 : GREATER;
        case BinaryOpType.GREATER_EQUAL:
            return useVec4 ? GREATER_EQUAL_VEC4 : GREATER_EQUAL;
        case BinaryOpType.LESS:
            return useVec4 ? LESS_VEC4 : LESS;
        case BinaryOpType.LESS_EQUAL:
            return useVec4 ? LESS_EQUAL_VEC4 : LESS_EQUAL;
        case BinaryOpType.LOGICAL_AND:
            return useVec4 ? LOGICAL_AND_VEC4 : LOGICAL_AND;
        case BinaryOpType.NOT_EQUAL:
            return useVec4 ? NOT_EQUAL_VEC4 : NOT_EQUAL;
        case BinaryOpType.SQUARED_DIFFERENCE:
            return SQUARED_DIFFERENCE;
        case BinaryOpType.INT_DIV:
            return useVec4 ? INT_DIV_VEC4 : INT_DIV;
        case BinaryOpType.PRELU:
            return useVec4 ? PRELU_VEC4 : PRELU;
        case BinaryOpType.MAX:
            return getBinaryWithNanString('max', useVec4);
        case BinaryOpType.MIN:
            return getBinaryWithNanString('min', useVec4);
        case BinaryOpType.POW:
            return useVec4 ? POW_VEC4 : POW;
        case BinaryOpType.COMPLEX_MULTIPLY_REAL:
            return COMPLEX_MULTIPLY_REAL;
        case BinaryOpType.COMPLEX_MULTIPLY_IMAG:
            return COMPLEX_MULTIPLY_IMAG;
        default:
            throw new Error(`BinaryType ${type} is not implemented!`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5X29wX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWJhY2tlbmQtd2ViZ3B1L3NyYy9iaW5hcnlfb3BfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxNQUFNLENBQU4sSUFBWSxZQXFCWDtBQXJCRCxXQUFZLFlBQVk7SUFDdEIsNkNBQUcsQ0FBQTtJQUNILDZDQUFHLENBQUE7SUFDSCxpREFBSyxDQUFBO0lBQ0wsNkNBQUcsQ0FBQTtJQUNILDZDQUFHLENBQUE7SUFDSCxpREFBSyxDQUFBO0lBQ0wscURBQU8sQ0FBQTtJQUNQLGlFQUFhLENBQUE7SUFDYiwrQ0FBSSxDQUFBO0lBQ0osMkRBQVUsQ0FBQTtJQUNWLDhEQUFXLENBQUE7SUFDWCwwREFBUyxDQUFBO0lBQ1QsNEVBQWtCLENBQUE7SUFDbEIsc0RBQU8sQ0FBQTtJQUNQLDhDQUFHLENBQUE7SUFDSCxrREFBSyxDQUFBO0lBQ0wsOENBQUcsQ0FBQTtJQUNILDhDQUFHLENBQUE7SUFDSCxrRkFBcUIsQ0FBQTtJQUNyQixrRkFBcUIsQ0FBQTtBQUN2QixDQUFDLEVBckJXLFlBQVksS0FBWixZQUFZLFFBcUJ2QjtBQUVELE1BQU0saUJBQWlCLEdBQUc7OztHQUd2QixDQUFDO0FBRUosTUFBTSw0QkFBNEIsR0FBRzs7Ozs7Ozs7Ozs7OztHQWFsQyxDQUFDO0FBRUosTUFBTSxzQkFBc0IsR0FBRzs7SUFFM0IsNEJBQTRCO0dBQzdCLENBQUM7QUFFSixNQUFNLEdBQUcsR0FBRyxlQUFlLENBQUM7QUFDNUIsdUJBQXVCO0FBQ3ZCLHNEQUFzRDtBQUN0RCxpQkFBaUI7QUFDakIsbUJBQW1CO0FBQ25CLE1BQU0scUJBQXFCLEdBQUcsdUNBQXVDLENBQUM7QUFDdEUsTUFBTSxxQkFBcUIsR0FBRyx1Q0FBdUMsQ0FBQztBQUN0RSxNQUFNLEdBQUcsR0FBRyxlQUFlLENBQUM7QUFDNUIsTUFB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bGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5leHBvcnQgZW51bSBCaW5hcnlPcFR5cGUge1xuICBNVUwsXG4gIEFERCxcbiAgQVRBTjIsXG4gIFNVQixcbiAgRElWLFxuICBFUVVBTCxcbiAgR1JFQVRFUixcbiAgR1JFQVRFUl9FUVVBTCxcbiAgTEVTUyxcbiAgTEVTU19FUVVBTCxcbiAgTE9HSUNBTF9BTkQsXG4gIE5PVF9FUVVBTCxcbiAgU1FVQVJFRF9ESUZGRVJFTkNFLFxuICBJTlRfRElWLFxuICBQT1csXG4gIFBSRUxVLFxuICBNQVgsXG4gIE1JTixcbiAgQ09NUExFWF9NVUxUSVBMWV9SRUFMLFxuICBDT01QTEVYX01VTFRJUExZX0lNQUdcbn1cblxuY29uc3QgQ0hFQ0tfTkFOX1NOSVBQRVQgPSBgXG4gIGlmIChpc25hbihhKSkgeyByZXR1cm4gYTsgfVxuICBpZiAoaXNuYW4oYikpIHsgcmV0dXJuIGI7IH1cbiAgYDtcblxuY29uc3QgQ0hFQ0tfTkFOX1NOSVBQRVRfVkVDNF9JTk5FUiA9IGBcbiAgaWYgKGlzTmFOLnIpIHtcbiAgICByZXN1bHRUZW1wLnIgPSB2YWx1ZUZvck5hTjtcbiAgfVxuICBpZiAoaXNOYU4uZykge1xuICAgIHJlc3VsdFRlbXAuZyA9IHZhbHVlRm9yTmFOO1xuICB9XG4gIGlmIChpc05hTi5iKSB7XG4gICAgcmVzdWx0VGVtcC5iID0gdmFsdWVGb3JOYU47XG4gIH1cbiAgaWYgKGlzTmFOLmEpIHtcbiAgICByZXN1bHRUZW1wLmEgPSB2YWx1ZUZvck5hTjtcbiAgfVxuICBgO1xuXG5jb25zdCBDSEVDS19OQU5fU05JUFBFVF9WRUM0ID0gYFxuICBsZXQgaXNOYU4gPSBpc25hblZlYzQoYSkgfCBpc25hblZlYzQoYik7XG4gICR7Q0hFQ0tfTkFOX1NOSVBQRVRfVkVDNF9JTk5FUn1cbiAgYDtcblxuY29uc3QgQUREID0gJ3JldHVybiBhICsgYjsnO1xuLy8gKEFyICsgQWkpKEJyICsgQmkpID1cbi8vIEFyQnIgKyBBckJpICsgQWlCciArIEFpQmkgPSBBckJyIC0gQUIgKyBBckJpICsgQWlCclxuLy8gWXIgPSBBckJyIC0gQUJcbi8vIFlpID0gQXJCaSArIEFpQnJcbmNvbnN0IENPTVBMRVhfTVVMVElQTFlfUkVBTCA9ICdyZXR1cm4gYXJlYWwgKiBicmVhbCAtIGFpbWFnICogYmltYWc7JztcbmNvbnN0IENPTVBMRVhfTVVMVElQTFlfSU1BRyA9ICdyZXR1cm4gYXJlYWwgKiBiaW1hZyArIGFpbWFnICogYnJlYWw7JztcbmNvbnN0IERJViA9ICdyZXR1cm4gYSAvIGI7JztcbmNvbnN0IE1VTCA9ICdyZXR1cm4gYSAqIGI7JztcbmNvbnN0IFNRVUFSRURfRElGRkVSRU5DRSA9ICdyZXR1cm4gKGEgLSBiKSAqIChhIC0gYik7JztcbmNvbnN0IFNVQiA9ICdyZXR1cm4gYSAtIGI7JztcbmNvbnN0IEVRVUFMID0gJ3JldHVybiBmMzIoYSA9PSBiKTsnO1xuY29uc3QgRVFVQUxfVkVDNCA9ICdyZXR1cm4gdmVjNDxmMzI+KGEgPT0gYik7JztcbmNvbnN0IEdSRUFURVIgPSAncmV0dXJuIGYzMihhID4gYik7JztcbmNvbnN0IEdSRUFURVJfVkVDNCA9ICdyZXR1cm4gdmVjNDxmMzI+KGEgPiBiKTsnO1xuY29uc3QgR1JFQVRFUl9FUVVBTCA9ICdyZXR1cm4gZjMyKGEgPj0gYik7JztcbmNvbnN0IEdSRUFURVJfRVFVQUxfVkVDNCA9ICdyZXR1cm4gdmVjNDxmMzI+KGEgPj0gYik7JztcbmNvbnN0IExFU1MgPSAncmV0dXJuIGYzMihhIDwgYik7JztcbmNvbnN0IExFU1NfVkVDNCA9ICdyZXR1cm4gdmVjNDxmMzI+KGEgPCBiKTsnO1xuY29uc3QgTEVTU19FUVVBTCA9ICdyZXR1cm4gZjMyKGEgPD0gYik7JztcbmNvbnN0IExFU1NfRVFVQUxfVkVDNCA9ICdyZXR1cm4gdmVjNDxmMzI+KGEgPD0gYik7JztcbmNvbnN0IExPR0lDQUxfQU5EID0gJ3JldHVybiBmMzIoZjMyKGEpID49IDEuMCAmJiBmMzIoYikgPj0gMS4wKTsnO1xuY29uc3QgTE9HSUNBTF9BTkRfVkVDNCA9IGByZXR1cm4gKHZlYzQ8ZjMyPihhID49IHZlYzQ8ZjMyPigxLjApKSAqXG4gIHZlYzQ8ZjMyPihiID49IHZlYzQ8ZjMyPigxLjApKSk7YDtcbmNvbnN0IElOVF9ESVYgPSBgXG4gIGxldCBzID0gc2lnbihhKSAqIHNpZ24oYik7XG4gIGxldCBpYSA9IGkzMihyb3VuZChhKSk7XG4gIGxldCBpYiA9IGkzMihyb3VuZChiKSk7XG4gIHJldHVybiBmMzIoaWRpdihpYSwgaWIsIHMpKTtcbiAgYDtcblxuY29uc3QgSU5UX0RJVl9WRUM0ID0gYFxuICBsZXQgaWEgPSB2ZWM0PGkzMj4ocm91bmQoYSkpO1xuICBsZXQgaWIgPSB2ZWM0PGkzMj4ocm91bmQoYikpO1xuICBsZXQgY29uZCA9IGliICE9IHZlYzQ8aTMyPigwKTtcbiAgdmFyIHJlc3VsdFRlbXAgPSB2ZWM0PGkzMj4oMCk7XG4gIGxldCBzID0gc2lnbihhKSAqIHNpZ24oYik7XG5cbiAgLy8gV2luZG93cyAoRDNEKSB3YW50cyBndWFyYW50ZWVkIG5vbi16ZXJvIGludCBkaXZpc2lvbiBhdCBjb21waWxlLXRpbWUuXG4gIGlmIChjb25kWzBdKSB7XG4gICAgcmVzdWx0VGVtcFswXSA9IGlkaXYoaWFbMF0sIGliWzBdLCBzWzBdKTtcbiAgfVxuICBpZiAoY29uZFsxXSkge1xuICAgIHJlc3VsdFRlbXBbMV0gPSBpZGl2KGlhWzFdLCBpYlsxXSwgc1sxXSk7XG4gIH1cbiAgaWYgKGNvbmRbMl0pIHtcbiAgICByZXN1bHRUZW1wWzJdID0gaWRpdihpYVsyXSwgaWJbMl0sIHNbMl0pO1xuICB9XG4gIGlmIChjb25kWzNdKSB7XG4gICAgcmVzdWx0VGVtcFszXSA9IGlkaXYoaWFbM10sIGliWzNdLCBzWzNdKTtcbiAgfVxuICByZXR1cm4gdmVjNDxmMzI+KHJlc3VsdFRlbXApO1xuICBgO1xuXG5jb25zdCBOT1RfRVFVQUwgPSBgXG4gIGlmIChpc25hbihhKSB8fCBpc25hbihiKSkge1xuICAgIHJldHVybiAxLjA7XG4gIH1cbiAgcmV0dXJuIGYzMihhICE9IGIpO1xuYDtcbmNvbnN0IE5PVF9FUVVBTF9WRUM0ID0gYFxuICB2YXIgcmVzdWx0VGVtcCA9IHZlYzQ8ZjMyPihhICE9IGIpO1xuICBsZXQgdmFsdWVGb3JOYU4gPSAxLjA7XG4gICR7Q0hFQ0tfTkFOX1NOSVBQRVRfVkVDNH1cblxuICByZXR1cm4gcmVzdWx0VGVtcDtcbmA7XG5jb25zdCBQT1cgPSBgXG4gIGlmKGEgPCAwLjAgJiYgZmxvb3IoYikgPCBiKSB7XG4gICAgcmV0dXJuIHVuaWZvcm1zLk5BTjtcbiAgfVxuICBpZiAoYiA9PSAwLjApIHtcbiAgICByZXR1cm4gMS4wO1xuICB9XG4gIGlmIChyb3VuZChhYnMoYikgJSAyLjApICE9IDEuMCkge1xuICAgIHJldHVybiBwb3coYWJzKGEpLCBiKTtcbiAgfVxuICByZXR1cm4gc2lnbihhKSAqIHBvdyhhYnMoYSksIGIpO1xuICBgO1xuY29uc3QgUE9XX1ZFQzQgPSBgXG4gIGxldCBpc01vZFJvdW5kMUJvb2wgPSB2ZWM0PGkzMj4ocm91bmQoYWJzKGIpICUgdmVjNDxmMzI+KDIuMCkpKSA9PSB2ZWM0PGkzMj4oMSk7XG4gIGxldCBpc01vZFJvdW5kMSA9IHZlYzQ8ZjMyPihpc01vZFJvdW5kMUJvb2wpO1xuICBsZXQgbXVsdGlwbGllciA9IHNpZ24oYSkgKiBpc01vZFJvdW5kMSArICh2ZWM0PGYzMj4oMS4wKSAtIGlzTW9kUm91bmQxKTtcbiAgdmFyIHJlc3VsdFRlbXAgPSBtdWx0aXBsaWVyICogcG93KGFicyhhKSwgYik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgYV4wID0gMSwgaW5jbHVkaW5nIDBeMCA9IDEgYXMgdGhpcyBjb3JyZXNwb25kIHRvIFRGIGFuZCBKU1xuICBsZXQgaXNFeHBaZXJvID0gYiA9PSB2ZWM0PGYzMj4oMC4wKTtcbiAgaWYgKGlzRXhwWmVyby5yKSB7XG4gICAgcmVzdWx0VGVtcC5yID0gMS4wO1xuICB9XG4gIGlmIChpc0V4cFplcm8uZykge1xuICAgIHJlc3VsdFRlbXAuZyA9IDEuMDtcbiAgfVxuICBpZiAoaXNFeHBaZXJvLmIpIHtcbiAgICByZXN1bHRUZW1wLmIgPSAxLjA7XG4gIH1cbiAgaWYgKGlzRXhwWmVyby5hKSB7XG4gICAgcmVzdWx0VGVtcC5hID0gMS4wO1xuICB9XG4gIGxldCBpc05hTiA9IChhIDwgdmVjNDxmMzI+KDAuMCkpICYgKGZsb29yKGIpIDwgYik7XG4gIGxldCB2YWx1ZUZvck5hTiA9IHVuaWZvcm1zLk5BTjtcbiAgJHtDSEVDS19OQU5fU05JUFBFVF9WRUM0X0lOTkVSfVxuICByZXR1cm4gcmVzdWx0VGVtcDtcbiAgYDtcblxuY29uc3QgUFJFTFUgPSBgaWYgKGEgPCAwLjApIHsgcmV0dXJuIGIgKiBhOyB9ICByZXR1cm4gYTtgO1xuY29uc3QgUFJFTFVfVkVDNCA9IGBcbiAgbGV0IGFMZXNzVGhhblplcm8gPSB2ZWM0PGYzMj4oYSA8IHZlYzQ8ZjMyPigwLjApKTtcbiAgcmV0dXJuIChhTGVzc1RoYW5aZXJvICogKGIgKiBhKSkgKyAoKHZlYzQ8ZjMyPigxLjApIC0gYUxlc3NUaGFuWmVybykgKiBhKTtcbiAgYDtcblxuZnVuY3Rpb24gZ2V0QmluYXJ5V2l0aE5hblN0cmluZyhcbiAgICBvcDogc3RyaW5nLCB1c2VWZWM0OiBib29sZWFuLCB2YWx1ZUZvck5hTiA9ICd1bmlmb3Jtcy5OQU4nKSB7XG4gIGNvbnN0IGNoZWNrTmFuU25pcHBldCA9IHVzZVZlYzQgPyBDSEVDS19OQU5fU05JUFBFVF9WRUM0IDogQ0hFQ0tfTkFOX1NOSVBQRVQ7XG4gIHJldHVybiB1c2VWZWM0ID8gYFxuICAgIGxldCB2YWx1ZUZvck5hTiA9ICR7dmFsdWVGb3JOYU59O1xuICAgIHZhciByZXN1bHRUZW1wID0gdmVjNDxmMzI+KCR7b3B9KGEsIGIpKTtcbiAgICBgICsgY2hlY2tOYW5TbmlwcGV0ICtcbiAgICAgICAgICBgXG4gICAgcmV0dXJuIHJlc3VsdFRlbXA7XG4gIGAgOlxuICAgICAgICAgICAgICAgICAgIGNoZWNrTmFuU25pcHBldCArIGBcbiAgICByZXR1cm4gJHtvcH0oYSwgYik7XG4gIGA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaW5hcnlPcFN0cmluZyhcbiAgICB0eXBlOiBCaW5hcnlPcFR5cGUsIHVzZVZlYzQ/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBCaW5hcnlPcFR5cGUuTVVMOlxuICAgICAgcmV0dXJuIE1VTDtcbiAgICBjYXNlIEJpbmFyeU9wVHlwZS5BREQ6XG4gICAgICByZXR1cm4gQUREO1xuICAgIGNhc2UgQmluYXJ5T3BUeXBlLkFUQU4yOlxuICAgICAgcmV0dXJuIGdldEJpbmFyeVdpdGhOYW5TdHJpbmcoJ2F0YW4yJywgdXNlVmVjNCk7XG4gICAgY2FzZSBCaW5hcnlPcFR5cGUuU1VCOlxuICAgICAgcmV0dXJuIFNVQjtcbiAgICBjYXNlIEJpbmFyeU9wVHlwZS5ESVY6XG4gICAgICByZXR1cm4gRElWO1xuICAgIGNhc2UgQmluYXJ5T3BUeXBlLkVRVUFMOlxuICAgICAgcmV0dXJuIHVzZVZlYzQgPyBFUVVBTF9WRUM0IDogRVFVQUw7XG4gICAgY2FzZSBCaW5hcnlPcFR5cGUuR1JFQVRFUjpcbiAgICAgIHJldHVybiB1c2VWZWM0ID8gR1JFQVRFUl9WRUM0IDogR1JFQVRFUjtcbiAgICBjYXNlIEJpbmFyeU9wVHlwZS5HUkVBVEVSX0VRVUFMOlxuICAgICAgcmV0dXJuIHVzZVZlYzQgPyBHUkVBVEVSX0VRVUFMX1ZFQzQgOiBHUkVBVEVSX0VRVUFMO1xuICAgIGNhc2UgQmluYXJ5T3BUeXBlLkxFU1M6XG4gICAgICByZXR1cm4gdXNlVmVjNCA/IExFU1NfVkVDNCA6IExFU1M7XG4gICAgY2FzZSBCaW5hcnlPcFR5cGUuTEVTU19FUVVBTDpcbiAgICAgIHJldHVybiB1c2VWZWM0ID8gTEVTU19FUVVBTF9WRUM0IDogTEVTU19FUVVBTDtcbiAgICBjYXNlIEJpbmFyeU9wVHlwZS5MT0dJQ0FMX0FORDpcbiAgICAgIHJldHVybiB1c2VWZWM0ID8gTE9HSUNBTF9BTkRfVkVDNCA6IExPR0lDQUxfQU5EO1xuICAgIGNhc2UgQmluYXJ5T3BUeXBlLk5PVF9FUVVBTDpcbiAgICAgIHJldHVybiB1c2VWZWM0ID8gTk9UX0VRVUFMX1ZFQzQgOiBOT1RfRVFVQUw7XG4gICAgY2FzZSBCaW5hcnlPcFR5cGUuU1FVQVJFRF9ESUZGRVJFTkNFOlxuICAgICAgcmV0dXJuIFNRVUFSRURfRElGRkVSRU5DRTtcbiAgICBjYXNlIEJpbmFyeU9wVHlwZS5JTlRfRElWOlxuICAgICAgcmV0dXJuIHVzZVZlYzQgPyBJTlRfRElWX1ZFQzQgOiBJTlRfRElWO1xuICAgIGNhc2UgQmluYXJ5T3BUeXBlLlBSRUxVOlxuICAgICAgcmV0dXJuIHVzZVZlYzQgPyBQUkVMVV9WRUM0IDogUFJFTFU7XG4gICAgY2FzZSBCaW5hcnlPcFR5cGUuTUFYOlxuICAgICAgcmV0dXJuIGdldEJpbmFyeVdpdGhOYW5TdHJpbmcoJ21heCcsIHVzZVZlYzQpO1xuICAgIGNhc2UgQmluYXJ5T3BUeXBlLk1JTjpcbiAgICAgIHJldHVybiBnZXRCaW5hcnlXaXRoTmFuU3RyaW5nKCdtaW4nLCB1c2VWZWM0KTtcbiAgICBjYXNlIEJpbmFyeU9wVHlwZS5QT1c6XG4gICAgICByZXR1cm4gdXNlVmVjNCA/IFBPV19WRUM0IDogUE9XO1xuICAgIGNhc2UgQmluYXJ5T3BUeXBlLkNPTVBMRVhfTVVMVElQTFlfUkVBTDpcbiAgICAgIHJldHVybiBDT01QTEVYX01VTFRJUExZX1JFQUw7XG4gICAgY2FzZSBCaW5hcnlPcFR5cGUuQ09NUExFWF9NVUxUSVBMWV9JTUFHOlxuICAgICAgcmV0dXJuIENPTVBMRVhfTVVMVElQTFlfSU1BRztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCaW5hcnlUeXBlICR7dHlwZX0gaXMgbm90IGltcGxlbWVudGVkIWApO1xuICB9XG59XG4iXX0=