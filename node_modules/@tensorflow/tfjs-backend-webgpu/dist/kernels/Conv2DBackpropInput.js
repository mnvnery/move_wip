/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { backend_util, Conv2DBackpropInput, env } from '@tensorflow/tfjs-core';
import { Conv2DDerInputMMProgram } from '../conv_backprop_mm_webgpu';
import { Conv2DDerInputProgram } from '../conv_backprop_webgpu';
export function conv2DBackpropInput(args) {
    const { inputs, backend, attrs } = args;
    const { dy, filter } = inputs;
    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;
    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);
    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);
    const dimensions = [
        { type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth] },
        {
            type: 'int32',
            data: [
                convInfo.filterHeight - 1 - convInfo.padInfo.top,
                convInfo.filterWidth - 1 - convInfo.padInfo.left
            ]
        },
        { type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth] },
        {
            type: 'int32',
            data: [
                convInfo.batchSize, convInfo.outHeight, convInfo.outWidth,
                convInfo.outChannels
            ]
        },
    ];
    let program;
    // When filter size is small, Conv2DDerInputProgram is much faster than
    // Conv2DDerInputMMProgram.
    if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') ||
        convInfo.filterHeight <= 2 && convInfo.filterWidth <= 2 &&
            convInfo.outChannels <= 16 && convInfo.inChannels === 1) {
        program = new Conv2DDerInputProgram(convInfo);
    }
    else {
        program = new Conv2DDerInputMMProgram(convInfo);
        const dimAOuter = convInfo.inHeight * convInfo.inWidth;
        const dimBOuter = convInfo.inChannels;
        const dimInner = convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;
        dimensions.push({ type: 'uint32', data: [dimAOuter] }, { type: 'uint32', data: [dimBOuter] }, { type: 'uint32', data: [dimInner] });
    }
    return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);
}
export const conv2DBackpropInputConfig = {
    kernelName: Conv2DBackpropInput,
    backendName: 'webgpu',
    kernelFunc: conv2DBackpropInput,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udjJEQmFja3Byb3BJbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJncHUvc3JjL2tlcm5lbHMvQ29udjJEQmFja3Byb3BJbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsWUFBWSxFQUFFLG1CQUFtQixFQUF1RCxHQUFHLEVBQTJCLE1BQU0sdUJBQXVCLENBQUM7QUFHNUosT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFFOUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBSW5DO0lBQ0MsTUFBTSxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3RDLE1BQU0sRUFBQyxFQUFFLEVBQUUsTUFBTSxFQUFDLEdBQUcsTUFBTSxDQUFDO0lBQzVCLE1BQU0sRUFBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFDLEdBQUcsS0FBSyxDQUFDO0lBRXRFLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyRSxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsaUJBQWlCLENBQzNDLFVBQVUsRUFBRSxNQUFNLENBQUMsS0FBeUMsRUFBRSxPQUFPLEVBQ3JFLENBQUMsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFakUsTUFBTSxVQUFVLEdBQUc7UUFDakIsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFDO1FBQ3BFO1lBQ0UsSUFBSSxFQUFFLE9BQU87WUFDYixJQUFJLEVBQUU7Z0JBQ0osUUFBUSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHO2dCQUNoRCxRQUFRLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUk7YUFDakQ7U0FDRjtRQUNELEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBQztRQUNwRTtZQUNFLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFO2dCQUNKLFFBQVEsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsUUFBUTtnQkFDekQsUUFBUSxDQUFDLFdBQVc7YUFDckI7U0FDRjtLQUNGLENBQUM7SUFDRixJQUFJLE9BQXNELENBQUM7SUFDM0QsdUVBQXVFO0lBQ3ZFLDJCQUEyQjtJQUMzQixJQUFJLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQztRQUNsRCxRQUFRLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsV0FBVyxJQUFJLENBQUM7WUFDbkQsUUFBUSxDQUFDLFdBQVcsSUFBSSxFQUFFLElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7UUFDL0QsT0FBTyxHQUFHLElBQUkscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDL0M7U0FBTTtRQUNMLE9BQU8sR0FBRyxJQUFJLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUN2RCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ3RDLE1BQU0sUUFBUSxHQUNWLFFBQVEsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ3hFLFVBQVUsQ0FBQyxJQUFJLENBQ1gsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEVBQ25DLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxFQUNuQyxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBQ0QsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWlCO0lBQ3JELFVBQVUsRUFBRSxtQkFBbUI7SUFDL0IsV0FBVyxFQUFFLFFBQVE7SUFDckIsVUFBVSxFQUFFLG1CQUF1QztDQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2JhY2tlbmRfdXRpbCwgQ29udjJEQmFja3Byb3BJbnB1dCwgQ29udjJEQmFja3Byb3BJbnB1dEF0dHJzLCBDb252MkRCYWNrcHJvcElucHV0SW5wdXRzLCBlbnYsIEtlcm5lbENvbmZpZywgS2VybmVsRnVuY30gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHtXZWJHUFVCYWNrZW5kfSBmcm9tICcuLi9iYWNrZW5kX3dlYmdwdSc7XG5pbXBvcnQge0NvbnYyRERlcklucHV0TU1Qcm9ncmFtfSBmcm9tICcuLi9jb252X2JhY2twcm9wX21tX3dlYmdwdSc7XG5pbXBvcnQge0NvbnYyRERlcklucHV0UHJvZ3JhbX0gZnJvbSAnLi4vY29udl9iYWNrcHJvcF93ZWJncHUnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udjJEQmFja3Byb3BJbnB1dChhcmdzOiB7XG4gIGlucHV0czogQ29udjJEQmFja3Byb3BJbnB1dElucHV0cyxcbiAgYXR0cnM6IENvbnYyREJhY2twcm9wSW5wdXRBdHRycyxcbiAgYmFja2VuZDogV2ViR1BVQmFja2VuZFxufSkge1xuICBjb25zdCB7aW5wdXRzLCBiYWNrZW5kLCBhdHRyc30gPSBhcmdzO1xuICBjb25zdCB7ZHksIGZpbHRlcn0gPSBpbnB1dHM7XG4gIGNvbnN0IHtpbnB1dFNoYXBlLCBzdHJpZGVzLCBwYWQsIGRhdGFGb3JtYXQsIGRpbVJvdW5kaW5nTW9kZX0gPSBhdHRycztcblxuICBjb25zdCAkZGF0YUZvcm1hdCA9IGJhY2tlbmRfdXRpbC5jb252ZXJ0Q29udjJERGF0YUZvcm1hdChkYXRhRm9ybWF0KTtcbiAgY29uc3QgY29udkluZm8gPSBiYWNrZW5kX3V0aWwuY29tcHV0ZUNvbnYyREluZm8oXG4gICAgICBpbnB1dFNoYXBlLCBmaWx0ZXIuc2hhcGUgYXMgW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIHN0cmlkZXMsXG4gICAgICAxIC8qIGRpbGF0aW9ucyAqLywgcGFkLCBkaW1Sb3VuZGluZ01vZGUsIGZhbHNlLCAkZGF0YUZvcm1hdCk7XG5cbiAgY29uc3QgZGltZW5zaW9ucyA9IFtcbiAgICB7dHlwZTogJ2ludDMyJywgZGF0YTogW2NvbnZJbmZvLmZpbHRlckhlaWdodCwgY29udkluZm8uZmlsdGVyV2lkdGhdfSxcbiAgICB7XG4gICAgICB0eXBlOiAnaW50MzInLFxuICAgICAgZGF0YTogW1xuICAgICAgICBjb252SW5mby5maWx0ZXJIZWlnaHQgLSAxIC0gY29udkluZm8ucGFkSW5mby50b3AsXG4gICAgICAgIGNvbnZJbmZvLmZpbHRlcldpZHRoIC0gMSAtIGNvbnZJbmZvLnBhZEluZm8ubGVmdFxuICAgICAgXVxuICAgIH0sXG4gICAge3R5cGU6ICdpbnQzMicsIGRhdGE6IFtjb252SW5mby5zdHJpZGVIZWlnaHQsIGNvbnZJbmZvLnN0cmlkZVdpZHRoXX0sXG4gICAge1xuICAgICAgdHlwZTogJ2ludDMyJyxcbiAgICAgIGRhdGE6IFtcbiAgICAgICAgY29udkluZm8uYmF0Y2hTaXplLCBjb252SW5mby5vdXRIZWlnaHQsIGNvbnZJbmZvLm91dFdpZHRoLFxuICAgICAgICBjb252SW5mby5vdXRDaGFubmVsc1xuICAgICAgXVxuICAgIH0sXG4gIF07XG4gIGxldCBwcm9ncmFtOiBDb252MkREZXJJbnB1dFByb2dyYW18Q29udjJERGVySW5wdXRNTVByb2dyYW07XG4gIC8vIFdoZW4gZmlsdGVyIHNpemUgaXMgc21hbGwsIENvbnYyRERlcklucHV0UHJvZ3JhbSBpcyBtdWNoIGZhc3RlciB0aGFuXG4gIC8vIENvbnYyRERlcklucHV0TU1Qcm9ncmFtLlxuICBpZiAoZW52KCkuZ2V0Qm9vbCgnV0VCR1BVX1VTRV9OQUlWRV9DT05WMkRfVFJBTlNQT1NFJykgfHxcbiAgICAgIGNvbnZJbmZvLmZpbHRlckhlaWdodCA8PSAyICYmIGNvbnZJbmZvLmZpbHRlcldpZHRoIDw9IDIgJiZcbiAgICAgICAgICBjb252SW5mby5vdXRDaGFubmVscyA8PSAxNiAmJiBjb252SW5mby5pbkNoYW5uZWxzID09PSAxKSB7XG4gICAgcHJvZ3JhbSA9IG5ldyBDb252MkREZXJJbnB1dFByb2dyYW0oY29udkluZm8pO1xuICB9IGVsc2Uge1xuICAgIHByb2dyYW0gPSBuZXcgQ29udjJERGVySW5wdXRNTVByb2dyYW0oY29udkluZm8pO1xuICAgIGNvbnN0IGRpbUFPdXRlciA9IGNvbnZJbmZvLmluSGVpZ2h0ICogY29udkluZm8uaW5XaWR0aDtcbiAgICBjb25zdCBkaW1CT3V0ZXIgPSBjb252SW5mby5pbkNoYW5uZWxzO1xuICAgIGNvbnN0IGRpbUlubmVyID1cbiAgICAgICAgY29udkluZm8uZmlsdGVySGVpZ2h0ICogY29udkluZm8uZmlsdGVyV2lkdGggKiBjb252SW5mby5vdXRDaGFubmVscztcbiAgICBkaW1lbnNpb25zLnB1c2goXG4gICAgICAgIHt0eXBlOiAndWludDMyJywgZGF0YTogW2RpbUFPdXRlcl19LFxuICAgICAgICB7dHlwZTogJ3VpbnQzMicsIGRhdGE6IFtkaW1CT3V0ZXJdfSxcbiAgICAgICAge3R5cGU6ICd1aW50MzInLCBkYXRhOiBbZGltSW5uZXJdfSk7XG4gIH1cbiAgcmV0dXJuIGJhY2tlbmQucnVuV2ViR1BVUHJvZ3JhbShwcm9ncmFtLCBbZHksIGZpbHRlcl0sICdmbG9hdDMyJywgZGltZW5zaW9ucyk7XG59XG5cbmV4cG9ydCBjb25zdCBjb252MkRCYWNrcHJvcElucHV0Q29uZmlnOiBLZXJuZWxDb25maWcgPSB7XG4gIGtlcm5lbE5hbWU6IENvbnYyREJhY2twcm9wSW5wdXQsXG4gIGJhY2tlbmROYW1lOiAnd2ViZ3B1JyxcbiAga2VybmVsRnVuYzogY29udjJEQmFja3Byb3BJbnB1dCBhcyB7fSBhcyBLZXJuZWxGdW5jLFxufTtcbiJdfQ==