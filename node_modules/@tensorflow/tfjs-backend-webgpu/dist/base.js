/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import './flags_webgpu';
import { env, registerBackend } from '@tensorflow/tfjs-core';
import { WebGPUBackend } from './backend_webgpu';
import { isWebGPUSupported } from './webgpu_util';
if (isWebGPUSupported()) {
    registerBackend('webgpu', async () => {
        // Remove it once we figure out how to correctly read the tensor data
        // before the tensor is disposed in profiling mode.
        env().set('CHECK_COMPUTATION_FOR_ERRORS', false);
        const gpuDescriptor = {
            powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?
                'low-power' :
                'high-performance'
        };
        const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);
        const adapterLimits = adapter.limits;
        const deviceDescriptor = {};
        const supportTimeQuery = adapter.features.has('timestamp-query');
        deviceDescriptor.requiredLimits = {
            'maxComputeWorkgroupStorageSize': adapterLimits.maxComputeWorkgroupStorageSize,
            'maxComputeWorkgroupsPerDimension': adapterLimits.maxComputeWorkgroupsPerDimension,
            'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,
        };
        if (supportTimeQuery) {
            deviceDescriptor.requiredFeatures = ['timestamp-query'];
        }
        const device = await adapter.requestDevice(deviceDescriptor);
        // tslint:disable-next-line:no-any
        const adapterInfo = await adapter.requestAdapterInfo();
        return new WebGPUBackend(device, adapterInfo);
    }, 3 /*priority*/);
}
// Export webgpu utilities
export * from './webgpu';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJncHUvc3JjL2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUMsR0FBRyxFQUFFLGVBQWUsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTNELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFaEQsSUFBSSxpQkFBaUIsRUFBRSxFQUFFO0lBQ3ZCLGVBQWUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkMscUVBQXFFO1FBQ3JFLG1EQUFtRDtRQUNuRCxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsOEJBQThCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakQsTUFBTSxhQUFhLEdBQTZCO1lBQzlDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxXQUFXLENBQUMsQ0FBQztnQkFDYixrQkFBa0I7U0FDdkIsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEUsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNyQyxNQUFNLGdCQUFnQixHQUF3QixFQUFFLENBQUM7UUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLGdCQUFnQixDQUFDLGNBQWMsR0FBRztZQUNoQyxnQ0FBZ0MsRUFDNUIsYUFBYSxDQUFDLDhCQUE4QjtZQUNoRCxrQ0FBa0MsRUFDOUIsYUFBYSxDQUFDLGdDQUFnQztZQUNsRCw2QkFBNkIsRUFBRSxhQUFhLENBQUMsMkJBQTJCO1NBQ3pFLENBQUM7UUFFRixJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLGdCQUFnQixDQUFDLGdCQUFnQixHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN6RDtRQUNELE1BQU0sTUFBTSxHQUFjLE1BQU0sT0FBTyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3hFLGtDQUFrQztRQUNsQyxNQUFNLFdBQVcsR0FBRyxNQUFPLE9BQWUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxhQUFhLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDcEI7QUFFRCwwQkFBMEI7QUFDMUIsY0FBYyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCAnLi9mbGFnc193ZWJncHUnO1xuXG5pbXBvcnQge2VudiwgcmVnaXN0ZXJCYWNrZW5kfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge1dlYkdQVUJhY2tlbmR9IGZyb20gJy4vYmFja2VuZF93ZWJncHUnO1xuaW1wb3J0IHtpc1dlYkdQVVN1cHBvcnRlZH0gZnJvbSAnLi93ZWJncHVfdXRpbCc7XG5cbmlmIChpc1dlYkdQVVN1cHBvcnRlZCgpKSB7XG4gIHJlZ2lzdGVyQmFja2VuZCgnd2ViZ3B1JywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFJlbW92ZSBpdCBvbmNlIHdlIGZpZ3VyZSBvdXQgaG93IHRvIGNvcnJlY3RseSByZWFkIHRoZSB0ZW5zb3IgZGF0YVxuICAgIC8vIGJlZm9yZSB0aGUgdGVuc29yIGlzIGRpc3Bvc2VkIGluIHByb2ZpbGluZyBtb2RlLlxuICAgIGVudigpLnNldCgnQ0hFQ0tfQ09NUFVUQVRJT05fRk9SX0VSUk9SUycsIGZhbHNlKTtcblxuICAgIGNvbnN0IGdwdURlc2NyaXB0b3I6IEdQVVJlcXVlc3RBZGFwdGVyT3B0aW9ucyA9IHtcbiAgICAgIHBvd2VyUHJlZmVyZW5jZTogZW52KCkuZ2V0KCdXRUJHUFVfVVNFX0xPV19QT1dFUl9HUFUnKSA/XG4gICAgICAgICAgJ2xvdy1wb3dlcicgOlxuICAgICAgICAgICdoaWdoLXBlcmZvcm1hbmNlJ1xuICAgIH07XG5cbiAgICBjb25zdCBhZGFwdGVyID0gYXdhaXQgbmF2aWdhdG9yLmdwdS5yZXF1ZXN0QWRhcHRlcihncHVEZXNjcmlwdG9yKTtcbiAgICBjb25zdCBhZGFwdGVyTGltaXRzID0gYWRhcHRlci5saW1pdHM7XG4gICAgY29uc3QgZGV2aWNlRGVzY3JpcHRvcjogR1BVRGV2aWNlRGVzY3JpcHRvciA9IHt9O1xuICAgIGNvbnN0IHN1cHBvcnRUaW1lUXVlcnkgPSBhZGFwdGVyLmZlYXR1cmVzLmhhcygndGltZXN0YW1wLXF1ZXJ5Jyk7XG4gICAgZGV2aWNlRGVzY3JpcHRvci5yZXF1aXJlZExpbWl0cyA9IHtcbiAgICAgICdtYXhDb21wdXRlV29ya2dyb3VwU3RvcmFnZVNpemUnOlxuICAgICAgICAgIGFkYXB0ZXJMaW1pdHMubWF4Q29tcHV0ZVdvcmtncm91cFN0b3JhZ2VTaXplLFxuICAgICAgJ21heENvbXB1dGVXb3JrZ3JvdXBzUGVyRGltZW5zaW9uJzpcbiAgICAgICAgICBhZGFwdGVyTGltaXRzLm1heENvbXB1dGVXb3JrZ3JvdXBzUGVyRGltZW5zaW9uLFxuICAgICAgJ21heFN0b3JhZ2VCdWZmZXJCaW5kaW5nU2l6ZSc6IGFkYXB0ZXJMaW1pdHMubWF4U3RvcmFnZUJ1ZmZlckJpbmRpbmdTaXplLFxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydFRpbWVRdWVyeSkge1xuICAgICAgZGV2aWNlRGVzY3JpcHRvci5yZXF1aXJlZEZlYXR1cmVzID0gWyd0aW1lc3RhbXAtcXVlcnknXTtcbiAgICB9XG4gICAgY29uc3QgZGV2aWNlOiBHUFVEZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2UoZGV2aWNlRGVzY3JpcHRvcik7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIGNvbnN0IGFkYXB0ZXJJbmZvID0gYXdhaXQgKGFkYXB0ZXIgYXMgYW55KS5yZXF1ZXN0QWRhcHRlckluZm8oKTtcbiAgICByZXR1cm4gbmV3IFdlYkdQVUJhY2tlbmQoZGV2aWNlLCBhZGFwdGVySW5mbyk7XG4gIH0sIDMgLypwcmlvcml0eSovKTtcbn1cblxuLy8gRXhwb3J0IHdlYmdwdSB1dGlsaXRpZXNcbmV4cG9ydCAqIGZyb20gJy4vd2ViZ3B1JztcbiJdfQ==