{"version":3,"file":"tf-backend-webgpu.fesm.min.js","sources":["../../../../tfjs-backend-webgpu/src/flags_webgpu.ts","../../../../tfjs-backend-webgpu/src/adapter_info.ts","../../../../tfjs-backend-webgpu/src/buffer_manager.ts","../../../../tfjs-backend-webgpu/src/texture_manager.ts","../../../../tfjs-backend-webgpu/src/shader_util.ts","../../../../tfjs-backend-webgpu/src/webgpu_program.ts","../../../../tfjs-backend-webgpu/src/webgpu_util.ts","../../../../tfjs-backend-webgpu/src/backend_webgpu.ts","../../../../tfjs-backend-webgpu/src/binary_op_util.ts","../../../../tfjs-backend-webgpu/src/base.ts","../../../../tfjs-backend-webgpu/src/unary_op_util.ts","../../../../tfjs-backend-webgpu/src/activation_util.ts","../../../../tfjs-backend-webgpu/src/matmul_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_small_output_size_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_splitK_webgpu.ts","../../../../tfjs-backend-webgpu/src/fill_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Fill.ts","../../../../tfjs-backend-webgpu/src/kernels/Reshape.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgpu/src/binary_op_complex_webgpu.ts","../../../../tfjs-backend-webgpu/src/binary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Identity.ts","../../../../tfjs-backend-webgpu/src/kernels/Complex.ts","../../../../tfjs-backend-webgpu/src/unary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/kernel_funcs_utils.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgpu/src/kernels/Abs.ts","../../../../tfjs-backend-webgpu/src/kernels/Add.ts","../../../../tfjs-backend-webgpu/src/addn_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/AddN.ts","../../../../tfjs-backend-webgpu/src/argminmax_webgpu.ts","../../../../tfjs-backend-webgpu/src/transpose_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/transpose_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Transpose.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgpu/src/kernels/Atan2.ts","../../../../tfjs-backend-webgpu/src/pool2d_webgpu.ts","../../../../tfjs-backend-webgpu/src/pool_filtersizeone_webgpu.ts","../../../../tfjs-backend-webgpu/src/reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgpu/src/kernels/Max.ts","../../../../tfjs-backend-webgpu/src/kernels/Mean.ts","../../../../tfjs-backend-webgpu/src/kernels/Pool_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgpu/src/slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Slice.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/Real.ts","../../../../tfjs-backend-webgpu/src/kernels/Cast.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/int.ts","../../../../tfjs-backend-webgpu/src/kernels/Ceil.ts","../../../../tfjs-backend-webgpu/src/clip_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/clip_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgpu/src/concat_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Imag.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat.ts","../../../../tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/conv2d_naive_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgpu/src/kernels/Cos.ts","../../../../tfjs-backend-webgpu/src/kernels/Cosh.ts","../../../../tfjs-backend-webgpu/src/crop_and_resize_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgpu/src/cum_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgpu/src/depth_to_space_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_nchw_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgpu/src/kernels/Multiply.ts","../../../../tfjs-backend-webgpu/src/kernels/Sum.ts","../../../../tfjs-backend-webgpu/src/kernels/Einsum.ts","../../../../tfjs-backend-webgpu/src/kernels/Elu.ts","../../../../tfjs-backend-webgpu/src/kernels/Equal.ts","../../../../tfjs-backend-webgpu/src/kernels/Exp.ts","../../../../tfjs-backend-webgpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgpu/src/kernels/Expm1.ts","../../../../tfjs-backend-webgpu/src/flip_left_right_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgpu/src/kernels/Floor.ts","../../../../tfjs-backend-webgpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgpu/src/from_pixels_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgpu/src/batchnorm_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedBatchNorm.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgpu/src/gather_nd_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgpu/src/gather_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Greater.ts","../../../../tfjs-backend-webgpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Less.ts","../../../../tfjs-backend-webgpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/Log.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgpu/src/kernels/Maximum.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgpu/src/kernels/Min.ts","../../../../tfjs-backend-webgpu/src/kernels/Minimum.ts","../../../../tfjs-backend-webgpu/src/mirror_pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgpu/src/kernels/Neg.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgpu/src/kernels/Pack.ts","../../../../tfjs-backend-webgpu/src/pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/PadV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Pow.ts","../../../../tfjs-backend-webgpu/src/kernels/Prelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Prod.ts","../../../../tfjs-backend-webgpu/src/kernels/Range.ts","../../../../tfjs-backend-webgpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu6.ts","../../../../tfjs-backend-webgpu/src/resize_bilinear_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgpu/src/resize_nearest_neighbor_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgpu/src/rotate_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgpu/src/scatter_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgpu/src/select_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Select.ts","../../../../tfjs-backend-webgpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgpu/src/kernels/Sin.ts","../../../../tfjs-backend-webgpu/src/kernels/Sinh.ts","../../../../tfjs-backend-webgpu/src/kernels/Sub.ts","../../../../tfjs-backend-webgpu/src/kernels/Softmax.ts","../../../../tfjs-backend-webgpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgpu/src/tile_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Tile.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgpu/src/kernels/SplitV.ts","../../../../tfjs-backend-webgpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgpu/src/kernels/Square.ts","../../../../tfjs-backend-webgpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgpu/src/strided_slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgpu/src/kernels/Tanh.ts","../../../../tfjs-backend-webgpu/src/top_k_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/TopK.ts","../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Unpack.ts","../../../../tfjs-backend-webgpu/src/register_all_kernels.ts","../../../../tfjs-backend-webgpu/src/kernels/Transform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst ENV = env();\n\n/** The batched dispatching calls size in the device queue. */\nENV.registerFlag('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', () => 15);\n\n/**\n * Whether we forward execution to the CPU backend if tensors are small and\n * reside on the CPU.\n */\nENV.registerFlag('WEBGPU_CPU_FORWARD', () => true);\n\n/**\n * This flag is used to test different types of matmul programs.\n *\n * See MatMulProgramType in webgpu_util.ts for a list of available values.\n */\nENV.registerFlag('WEBGPU_MATMUL_PROGRAM_TYPE', () => -1);\n\n/**\n * Whether to use conv2dTranspose_naive which directly implement the\n * conv2dTranspose logic rather than using a matmul to simulate.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE', () => false);\n\n/**\n * Whether we use low power GPU. Otherwise, a high performance GPU will be\n * requested.\n */\nENV.registerFlag('WEBGPU_USE_LOW_POWER_GPU', () => false);\n\n/**\n * Threshold for input tensor size that determines whether WebGPU backend will\n * delegate computation to CPU.\n *\n * Default value is 1000.\n */\nENV.registerFlag('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', () => 1000);\n\n/**\n * Whether to use a dummy canvas to make profiling tools like PIX work with\n * TFJS webgpu backend.\n */\nENV.registerFlag('WEBGPU_USE_PROFILE_TOOL', () => false);\n\n/**\n * Whether to use import API.\n */\nENV.registerFlag('WEBGPU_IMPORT_EXTERNAL_TEXTURE', () => true);\n\n/**\n * Whether to use conv2dNaive for debugging.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_DEBUG', () => false);\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO: Remove it once webgpu/types is successfully upgraded.\n// https://github.com/tensorflow/tfjs/issues/6869\nexport interface GPUAdapterInfo {\n  vendor: string;\n  architecture: string;\n}\n\nexport class AdapterInfo {\n  private vendor: string;\n\n  constructor(adapterInfo: GPUAdapterInfo) {\n    if (adapterInfo) {\n      this.vendor = adapterInfo.vendor;\n    }\n  }\n\n  isIntel(): boolean {\n    return this.vendor === 'intel';\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class BufferManager {\n  private numUsedBuffers = 0;\n  private numFreeBuffers = 0;\n  private freeBuffers: Map<string, GPUBuffer[]> = new Map();\n  private usedBuffers: Map<string, GPUBuffer[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireUploadBuffer(size: number, usage: GPUBufferUsageFlags) {\n    return this.acquireBuffer(size, usage, true);\n  }\n\n  acquireBuffer(\n      size: number, usage: GPUBufferUsageFlags, mappedAtCreation = false) {\n    const key = getBufferKey(size, usage);\n    if (!this.freeBuffers.has(key)) {\n      this.freeBuffers.set(key, []);\n    }\n\n    if (!this.usedBuffers.has(key)) {\n      this.usedBuffers.set(key, []);\n    }\n\n    this.numBytesUsed += size;\n    this.numUsedBuffers++;\n\n    if (this.freeBuffers.get(key).length > 0) {\n      this.numFreeBuffers--;\n\n      const newBuffer = this.freeBuffers.get(key).shift();\n      this.usedBuffers.get(key).push(newBuffer);\n      return newBuffer;\n    }\n\n    this.numBytesAllocated += size;\n    const newBuffer = this.device.createBuffer({size, usage, mappedAtCreation});\n    this.usedBuffers.get(key).push(newBuffer);\n\n    return newBuffer;\n  }\n\n  releaseBuffer(buffer: GPUBuffer, size: number, usage: GPUBufferUsageFlags) {\n    if (this.freeBuffers.size === 0) {\n      return;\n    }\n\n    const key = getBufferKey(size, usage);\n    if (!this.freeBuffers.has(key)) {\n      this.freeBuffers.set(key, []);\n    }\n\n    this.freeBuffers.get(key).push(buffer);\n    this.numFreeBuffers++;\n    this.numUsedBuffers--;\n\n    const bufferList = this.usedBuffers.get(key);\n    const bufferIndex = bufferList.indexOf(buffer);\n    if (bufferIndex < 0) {\n      throw new Error(\n          'Cannot release a buffer that was never provided by this ' +\n          'buffer manager');\n    }\n    bufferList.splice(bufferIndex, 1);\n    this.numBytesUsed -= size;\n  }\n\n  releaseUploadBuffer(\n      buffer: GPUBuffer, size: number, usage: GPUBufferUsageFlags) {\n    buffer.mapAsync(GPUMapMode.WRITE)\n        .then(\n            () => {\n              this.releaseBuffer(buffer, size, usage);\n            },\n            (err) => {\n                // Do nothing;\n            });\n  }\n\n  getNumUsedBuffers(): number {\n    return this.numUsedBuffers;\n  }\n\n  getNumFreeBuffers(): number {\n    return this.numFreeBuffers;\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.usedBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getBufferKey(size: number, usage: GPUBufferUsageFlags) {\n  return `${size}_${usage}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private freeTextures: Map<string, GPUTexture[]> = new Map();\n  private usedTextures: Map<string, GPUTexture[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireTexture(\n      width: number, height: number, format: GPUTextureFormat,\n      usage: GPUTextureUsageFlags) {\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    if (!this.usedTextures.has(key)) {\n      this.usedTextures.set(key, []);\n    }\n\n    this.numBytesUsed += byteSize;\n    this.numUsedTextures++;\n\n    if (this.freeTextures.get(key).length > 0) {\n      this.numFreeTextures--;\n\n      const newTexture = this.freeTextures.get(key).shift();\n      this.usedTextures.get(key).push(newTexture);\n      return newTexture;\n    }\n\n    this.numBytesAllocated += byteSize;\n\n    const newTexture = this.device.createTexture({\n      size: [width, height],\n      format,\n      usage,\n    });\n    this.usedTextures.get(key).push(newTexture);\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: GPUTexture, width: number, height: number,\n      format: GPUTextureFormat, usage: GPUTextureUsageFlags) {\n    if (this.freeTextures.size === 0) {\n      return;\n    }\n\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    this.freeTextures.get(key).push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n\n    const textureList = this.usedTextures.get(key);\n    const textureIndex = textureList.indexOf(texture);\n    if (textureIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    textureList.splice(textureIndex, 1);\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    this.numBytesUsed -= byteSize;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    this.freeTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.usedTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.freeTextures = new Map();\n    this.usedTextures = new Map();\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getTextureKey(\n    width: number, height: number, format: GPUTextureFormat,\n    usage: GPUTextureUsageFlags) {\n  return `${width}_${height}_${format}_${usage}`;\n}\n\nfunction getBytesPerElement(format: GPUTextureFormat) {\n  if (format === 'rgba8unorm') {\n    return 16;\n  } else {\n    throw new Error(`${format} is not supported!`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Generates GLSL that computes strides.\nexport function symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  if (Math.max(...indicesArr) > 3) {\n    throw new Error('Cannot symbolically compute strides for rank > 4 tensor.');\n  }\n\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, Rank, ShapeMap, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {symbolicallyComputeStrides} from './shader_util';\n\nexport interface WebGPUProgram {\n  // Whether to use atomic built-in functions.\n  atomic?: boolean;\n  // dispatch specifies geometry of thread groups - derived from dispatchLayout.\n  dispatch: [number, number, number];\n  // dispatchLayout enumerates how tensor dimensions are distributed among\n  // dispatch x,y,z dimensions.\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  isFromPixels?: boolean;\n  isVec4?: boolean;\n  outputShape: number[];\n  // The unique key to distinguish different shader source code.\n  shaderKey: string;\n  // Whether to use output size for bounds checking.\n  size?: boolean;\n  uniforms?: string;\n  variableNames: string[];\n  // Describe each variable's type and must have one-one mapping with\n  // variableNames. If not set, all variables type will be either f32 or\n  // vec4<f32> based on isVec4 member.\n  variableTypes?: string[];\n  // workGroupSize.x * workGroupSize.y * workGroupSize.z = the number of threads\n  // in a thread group. Individual dimensions determines thread layout within\n  // the group.\n  workGroupSize: [number, number, number];\n  // Size of register cache in one dimension (assumes square cache).\n  // Each thread writes to workPerThread * workPerThread locations in the output\n  // buffer.\n  workPerThread?: number;\n  getUserCode: () => string;\n}\n\nexport const compileProgram =\n    (device: GPUDevice, program: WebGPUProgram, inputsData: InputInfo[],\n     output: TensorInfo): GPUComputePipeline => {\n      const outputData = {dtype: output.dtype, shape: output.shape};\n      const source = makeShader(inputsData, outputData, program);\n      const module = device.createShaderModule(\n          {code: source, label: program.constructor.name});\n      const pipeline = device.createComputePipeline({\n        compute: {module, entryPoint: '_start'},\n        label: program.constructor.name,\n        layout: 'auto'\n      });\n\n      return pipeline;\n    };\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'i32';\n  } else if (rank === 2) {\n    return `vec2<i32>`;\n  } else if (rank === 3) {\n    return `vec3<i32>`;\n  } else if (rank === 4) {\n    return `vec4<i32>`;\n  } else if (rank === 5) {\n    return `vec5`;\n  } else if (rank === 6) {\n    return `vec6`;\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getCoordsXYZ(index: number): string {\n  if (index === 0) {\n    return 'x';\n  } else if (index === 1) {\n    return 'y';\n  } else if (index === 2) {\n    return 'z';\n  } else if (index === 3) {\n    return 'w';\n  } else if (index === 4) {\n    return 'u';\n  } else if (index === 5) {\n    return 'v';\n  } else {\n    throw Error(`Index ${index} is not yet supported`);\n  }\n}\n\nexport function getMainHeaderString(): string;\nexport function getMainHeaderString(index: string): string;\nexport function getMainHeaderString(...params: string[]): string {\n  let snippet: string;\n  switch (params.length) {\n    case 0:\n      snippet = `\n        ${getWorkGroupSizeString()}\n        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                  @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n          localId = LocalId;\n          globalId = GlobalId;\n          numWorkgroups = NumWorkgroups;\n          main();\n        }\n\n        fn main()\n      `;\n      break;\n    case 1:\n      snippet = `\n        ${getWorkGroupSizeString()}\n        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                  @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n          localId = LocalId;\n          globalId = GlobalId;\n          numWorkgroups = NumWorkgroups;\n          main(getGlobalIndex());\n        }\n\n        fn main(${params[0]} : i32)\n      `;\n      break;\n    default:\n      throw Error('Unreachable');\n  }\n  return snippet;\n}\n\nexport function getWorkGroupSizeString(): string {\n  return `\n  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\n`;\n}\n\nfunction makeShader(\n    inputInfo: InputInfo[], outputData: {dtype: DataType, shape: number[]},\n    program: WebGPUProgram): string {\n  const prefixSnippets: string[] = [];\n  prefixSnippets.push(`\n      const workGroupSizeX = ${program.workGroupSize[0]}u;\n      const workGroupSizeY = ${program.workGroupSize[1]}u;\n      const workGroupSizeZ = ${program.workGroupSize[2]}u;\n\n      var<private> localId: vec3<u32>;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${\n      isFlatDispatch(program) ?\n          `  return i32(globalId.x);` :\n          `  let localInvocationIndex = localId.z * workGroupSizeX * workGroupSizeY +\n                   localId.y * workGroupSizeX + localId.x;\n               let workGroupID = (globalId - localId)/vec3<u32>(\n                   workGroupSizeX, workGroupSizeY, workGroupSizeZ);\n\n               return i32((workGroupID.z * numWorkgroups.x * numWorkgroups.y +\n                   workGroupID.y * numWorkgroups.x + workGroupID.x) *\n                   (workGroupSizeX * workGroupSizeY * workGroupSizeZ) +\n                   localInvocationIndex);\n        `}\n      }\n    `);\n\n  if (program.isFromPixels) {\n    prefixSnippets.push(`\n        struct Uniform {\n          size            : i32,\n          numChannels     : i32,\n          outShapeStrides : vec2<i32>,\n        };\n\n        @group(0) @binding(0) var<storage, read_write> result: array<${\n        mapToWgslTypes(outputData.dtype, program.isVec4)}>;\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);\n    return [\n      commonSnippet,\n      prefixSnippets.join('\\n'),\n      getCoordsFromIndexSnippet(outputData.shape),\n      program.getUserCode(),\n    ].join('\\n');\n  }\n\n  let uniformDeclaration = 'struct Uniforms { NAN : f32, ';\n  program.variableNames.forEach((x, i) => {\n    const perDataType = getCoordsDataType(inputInfo[i].shape.length);\n    uniformDeclaration +=\n        `${x.charAt(0).toLowerCase() + x.slice(1)}Shape : ${perDataType}, `;\n  });\n  const outputDataType = getCoordsDataType(outputData.shape.length);\n  uniformDeclaration += `outShape : ${outputDataType}, `;\n  const stridesLength = outputData.shape.length - 1;\n  const stridesDataType = getCoordsDataType(stridesLength);\n  uniformDeclaration += `\n         outShapeStrides: ${stridesDataType}, `;\n\n  if (program.size) {\n    uniformDeclaration += 'size : i32, ';\n  }\n\n  if (program.uniforms) {\n    uniformDeclaration += program.uniforms;\n  }\n  uniformDeclaration += '};';\n  uniformDeclaration = insertAlignment(uniformDeclaration);\n\n  prefixSnippets.push(uniformDeclaration);\n\n  // Output buffer.\n  if (program.atomic) {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    `);\n  } else {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${\n        mapToWgslTypes(outputData.dtype, program.isVec4)}>;\n    `);\n  }\n  program.variableNames.forEach((x, i) => {\n    prefixSnippets.push(`\n      @group(0) @binding(${1 + i}) var<storage, read> ${x}: array<${\n        program.variableTypes ?\n            program.variableTypes[i] :\n            mapToWgslTypes(inputInfo[i].dtype, program.isVec4)}>;\n        `);\n  });\n\n  if (uniformDeclaration !== '') {\n    prefixSnippets.push(`\n      @group(0) @binding(${\n        1 + program.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);\n  }\n\n  const coordsSnippet =\n      getOutputCoordsSnippet(outputData.shape, program.dispatchLayout);\n\n  const sources = [\n    commonSnippet, prefixSnippets.join('\\n'),\n    getCoordsFromIndexSnippet(outputData.shape), coordsSnippet,\n    getOutputIndexFromCoordsSnippet(outputData.shape.length)\n  ];\n  if (!program.atomic) {\n    sources.push(\n        setOutputSnippet(outputData.shape, outputData.dtype, program.isVec4));\n  }\n\n  const inputSnippet =\n      inputInfo\n          .map(\n              (x, i) => getInputSnippet(\n                  x, outputData.shape,\n                  program.variableTypes ?\n                      (program.variableTypes[i] === 'vec4<f32>') :\n                      program.isVec4,\n                  program.dispatchLayout.x.length === outputData.shape.length))\n          .join('\\n');\n  sources.push(inputSnippet);\n\n  sources.push(program.getUserCode());\n  const source = sources.join('\\n');\n  return source;\n}\n\nexport function makeShaderKey<R extends Rank>(\n    program: WebGPUProgram, shapes: Array<ShapeMap[R]>, inputsData: InputInfo[],\n    output: TensorInfo): string {\n  let key = program.shaderKey;\n  if (program.isFromPixels) {\n    return key;\n  }\n\n  const types = inputsData.map(d => d.dtype).concat(output.dtype);\n  const broadcastDims =\n      inputsData.map(d => backend_util.getBroadcastDims(d.shape, output.shape));\n  const inputShapesEqualsOutShape =\n      inputsData.map(d => util.arraysEqual(d.shape, output.shape)).join('_');\n  const broadcastDimsKey = broadcastDims.map(d => d.join('_')).join(';');\n\n  const flatDispatchString = isFlatDispatch(program) ? 'flatDispatch' : '';\n\n  key += '_' + (program.workGroupSize ? program.workGroupSize.join(',') : '') +\n      shapes.map(shape => shape.length).join(',') + types.join(',') +\n      program.variableNames.join(',') + broadcastDimsKey +\n      inputShapesEqualsOutShape + flatDispatchString;\n\n  return key;\n}\n\nconst commonSnippet = `\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  fn idiv(a: i32, b: i32, sign: f32) -> i32 {\n    var res: i32 = a / b;\n    let modulo: i32 = a % b;\n    if (sign < 0. && modulo != 0) {\n      res = res - 1;\n    }\n    return res;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    return vec4<bool>(isnan(val[0]), isnan(val[1]), isnan(val[2]), isnan(val[3]));\n  }\n`;\n\ntype InputInfo = {\n  dtype: DataType; shape: number[]; name: string;\n};\nexport type WGSLDataType = 'f32'|'i32'|'vec4<f32>'|'vec4<i32>'|'vec4<bool>';\n\n/**\n * Derives logical coordinates from a flat index. Performs integer division\n * with each stride and decrements the index until the index equals the final\n * dimension coordinate.\n */\nfunction getCoordsFromIndexSnippet(shape: number[]): string {\n  const rank = shape.length;\n\n  if (rank <= 1) {\n    return `fn getCoordsFromIndex(index : i32) -> i32 { return index; }`;\n  }\n\n  const strides = util.computeStrides(shape);\n  const dtype = getCoordsDataType(rank);\n\n  const coords: string[] = [];\n  for (let i = 0; i < rank; i++) {\n    coords.push(`d${i}`);\n  }\n\n  if (strides.length === 1) {\n    return `    fn getCoordsFromIndex(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;\n      return vec2<i32>(d0, d1);\n    }`;\n  }\n  let snippet;\n  snippet = 'var index2 = index;' +\n      strides\n          .map((_, i) => {\n            const line1 =\n                `let ${coords[i]} = index2 / uniforms.outShapeStrides.${\n                    getCoordsXYZ(i)}`;\n            const line2 = i === strides.length - 1 ?\n                `let ${coords[i + 1]} = index2 - ${\n                    coords[i]} * uniforms.outShapeStrides.${getCoordsXYZ(i)}` :\n                `index2 = index2 - ${coords[i]} * uniforms.outShapeStrides.${\n                    getCoordsXYZ(i)}`;\n            return `${line1}; ${line2};`;\n          })\n          .join('');\n\n  return `\n    fn getCoordsFromIndex(index : i32) -> ${dtype} {\n      ${snippet}\n      return ${dtype}(${coords.join(',')});\n    }\n  `;\n}\n\nfunction getInputAtCoordsSnippet(\n    inputInfo: InputInfo, isVec4: boolean): string {\n  const texName = inputInfo.name;\n  const rank = inputInfo.shape.length;\n  const type = getCoordsDataType(rank);\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, rank);\n  const inputs = dims.map(d => `${d} : i32`).join(', ');\n\n  if (rank < 1) {\n    if (isVec4) {\n      return `\n        fn ${funcName}() -> vec4<f32> {\n          return vec4<f32>(${texName}[0]);\n        }\n      `;\n    }\n\n    return `\n      fn ${funcName}() ->f32 {\n        return f32(${texName}[0]);\n      }\n    `;\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  let rankStr = `${rank}D`;\n  if (rank === 0) {\n    rankStr = '1D';\n  }\n\n  if (isVec4) {\n    return `\n      fn ${funcName}(${inputs}) -> vec4<f32> {\n        return vec4<f32>(${texName}[getIndexFromCoords${rankStr}(${type}(${\n        dims.join(',')}),\n          ${shapeStr}) / 4]);\n      }\n      `;\n  }\n\n  return `\n    fn ${funcName}(${inputs}) -> f32 {\n      return f32(${texName}[getIndexFromCoords${rankStr}(${type}(${\n      dims.join(',')}),\n        ${shapeStr})]);\n    }\n   `;\n}\n\nfunction getInputByOutputSnippet(\n    inputInfo: InputInfo, outShape: number[], isVec4: boolean,\n    isFlatDispatchLayout: boolean): string {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const funcName = 'get' + texFuncSnippet + 'ByOutput';\n\n  const inRank = inputInfo.shape.length;\n  const outRank = outShape.length;\n  const type = getCoordsDataType(outRank);\n\n  // If the inShape equals the outShape and the dispatch layout is flat, we can\n  // directly use |gl_GlobalInvocationID.x| as the index and don't need coords\n  // conversion between these two shapes.\n  if (util.arraysEqual(inputInfo.shape, outShape) && isFlatDispatchLayout) {\n    if (isVec4) {\n      return `\n      fn ${funcName}Index(globalIndex : i32) -> vec4<f32> {\n        return vec4<f32>(${texName}[globalIndex]);\n      }\n\n      fn ${funcName}Coords(coords : ${type}) -> vec4<f32> {\n        return vec4<f32>(${texName}[${\n          outRank > 1 ? 'getOutputIndexFromCoords(coords)' : 'coords'} / 4]);\n      }\n      `;\n    } else {\n      return `\n    fn ${funcName}Index(globalIndex : i32) -> f32 {\n      return f32(${texName}[globalIndex]);\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> f32 {\n      return f32(${texName}[${\n          outRank > 1 ? 'getOutputIndexFromCoords(coords)' : 'coords'}]);\n    }\n    `;\n    }\n  }\n\n  const broadcastDims =\n      backend_util.getBroadcastDims(inputInfo.shape, outShape);\n  const rankDiff = outRank - inRank;\n\n  let coordsSnippet = '';\n\n  if (inRank === 0) {\n    if (isVec4) {\n      return `\n    fn ${funcName}Index(globalIndex : i32) -> vec4<f32> {\n      return get${texFuncSnippet}();\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> vec4<f32> {\n      return get${texFuncSnippet}();\n    }\n  `;\n    }\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> f32{\n      return get${texFuncSnippet}();\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> f32{\n      return get${texFuncSnippet}();\n    }\n  `;\n  } else {\n    if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet =\n          broadcastDims.map(d => `coords.${getCoordsXYZ(d + rankDiff)} = 0;`)\n              .join('\\n');\n    }\n  }\n\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    if (outRank > 1) {\n      const coordsType = getCoordsDataType(inRank);\n      const coordsValues =\n          inputInfo.shape.map((s, i) => `coords.${getCoordsXYZ(i + rankDiff)}`)\n              .join(', ');\n      unpackedCoordsSnippet = `${coordsType}(${coordsValues})`;\n    } else {\n      unpackedCoordsSnippet = 'coords';\n    }\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  const rankStr = `${inRank}D`;\n  if (isVec4) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> vec4<f32> {\n      var coords = getCoordsFromIndex(globalIndex);\n      ${coordsSnippet}\n      return ${texName}[getIndexFromCoords${rankStr}(${\n        unpackedCoordsSnippet}, ${shapeStr}) / 4];\n    }\n\n    fn ${funcName}Coords(coordsIn : ${type}) -> vec4<f32> {\n      var coords = coordsIn;\n      ${coordsSnippet}\n      return ${texName}[getIndexFromCoords${rankStr}(${\n        unpackedCoordsSnippet}, ${shapeStr}) / 4];\n    }\n  `;\n  }\n\n  return `\n  fn ${funcName}Index(globalIndex : i32) -> f32 {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${coordsSnippet}\n    return f32(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})]);\n  }\n\n  fn ${funcName}Coords(coordsIn : ${type}) -> f32 {\n    var coords = coordsIn;\n    ${coordsSnippet}\n    return f32(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})]);\n  }\n`;\n}\n\nfunction getInputSnippet(\n    inputInfo: InputInfo, outShape: number[], isVec4: boolean,\n    isFlatDispatchLayout: boolean): string {\n  let res = getInputAtCoordsSnippet(inputInfo, isVec4);\n\n  const inShape = inputInfo.shape;\n  if (inShape.length <= outShape.length) {\n    res += getInputByOutputSnippet(\n        inputInfo, outShape, isVec4, isFlatDispatchLayout);\n  }\n\n  return res;\n}\n\n/**\n * Generates getOutputCoords() function that computes output coordinates from\n * dispatch geometry to reduce arithmetic.\n */\nfunction getOutputCoordsSnippet(\n    outShape: number[],\n    dispatchLayout: {x: number[], y?: number[], z?: number[]}): string {\n  const {x, y = [], z = []} = dispatchLayout;\n\n  const outRank = outShape.length;\n  const rank = x.length + y.length + z.length;\n  // getOutputCoords is only meaningful when the output rank is same with\n  // dispatch layout rank.\n  if (rank !== outRank) {\n    return '';\n  }\n\n  if (x.length === outRank) {\n    const dtype = getCoordsDataType(outRank);\n    const snippet = `fn getOutputCoords() -> ${dtype}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;\n    return snippet;\n  }\n\n  let gatherDimensionsStr = '';\n  const dims = [x, y, z];\n\n  for (let i = 0; i < dims.length; i++) {\n    const arr = dims[i];\n\n    if (arr.length === 0) {\n      continue;\n    }\n\n    if (arr.length === 1) {\n      gatherDimensionsStr += `let d${arr[0]} = i32(globalId[${i}]);`;\n    } else {\n      const strides = symbolicallyComputeStrides(arr, 'uniforms.outShape');\n      gatherDimensionsStr += `var index${i} = i32(globalId[${i}]);`;\n      for (let j = 0; j < strides.length; j++) {\n        gatherDimensionsStr += `let d${arr[j]} = index${i} / ${strides[j]};`;\n\n        if (j === strides.length - 1) {\n          gatherDimensionsStr += `let d${arr[j + 1]} = ` +\n              `index${i} - d${arr[j]} * ${strides[j]};`;\n        } else {\n          gatherDimensionsStr +=\n              `index${i} = index${i} - d${arr[j]} * ${strides[j]};`;\n        }\n      }\n    }\n  }\n\n  const dimensions = [];\n  for (let i = 0; i < rank; i++) {\n    dimensions.push(`d${i}`);\n  }\n\n  const dtype = getCoordsDataType(rank);\n  let snippet = `fn getOutputCoords() -> ${dtype} {\n  ${gatherDimensionsStr}\n`;\n  if (dimensions.length === 0) {\n    snippet += `return ${dtype}(0); }`;\n  } else {\n    snippet += `return ${dtype}(${dimensions.join(',')}); }`;\n  }\n\n  return snippet;\n}\n\nfunction getOutputIndexFromCoordsSnippet(outRank: number) {\n  let snippet = '';\n  switch (outRank) {\n    case 0:\n    case 1:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        `;\n      break;\n    case 2:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        `;\n      break;\n    case 3:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        `;\n      break;\n    case 4:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        `;\n      break;\n    case 5:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        `;\n      break;\n    case 6:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        `;\n      break;\n    default:\n      util.assert(false, () => `Unsupported ${outRank}D shape`);\n      break;\n  }\n  return snippet;\n}\n\nfunction isFlatDispatch(program: WebGPUProgram): boolean {\n  return program.dispatch[1] === 1 && program.dispatch[2] === 1;\n}\n\nexport function mapToWgslTypes(type: DataType, isVec4: boolean): WGSLDataType|\n    DataType {\n  if (type === 'float32') {\n    return isVec4 ? 'vec4<f32>' : 'f32';\n  } else if (type === 'int32') {\n    return isVec4 ? 'vec4<i32>' : 'i32';\n  } else if (type === 'bool') {\n    // Type 'bool' cannot be used in storage class,\n    // https://www.w3.org/TR/WGSL/#host-shareable-types.\n    return isVec4 ? 'vec4<i32>' : 'i32';\n  }\n\n  return type;\n}\n\nfunction setOutputSnippet(\n    outShape: number[], outBufferType: DataType, isVec4: boolean): string {\n  const outRank = outShape.length;\n  const wgslType = mapToWgslTypes(outBufferType, isVec4);\n  let snippet;\n  if (isVec4) {\n    snippet = `fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {\n      result[flatIndex] = ${wgslType}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {\n      result[flatIndex] = ${wgslType}(value);\n    }`;\n  } else {\n    snippet = `fn setOutputAtIndex(flatIndex : i32, value : f32) {\n      result[flatIndex] = ${wgslType}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {\n      result[flatIndex] = ${wgslType}(value);\n    }`;\n  }\n  if (outRank >= 2) {\n    const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, outRank);\n    const type = getCoordsDataType(outRank);\n\n    if (isVec4) {\n      snippet += `\n      fn setOutputAtCoords(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : vec4<f32>) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndex(flatIndex / 4, value);\n      }\n      fn setOutputAtCoordsI32(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : vec4<i32>) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndexI32(flatIndex / 4, value);\n      }\n    `;\n    } else {\n      snippet += `\n      fn setOutputAtCoords(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : f32) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndex(flatIndex, value);\n      }\n      fn setOutputAtCoordsI32(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : i32) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndexI32(flatIndex, value);\n      }\n    `;\n    }\n  }\n\n  return snippet;\n}\n\nfunction insertAlignment(uniformShader: string) {\n  // insert alignment when current pattern is vec5 or vec6\n  const curInsertRe = /(\\w+)\\s*:\\s*vec(5|6)/g;\n  uniformShader = uniformShader.replace(curInsertRe, (match) => {\n    return '@align(16) ' + match;\n  });\n\n  // insert alignment when previous pattern is vec5 or vec6\n  const preInsertRe = /vec(5|6)\\s*,\\s*(\\w+)/g;\n  uniformShader = uniformShader.replace(preInsertRe, (_, p1, p2) => {\n    return `vec${p1}, @align(16) ${p2}`;\n  });\n  return uniformShader;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType} from '@tensorflow/tfjs-core';\n\nconst arrayProduct = (arr: number[]) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nexport function tilesFitEvenlyIntoShape(\n    tileSize: number[], shape: number[]): boolean {\n  if (tileSize.length !== shape.length) {\n    throw new Error(\n        `Cannot compute whether rank ${tileSize.length}` +\n        ` tiles fit evenly into rank ${shape.length} shape` +\n        ` - ranks must match.`);\n  }\n  return shape.every(\n      (dim: number, dimIdx: number) => dim % tileSize[dimIdx] === 0);\n}\n\n// Computes dispatch geometry based on layout of output dimensions and\n// workGroupSize.\nexport function computeDispatch(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    workGroupSize: [number, number, number] = [1, 1, 1],\n    elementsPerThread: [number, number, number] =\n        [1, 1, 1]): [number, number, number] {\n  const [dispatchX, dispatchY, dispatchZ] = [\n    Math.ceil(\n        arrayProduct(layout.x.map(d => outputShape[d])) /\n        (workGroupSize[0] * elementsPerThread[0])),\n    layout.y ? Math.ceil(\n                   arrayProduct(layout.y.map(d => outputShape[d])) /\n                   (workGroupSize[1] * elementsPerThread[1])) :\n               1,\n    layout.z ? Math.ceil(\n                   arrayProduct(layout.z.map(d => outputShape[d])) /\n                   (workGroupSize[2] * elementsPerThread[2])) :\n               1\n  ];\n  return [dispatchX, dispatchY, dispatchZ];\n}\n\nexport type WorkGroupInfo = {\n  workGroupSize: [number, number, number],\n  elementsPerThread: [number, number, number],\n};\n\nexport function computeWorkGroupInfoForMatMul(\n    dimAOuter: number, dimInner: number, dimBOuter: number,\n    transposeA = false): WorkGroupInfo {\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the input shapes to improve the EU occupancy.\n  // TODO: WebGPU limits the maximum allowed shared memory size as 16K. To make\n  // sure it doesn't exceed this limitations. Temporarily reduce the work group\n  // size to [8, 8, 1] and the work per thread size is [4, 4, 1]. But we should\n  // revisit it and find the balance between work group size and work per thread\n  // size.\n  const workGroupSize: [number, number, number] = [8, 8, 1];\n  const elementsPerThread: [number, number, number] = [4, 4, 1];\n\n  if (!transposeA) {\n    if (dimAOuter <= 8) {\n      elementsPerThread[1] = 1;\n    }\n\n    if (dimInner <= 16 && dimBOuter <= 16) {\n      workGroupSize[0] = 4;\n    }\n  }\n\n  return {workGroupSize, elementsPerThread};\n}\n\nexport function computeWorkGroupSizeForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [8, 8, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the output shape. For example, when one dimension is smaller\n  // than 4, it will be wasteful if we assign a larger size for this dimension,\n  // which results lots of threads doing useless work and reduces parallelism\n  // of hardware threads. But it is always a balance between work group size\n  // and shared memory. If one dimension is too small, such as 1, shared memory\n  // will won't be fully utilized.\n  if (dim0 <= 4) {\n    return [4, 16, 1];\n  }\n  if (dim1 <= 4) {\n    return [16, 4, 1];\n  }\n\n  return [16, 16, 1];\n}\n\nexport function computeWorkPerThreadForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [4, 4, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // The following conditions correspond to the values set in\n  // computeWorkGroupSizeForConv2d.\n  if (dim0 <= 4) {\n    return [1, 2, 1];\n  }\n  if (dim1 <= 4) {\n    return [2, 1, 1];\n  }\n\n  return [2, 2, 1];\n}\n\nexport function flatDispatchLayout(shape: number[]) {\n  return {x: shape.map((d, i) => i)};\n}\n\nexport function GPUBytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32' || dtype === 'bool' ||\n      dtype === 'string') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function ArrayBufferToTypedArray(data: ArrayBuffer, dtype: DataType) {\n  if (dtype === 'float32') {\n    return new Float32Array(data);\n  } else if (dtype === 'int32') {\n    return new Int32Array(data);\n  } else if (dtype === 'bool' || dtype === 'string') {\n    return Uint8Array.from(new Int32Array(data));\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function isWebGPUSupported(): boolean {\n  return ((typeof window !== 'undefined') ||\n          //@ts-ignore\n          (typeof WorkerGlobalScope !== 'undefined')) &&\n      !!navigator.gpu;\n}\n\nexport enum MatMulProgramType {\n  MatMulReduceProgram,\n  MatMulSplitKProgram,\n  MatMulSmallOutputSizeProgram,\n  MatMulPackedProgram,\n  MatMulMax\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {backend_util, buffer, DataStorage, DataType, engine, env, GPUData, KernelBackend, Rank, RecursiveArray, ShapeMap, TensorBuffer, TensorInfo, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {AdapterInfo, GPUAdapterInfo} from './adapter_info';\nimport {BufferManager} from './buffer_manager';\nimport {TextureManager} from './texture_manager';\nimport * as webgpu_program from './webgpu_program';\nimport * as webgpu_util from './webgpu_util';\n\nexport interface WebGPUMemoryInfo extends backend_util.MemoryInfo {\n  numBytesInGPU: number;\n  numBytesAllocatedInGPU: number;\n  unreliable: boolean;\n}\n\nexport type BufferInfo = {\n  size: number,\n  usage: GPUBufferUsageFlags,\n  buffer: GPUBuffer\n};\n\nexport type TextureInfo = {\n  width: number,\n  height: number,\n  format: GPUTextureFormat,\n  usage: GPUTextureUsageFlags,\n  texture: GPUTexture|GPUExternalTexture\n};\n\ntype TensorData = {\n  values: backend_util.BackendValues,\n  dtype: DataType,\n  shape: number[],\n  refCount: number,\n  resourceInfo?: BufferInfo|TextureInfo,\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo}\n};\n\ninterface DataId {}\n\nexport type WebGPUKernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<WebGPUKernelInfo>|WebGPUKernelInfo;\n\nexport interface WebGPUTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\ntype ProgramUniform = Array<{type: string; data: number[]}>;\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Reshape dispatch, not to exceed device limits.\nconst reshapeDispatch =\n    (device: GPUDevice,\n     program: webgpu_program.WebGPUProgram): [number, number, number] => {\n      const MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE =\n          device.limits.maxComputeWorkgroupsPerDimension;\n      const layout = program['dispatchLayout'];\n      const dispatch = program['dispatch'];\n      if (dispatch.every((d) => d <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE)) {\n        return dispatch;\n      }\n\n      util.assert(\n          dispatch[0] > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE &&\n              layout.y === undefined && layout.z === undefined,\n          () => 'Dispatch size exceeds WebGPU limits in Y or Z dimension.');\n\n      let dispatchAverage = Math.ceil(Math.sqrt(dispatch[0]));\n      if (dispatchAverage > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE) {\n        dispatchAverage = Math.ceil(Math.cbrt(dispatch[0]));\n        util.assert(\n            dispatchAverage <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE,\n            () => 'Total dispatch size exceeds WebGPU maximum.');\n        return [dispatchAverage, dispatchAverage, dispatchAverage];\n      } else {\n        return [dispatchAverage, dispatchAverage, 1];\n      }\n    };\n\nexport class WebGPUBackend extends KernelBackend {\n  bufferManager: BufferManager;\n  adapterInfo: AdapterInfo;\n  device: GPUDevice;\n  queue: GPUQueue;\n  tensorMap: DataStorage<TensorData>;\n  textureManager: TextureManager;\n\n  private activeTimers: TimerNode[];\n  private currentCommandEncoder: GPUCommandEncoder;\n  private currentComputePass: GPUComputePassEncoder;\n  private commandQueueOwnedIds = new WeakSet<DataId>();\n  private dispatchNumberInEncoder = 0;\n  private disposed = false;\n  private downloadWaitMs = 0;\n  private dummyCanvas: HTMLCanvasElement;\n  private dummyContext: GPUCanvasContext;\n  private tensorDataPendingDisposal: DataId[] = [];\n  private static nextDataId = 0;\n  private pipelineCache: {[key: string]: GPUComputePipeline};\n  private programTimersStack: TimerNode[];\n  private querySet: GPUQuerySet;\n  private stagingPendingDisposal: BufferInfo[] = [];\n  private supportTimeQuery: boolean;\n  private uniformPendingDisposal: BufferInfo[] = [];\n  private uploadWaitMs = 0;\n\n  private nextDataId(): number {\n    return WebGPUBackend.nextDataId++;\n  }\n\n  constructor(device: GPUDevice, adapterInfo?: GPUAdapterInfo) {\n    super();\n    if (!webgpu_util.isWebGPUSupported()) {\n      throw new Error('WebGPU is not supported on this device');\n    }\n    this.pipelineCache = {};\n    this.device = device;\n    this.queue = device.queue;\n    this.currentCommandEncoder = null;\n    this.currentComputePass = null;\n    this.supportTimeQuery = device.features.has('timestamp-query');\n    this.adapterInfo = new AdapterInfo(adapterInfo);\n\n    this.bufferManager = new BufferManager(this.device);\n    this.textureManager = new TextureManager(this.device);\n    this.tensorMap = new DataStorage(this, engine());\n    if (this.supportTimeQuery) {\n      this.querySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n\n    // Profiling tools like PIX needs this dummy canvas to\n    // trigger capturing a frame.\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      this.dummyCanvas = document.createElement('canvas');\n      this.dummyCanvas.width = 1;\n      this.dummyCanvas.height = 1;\n\n      this.dummyContext = this.dummyCanvas.getContext('webgpu');\n      this.dummyContext.configure({\n        device,\n        format: 'bgra8unorm',\n      });\n\n      document.body.appendChild(this.dummyCanvas);\n    }\n  }\n\n  floatPrecision(): 32 {\n    return 32;\n  }\n\n  defaultGpuBufferUsage(): number {\n    return GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC |\n        GPUBufferUsage.COPY_DST;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.tensorDataPendingDisposal.indexOf(dataId) >= 0) {\n      return false;\n    }\n    if (!this.tensorMap.has(dataId)) {\n      return true;\n    }\n\n    const tensorData = this.tensorMap.get(dataId);\n    this.decRef(dataId);\n    if (!force && tensorData.refCount > 0) {\n      return false;\n    }\n\n    // complex is never in commandQueueOwnedIds\n    if (this.commandQueueOwnedIds.has(dataId)) {\n      this.tensorDataPendingDisposal.push(dataId);\n      return false;\n    }\n\n    const {complexTensorInfos} = this.tensorMap.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.releaseResource(dataId);\n    this.tensorMap.delete(dataId);\n\n    return true;\n  }\n\n  memory(): WebGPUMemoryInfo {\n    return {\n      numBytesInGPU: this.bufferManager.numBytesUsed,\n      numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated,\n      unreliable: false\n    } as WebGPUMemoryInfo;\n  }\n\n  releaseResource(dataId: DataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    if (!tensorData || !tensorData.resourceInfo) {\n      return;\n    }\n    if ('texture' in tensorData.resourceInfo) {\n      const textureInfo = tensorData.resourceInfo;\n      if (textureInfo.texture instanceof GPUTexture) {\n        this.textureManager.releaseTexture(\n            textureInfo.texture, textureInfo.width, textureInfo.height,\n            textureInfo.format, textureInfo.usage);\n      }\n      textureInfo.texture = null;\n    } else {\n      const bufferInfo = tensorData.resourceInfo;\n      this.bufferManager.releaseBuffer(\n          bufferInfo.buffer, bufferInfo.size, bufferInfo.usage);\n      bufferInfo.buffer = null;\n    }\n    tensorData.resourceInfo = null;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount: 1});\n    return dataId;\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount});\n  }\n\n  submitQueue() {\n    this.ensureComputePassEnded();\n    this.queue.submit([this.currentCommandEncoder.finish()]);\n    this.currentCommandEncoder = null;\n    this.dispatchNumberInEncoder = 0;\n\n    this.commandQueueOwnedIds = new WeakSet<DataId>();\n\n    this.tensorDataPendingDisposal.forEach(d => {\n      this.releaseResource(d);\n      this.tensorMap.delete(d);\n    });\n    this.uniformPendingDisposal.forEach(\n        d => this.bufferManager.releaseBuffer(d.buffer, d.size, d.usage));\n    this.stagingPendingDisposal.forEach(\n        d => this.bufferManager.releaseUploadBuffer(d.buffer, d.size, d.usage));\n\n    this.tensorDataPendingDisposal = [];\n    this.uniformPendingDisposal = [];\n    this.stagingPendingDisposal = [];\n  }\n\n  ensureCommandEncoderReady() {\n    if (!this.currentCommandEncoder) {\n      this.currentCommandEncoder = this.device.createCommandEncoder();\n    }\n  }\n\n  ensureComputePassEnded() {\n    if (this.currentComputePass) {\n      this.currentComputePass.end();\n      this.currentComputePass = null;\n    }\n  }\n\n  getComputePass() {\n    if (!this.currentComputePass) {\n      this.currentComputePass = this.currentCommandEncoder.beginComputePass();\n    }\n    return this.currentComputePass;\n  }\n\n  public async getBufferData(buffer: GPUBuffer, size: number):\n      Promise<backend_util.BackendValues> {\n    const staging = this.bufferManager.acquireBuffer(\n        size, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);\n    this.ensureCommandEncoderReady();\n    this.ensureComputePassEnded();\n    this.currentCommandEncoder.copyBufferToBuffer(buffer, 0, staging, 0, size);\n    this.submitQueue();\n\n    await staging.mapAsync(GPUMapMode.READ);\n    const values = staging.getMappedRange().slice(0);\n\n    staging.unmap();\n    if (staging != null) {\n      this.bufferManager.releaseBuffer(\n          staging, size, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);\n    }\n\n    // Need to get texture from swapChain to enable profiling tool\n    // to capture a frame\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      util.assert(\n          this.dummyContext !== undefined,\n          () => `Fail to get context for profiling tool`);\n      this.dummyContext.getCurrentTexture();\n    }\n\n    return values as backend_util.BackendValues;\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, data: backend_util.TypedArray):\n      backend_util.TypedArray {\n    const tensorData = this.tensorMap.get(dataId);\n    this.releaseResource(dataId);\n    tensorData.values = data;\n    return tensorData.values;\n  }\n\n  // TODO: Remove once this is fixed:\n  // https://github.com/tensorflow/tfjs/issues/1595\n  readSync(dataId: object): backend_util.BackendValues {\n    const tensorData = this.tensorMap.get(dataId);\n    const {values} = tensorData;\n\n    if (values == null) {\n      throw new Error(\n          'WebGPU readSync is only available for CPU-resident tensors.');\n    }\n\n    return values;\n  }\n\n  async read(dataId: object): Promise<backend_util.BackendValues> {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(`Tensor ${dataId} was not registered!`);\n    }\n    const tensorData = this.tensorMap.get(dataId);\n\n    const {values} = tensorData;\n\n    if (values != null) {\n      // TODO(xing.xu@intel.com): Merge backend_util.BackendValues and\n      // backend_util.TypedArray.\n      return this.convertAndCacheOnCPU(\n                 dataId, values as backend_util.TypedArray) as\n          backend_util.BackendValues;\n    }\n\n    // Download the values from the GPU.\n    let vals: backend_util.BackendValues;\n    if (tensorData.dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(tensorData.complexTensorInfos.real.dataId),\n        this.read(tensorData.complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else {\n      const bufferInfo = tensorData.resourceInfo as BufferInfo;\n      const data = await this.getBufferData(bufferInfo.buffer, bufferInfo.size);\n      vals = webgpu_util.ArrayBufferToTypedArray(\n          data as ArrayBuffer, tensorData.dtype);\n    }\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n\n  /**\n   * Read tensor to a new GPUBuffer.\n   * @param dataId The source tensor.\n   */\n  readToGPU(dataId: DataId): GPUData {\n    const srcTensorData = this.tensorMap.get(dataId);\n    const {values, dtype, shape, resourceInfo} = srcTensorData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading buffer for complex64 dtype.');\n    }\n\n    if (resourceInfo == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    const size = (resourceInfo as BufferInfo).size;\n    const buffer = this.bufferManager.acquireBuffer(size, resourceInfo.usage);\n    this.ensureCommandEncoderReady();\n    this.ensureComputePassEnded();\n    this.currentCommandEncoder.copyBufferToBuffer(\n        (resourceInfo as BufferInfo).buffer, 0, buffer, 0, size);\n    this.submitQueue();\n\n    const tensorInfo = this.makeTensorInfo(shape, dtype);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tensorInfo);\n\n    const tensorData = this.tensorMap.get(tensorInfo.dataId);\n    tensorData\n        .resourceInfo = {size, usage: this.defaultGpuBufferUsage(), buffer};\n\n    return {tensorRef, buffer, bufSize: size};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  async time(f: () => void): Promise<WebGPUTimingInfo> {\n    if (!this.supportTimeQuery) {\n      console.warn(\n          `This device doesn't support timestamp-query extension. ` +\n          `Start Chrome browser with flag ` +\n          `--disable-dawn-features=disallow_unsafe_apis then try again. ` +\n          `Otherwise, zero will be shown for the kernel time when profiling ` +\n          `mode is enabled. Using performance.now is not workable for webgpu ` +\n          `since it doesn't support synchronous data read from GPU.`);\n    }\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res: WebGPUTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null\n    };\n\n    const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n    res['kernelMs'] = util.sum(kernelMs);\n    res['getExtraProfileInfo'] = () =>\n        kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n            .map(d => `${d.name}: ${d.ms}`)\n            .join(', ');\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      values = (values as {} as string[]).map(d => util.encodeString(d));\n    }\n    const dataId =\n        this.write(values as backend_util.BackendValues, shape, dtype);\n    return {dataId, shape, dtype};\n  }\n\n  private tensorToBinding(tensor?: TensorInfo): GPUBindingResource {\n    if (!tensor) {\n      return null;\n    }\n\n    const tensorData = this.tensorMap.get(tensor.dataId);\n    if ('texture' in tensorData.resourceInfo) {\n      const info = tensorData.resourceInfo;\n      if (info.texture instanceof GPUExternalTexture) {\n        return info.texture;\n      } else {\n        return info.texture.createView();\n      }\n    }\n    const bufferInfo = tensorData.resourceInfo;\n    return {offset: 0, size: bufferInfo.size, buffer: bufferInfo.buffer};\n  }\n\n  async getQueryTime(query: GPUQuerySet): Promise<number> {\n    if (this.supportTimeQuery) {\n      return this.getTimeFromQuerySet(query);\n    } else {\n      return 0;\n    }\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    // Already on the GPU.\n    if (tensorData.resourceInfo) {\n      return;\n    }\n\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) *\n        util.sizeFromShape(tensorData.shape);\n    const buffer =\n        this.bufferManager.acquireBuffer(size, this.defaultGpuBufferUsage());\n\n    tensorData\n        .resourceInfo = {size, usage: this.defaultGpuBufferUsage(), buffer};\n    if (tensorData.values) {\n      const stagingBuffer = this.bufferManager.acquireUploadBuffer(\n          size, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC);\n      const arrayBuffer = stagingBuffer.getMappedRange();\n      if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n        new Int32Array(arrayBuffer).set(tensorData.values as TypedArray);\n      } else {\n        new Float32Array(arrayBuffer).set(tensorData.values as Float32Array);\n      }\n      stagingBuffer.unmap();\n      this.ensureCommandEncoderReady();\n      this.ensureComputePassEnded();\n      this.currentCommandEncoder.copyBufferToBuffer(\n          stagingBuffer, 0, buffer, 0, size);\n\n      const stagingInfo = {\n        size,\n        usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\n        buffer: stagingBuffer\n      };\n      this.stagingPendingDisposal.push(stagingInfo);\n      // TODO: WebGPU doesn't support read data synchronously from GPU to CPU.\n      // So it will report error when switching backend from WebGPU to others.\n      // There are two situations: 1) swithcing the backend after running a\n      // model; 2) swithcing the backend within the model. Temporarilly keep the\n      // values on CPU to solve the first issue.\n      // tensorData.values = null;\n    }\n  }\n\n  private makeUniforms(programUniform: ProgramUniform): GPUBindingResource {\n    let currentOffset = 0;\n    let preLength = 0;\n    const offsets: number[] = [];\n    programUniform.forEach((d) => {\n      if (d.data.length === 0) {\n        d.data = [1];\n      }\n      // https://www.w3.org/TR/WGSL/#alignof\n      let baseAlignment: number;\n      switch (d.data.length) {\n        case 1:\n          baseAlignment = 4;\n          break;\n        case 2:\n          baseAlignment = 8;\n          break;\n        case 3:\n          baseAlignment = 16;\n          break;\n        case 4:\n          baseAlignment = 16;\n          break;\n        case 5:\n          baseAlignment = 16;\n          break;\n        case 6:\n          baseAlignment = 16;\n          break;\n        default:\n          util.assert(false, () => `Unsupported ${d.data.length}D shape`);\n      }\n\n      if (preLength === 5 || preLength === 6) {\n        baseAlignment = 16;\n      }\n      currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n      preLength = d.data.length;\n      offsets.push(currentOffset);\n      currentOffset += d.data.length * 4;\n    });\n\n    const arrayBuffer = new ArrayBuffer(currentOffset);\n    programUniform.forEach((d, i) => {\n      const offset = offsets[i];\n      if (d.type === 'int32') {\n        new Int32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else if (d.type === 'uint32') {\n        new Uint32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else {\n        new Float32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      }\n    });\n\n    const uniformBuffer = this.bufferManager.acquireBuffer(\n        currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n    this.queue.writeBuffer(uniformBuffer, 0, arrayBuffer, 0, currentOffset);\n\n    const uniformInfo = {\n      size: currentOffset,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n      buffer: uniformBuffer\n    };\n    this.uniformPendingDisposal.push(uniformInfo);\n\n    return {offset: 0, size: currentOffset, buffer: uniformBuffer};\n  }\n\n  public runWebGPUProgram(\n      program: webgpu_program.WebGPUProgram, inputs: TensorInfo[],\n      outputDtype: DataType, programDefinedUniform?: ProgramUniform,\n      output?: TensorInfo): TensorInfo {\n    if (!output) {\n      output = this.makeTensorInfo(program.outputShape, outputDtype);\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      this.tensorMap.get(output.dataId).values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n    this.uploadToGPU(output.dataId);\n    program.dispatch = reshapeDispatch(this.device, program);\n\n    // There are five kinds of uniforms: NAN, shapes, shape strides, program\n    // size, program defined uniforms.\n    let programUniform: ProgramUniform = [];\n    let bufferShapes: number[][] = [];\n    if (!program.isFromPixels) {\n      programUniform.push({type: 'float32', data: [NaN]});\n      bufferShapes = inputs.concat(output).map(d => d.shape);\n      const uniformsType = 'int32';\n      bufferShapes.map(d => {\n        programUniform.push({type: uniformsType, data: d});\n      });\n      const strides = util.computeStrides(output.shape);\n      programUniform.push({type: uniformsType, data: strides});\n      if (program.size) {\n        const size = util.sizeFromShape(program.outputShape);\n        programUniform.push(\n            {type: uniformsType, data: [program.isVec4 ? size / 4 : size]});\n      }\n    }\n\n    const inputsData = inputs.map((input: TensorInfo, i: number) => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n      this.uploadToGPU(input.dataId);\n\n      return {\n        // Returning dtype from tensorMap because it reflects dtype\n        // of underlying buffer, rather than abstract dtype.\n        dtype: this.tensorMap.get(input.dataId).dtype,\n        shape: input.shape,\n        name: program.variableNames[i]\n      };\n    });\n\n    const key =\n        webgpu_program.makeShaderKey(program, bufferShapes, inputsData, output);\n\n    let pipeline;\n    if (key in this.pipelineCache) {\n      pipeline = this.pipelineCache[key];\n    } else {\n      pipeline = webgpu_program.compileProgram(\n          this.device, program, inputsData, output);\n      this.pipelineCache[key] = pipeline;\n    }\n\n    if (programDefinedUniform) {\n      programUniform = [...programUniform, ...programDefinedUniform];\n    }\n    const bindings = [\n      this.tensorToBinding(output), ...inputs.map(t => this.tensorToBinding(t)),\n      this.makeUniforms(programUniform)\n    ];\n\n    const bindGroup = this.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: bindings.map((b, i) => ({binding: i, resource: b})),\n    });\n\n    this.ensureCommandEncoderReady();\n    const pass = this.getComputePass();\n    const shouldTimeProgram = this.activeTimers != null;\n    if (shouldTimeProgram) {\n      if (this.supportTimeQuery) {\n        // tslint:disable-next-line:no-any\n        (pass as any).writeTimestamp(this.querySet, 0);\n      }\n    }\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(\n        program.dispatch[0], program.dispatch[1], program.dispatch[2]);\n    if (shouldTimeProgram) {\n      if (this.supportTimeQuery) {\n        // tslint:disable-next-line:no-any\n        (pass as any).writeTimestamp(this.querySet, 1);\n      }\n    }\n    this.dispatchNumberInEncoder++;\n\n    inputs.forEach(input => {\n      this.commandQueueOwnedIds.add(input.dataId);\n    });\n    this.commandQueueOwnedIds.add(output.dataId);\n\n    if (env().get('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE') as\n        number <= this.dispatchNumberInEncoder) {\n      this.submitQueue();\n    }\n\n    if (shouldTimeProgram) {\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(this.querySet)\n      });\n    }\n    return output;\n  }\n\n  async getTimeFromQuerySet(querySet: GPUQuerySet) {\n    const queryBuffer = this.bufferManager.acquireBuffer(\n        16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n    const dst = this.bufferManager.acquireBuffer(\n        16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n    this.ensureCommandEncoderReady();\n    this.ensureComputePassEnded();\n    this.currentCommandEncoder.resolveQuerySet(querySet, 0, 2, queryBuffer, 0);\n    this.currentCommandEncoder.copyBufferToBuffer(queryBuffer, 0, dst, 0, 16);\n    this.submitQueue();\n    await dst.mapAsync(GPUMapMode.READ);\n    const arrayBuf = new BigUint64Array(dst.getMappedRange());\n    const timeElapsedNanos = Number((arrayBuf[1] - arrayBuf[0]));\n    dst.unmap();\n    this.bufferManager.releaseBuffer(\n        dst, 16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n    this.bufferManager.releaseBuffer(\n        queryBuffer, 16,\n        GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n    // Return milliseconds.\n    return timeElapsedNanos / 1000000;\n  }\n\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGPU_CPU_FORWARD') &&\n        inputs.every(\n            input => this.tensorMap.get(input.dataId).resourceInfo == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  numDataIds() {\n    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    this.bufferManager.dispose();\n    this.textureManager.dispose();\n    this.disposed = true;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum BinaryOpType {\n  MUL,\n  ADD,\n  ATAN2,\n  SUB,\n  DIV,\n  EQUAL,\n  GREATER,\n  GREATER_EQUAL,\n  LESS,\n  LESS_EQUAL,\n  LOGICAL_AND,\n  NOT_EQUAL,\n  SQUARED_DIFFERENCE,\n  INT_DIV,\n  POW,\n  PRELU,\n  MAX,\n  MIN,\n  COMPLEX_MULTIPLY_REAL,\n  COMPLEX_MULTIPLY_IMAG\n}\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) { return a; }\n  if (isnan(b)) { return b; }\n  `;\n\nconst CHECK_NAN_SNIPPET_VEC4_INNER = `\n  if (isNaN.r) {\n    resultTemp.r = valueForNaN;\n  }\n  if (isNaN.g) {\n    resultTemp.g = valueForNaN;\n  }\n  if (isNaN.b) {\n    resultTemp.b = valueForNaN;\n  }\n  if (isNaN.a) {\n    resultTemp.a = valueForNaN;\n  }\n  `;\n\nconst CHECK_NAN_SNIPPET_VEC4 = `\n  let isNaN = isnanVec4(a) | isnanVec4(b);\n  ${CHECK_NAN_SNIPPET_VEC4_INNER}\n  `;\n\nconst ADD = 'return a + b;';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nconst COMPLEX_MULTIPLY_REAL = 'return areal * breal - aimag * bimag;';\nconst COMPLEX_MULTIPLY_IMAG = 'return areal * bimag + aimag * breal;';\nconst DIV = 'return a / b;';\nconst MUL = 'return a * b;';\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nconst SUB = 'return a - b;';\nconst EQUAL = 'return f32(a == b);';\nconst EQUAL_VEC4 = 'return vec4<f32>(a == b);';\nconst GREATER = 'return f32(a > b);';\nconst GREATER_VEC4 = 'return vec4<f32>(a > b);';\nconst GREATER_EQUAL = 'return f32(a >= b);';\nconst GREATER_EQUAL_VEC4 = 'return vec4<f32>(a >= b);';\nconst LESS = 'return f32(a < b);';\nconst LESS_VEC4 = 'return vec4<f32>(a < b);';\nconst LESS_EQUAL = 'return f32(a <= b);';\nconst LESS_EQUAL_VEC4 = 'return vec4<f32>(a <= b);';\nconst LOGICAL_AND = 'return f32(f32(a) >= 1.0 && f32(b) >= 1.0);';\nconst LOGICAL_AND_VEC4 = `return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));`;\nconst INT_DIV = `\n  let s = sign(a) * sign(b);\n  let ia = i32(round(a));\n  let ib = i32(round(b));\n  return f32(idiv(ia, ib, s));\n  `;\n\nconst INT_DIV_VEC4 = `\n  let ia = vec4<i32>(round(a));\n  let ib = vec4<i32>(round(b));\n  let cond = ib != vec4<i32>(0);\n  var resultTemp = vec4<i32>(0);\n  let s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    resultTemp[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    resultTemp[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    resultTemp[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    resultTemp[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4<f32>(resultTemp);\n  `;\n\nconst NOT_EQUAL = `\n  if (isnan(a) || isnan(b)) {\n    return 1.0;\n  }\n  return f32(a != b);\n`;\nconst NOT_EQUAL_VEC4 = `\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n  ${CHECK_NAN_SNIPPET_VEC4}\n\n  return resultTemp;\n`;\nconst POW = `\n  if(a < 0.0 && floor(b) < b) {\n    return uniforms.NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  if (round(abs(b) % 2.0) != 1.0) {\n    return pow(abs(a), b);\n  }\n  return sign(a) * pow(abs(a), b);\n  `;\nconst POW_VEC4 = `\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n  let valueForNaN = uniforms.NAN;\n  ${CHECK_NAN_SNIPPET_VEC4_INNER}\n  return resultTemp;\n  `;\n\nconst PRELU = `if (a < 0.0) { return b * a; }  return a;`;\nconst PRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n  `;\n\nfunction getBinaryWithNanString(\n    op: string, useVec4: boolean, valueForNaN = 'uniforms.NAN') {\n  const checkNanSnippet = useVec4 ? CHECK_NAN_SNIPPET_VEC4 : CHECK_NAN_SNIPPET;\n  return useVec4 ? `\n    let valueForNaN = ${valueForNaN};\n    var resultTemp = vec4<f32>(${op}(a, b));\n    ` + checkNanSnippet +\n          `\n    return resultTemp;\n  ` :\n                   checkNanSnippet + `\n    return ${op}(a, b);\n  `;\n}\n\nexport function getBinaryOpString(\n    type: BinaryOpType, useVec4?: boolean): string {\n  switch (type) {\n    case BinaryOpType.MUL:\n      return MUL;\n    case BinaryOpType.ADD:\n      return ADD;\n    case BinaryOpType.ATAN2:\n      return getBinaryWithNanString('atan2', useVec4);\n    case BinaryOpType.SUB:\n      return SUB;\n    case BinaryOpType.DIV:\n      return DIV;\n    case BinaryOpType.EQUAL:\n      return useVec4 ? EQUAL_VEC4 : EQUAL;\n    case BinaryOpType.GREATER:\n      return useVec4 ? GREATER_VEC4 : GREATER;\n    case BinaryOpType.GREATER_EQUAL:\n      return useVec4 ? GREATER_EQUAL_VEC4 : GREATER_EQUAL;\n    case BinaryOpType.LESS:\n      return useVec4 ? LESS_VEC4 : LESS;\n    case BinaryOpType.LESS_EQUAL:\n      return useVec4 ? LESS_EQUAL_VEC4 : LESS_EQUAL;\n    case BinaryOpType.LOGICAL_AND:\n      return useVec4 ? LOGICAL_AND_VEC4 : LOGICAL_AND;\n    case BinaryOpType.NOT_EQUAL:\n      return useVec4 ? NOT_EQUAL_VEC4 : NOT_EQUAL;\n    case BinaryOpType.SQUARED_DIFFERENCE:\n      return SQUARED_DIFFERENCE;\n    case BinaryOpType.INT_DIV:\n      return useVec4 ? INT_DIV_VEC4 : INT_DIV;\n    case BinaryOpType.PRELU:\n      return useVec4 ? PRELU_VEC4 : PRELU;\n    case BinaryOpType.MAX:\n      return getBinaryWithNanString('max', useVec4);\n    case BinaryOpType.MIN:\n      return getBinaryWithNanString('min', useVec4);\n    case BinaryOpType.POW:\n      return useVec4 ? POW_VEC4 : POW;\n    case BinaryOpType.COMPLEX_MULTIPLY_REAL:\n      return COMPLEX_MULTIPLY_REAL;\n    case BinaryOpType.COMPLEX_MULTIPLY_IMAG:\n      return COMPLEX_MULTIPLY_IMAG;\n    default:\n      throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {env, registerBackend} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from './backend_webgpu';\nimport {isWebGPUSupported} from './webgpu_util';\n\nif (isWebGPUSupported()) {\n  registerBackend('webgpu', async () => {\n    // Remove it once we figure out how to correctly read the tensor data\n    // before the tensor is disposed in profiling mode.\n    env().set('CHECK_COMPUTATION_FOR_ERRORS', false);\n\n    const gpuDescriptor: GPURequestAdapterOptions = {\n      powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?\n          'low-power' :\n          'high-performance'\n    };\n\n    const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);\n    const adapterLimits = adapter.limits;\n    const deviceDescriptor: GPUDeviceDescriptor = {};\n    const supportTimeQuery = adapter.features.has('timestamp-query');\n    deviceDescriptor.requiredLimits = {\n      'maxComputeWorkgroupStorageSize':\n          adapterLimits.maxComputeWorkgroupStorageSize,\n      'maxComputeWorkgroupsPerDimension':\n          adapterLimits.maxComputeWorkgroupsPerDimension,\n      'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,\n    };\n\n    if (supportTimeQuery) {\n      deviceDescriptor.requiredFeatures = ['timestamp-query'];\n    }\n    const device: GPUDevice = await adapter.requestDevice(deviceDescriptor);\n    // tslint:disable-next-line:no-any\n    const adapterInfo = await (adapter as any).requestAdapterInfo();\n    return new WebGPUBackend(device, adapterInfo);\n  }, 3 /*priority*/);\n}\n\n// Export webgpu utilities\nexport * from './webgpu';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum UnaryOpType {\n  ABS,\n  CEIL,\n  COS,\n  COSH,\n  ELU,\n  EXP,\n  EXPM1,\n  FLOOR,\n  IS_NAN,\n  LINEAR,\n  LOG,\n  LOGICAL_NOT,\n  NEG,\n  RELU,\n  RELU6,\n  LEAKYRELU,\n  RECIPROCAL,\n  RSQRT,\n  SIN,\n  SINH,\n  SIGMOID,\n  SQRT,\n  SQUARE,\n  TANH,\n  TO_INT\n}\n\nconst ABS = `return abs(a);`;\nconst CEIL = `return ceil(a);`;\nconst COS = `return cos(a);`;\nconst COSH = `\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nconst EXPM1 = `return exp(a) - 1.0;`;\nconst ELU = `if (a >= 0.0) { return a; }  return (exp(a) - 1.0);`;\nconst ELU_VEC4 = `\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n`;\nconst EXP = `return exp(a);`;\nconst FLOOR = `return floor(a);`;\nconst IS_NAN = `return f32(isnan(a));`;\nconst LINEAR = `return a;`;\nconst LOG = `if (a < 0.0) { return uniforms.NAN; }\n  return log(a);`;\nconst LOGICAL_NOT = `return f32(!(a >= 1.0));`;\nconst NEG = `return -a;`;\nconst LEAKYRELU = `if (a < 0.0) { return uniforms.alpha * a; } return a;`;\nconst LEAKYRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst RECIPROCAL = `return 1.0 / a;`;\nconst RELU = `return select(a, 0.0, a < 0.0);`;\nconst RELU6 = 'return clamp(a, 0.0, 6.0);';\nconst RELU6_VEC4 =\n    'return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));';\nconst RELU_VEC4 = `\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n`;\nconst RSQRT = `return 1.0/sqrt(a);`;\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * a));`;\nconst SIN = `return sin(a);`;\nconst SINH = `\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nconst SQRT = `return sqrt(a);`;\nconst SQUARE = `return a * a;`;\nconst TANH = `\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n`;\nconst TO_INT = `return f32(i32((a)));`;\n\nexport function getUnaryOpString(type: UnaryOpType, useVec4?: boolean): string {\n  switch (type) {\n    case UnaryOpType.ABS:\n      return ABS;\n    case UnaryOpType.COS:\n      return COS;\n    case UnaryOpType.COSH:\n      return COSH;\n    case UnaryOpType.CEIL:\n      return CEIL;\n    case UnaryOpType.ELU:\n      return useVec4 ? ELU_VEC4 : ELU;\n    case UnaryOpType.EXP:\n      return EXP;\n    case UnaryOpType.EXPM1:\n      return EXPM1;\n    case UnaryOpType.FLOOR:\n      return FLOOR;\n    case UnaryOpType.IS_NAN:\n      return IS_NAN;\n    case UnaryOpType.LINEAR:\n      return LINEAR;\n    case UnaryOpType.LOG:\n      return LOG;\n    case UnaryOpType.LOGICAL_NOT:\n      return LOGICAL_NOT;\n    case UnaryOpType.NEG:\n      return NEG;\n    case UnaryOpType.LEAKYRELU:\n      return useVec4 ? LEAKYRELU_VEC4 : LEAKYRELU;\n    case UnaryOpType.RECIPROCAL:\n      return RECIPROCAL;\n    case UnaryOpType.RELU:\n      return useVec4 ? RELU_VEC4 : RELU;\n    case UnaryOpType.RELU6:\n      return useVec4 ? RELU6_VEC4 : RELU6;\n    case UnaryOpType.RSQRT:\n      return RSQRT;\n    case UnaryOpType.SIGMOID:\n      return SIGMOID;\n    case UnaryOpType.SIN:\n      return SIN;\n    case UnaryOpType.SINH:\n      return SINH;\n    case UnaryOpType.SQRT:\n      return SQRT;\n    case UnaryOpType.SQUARE:\n      return SQUARE;\n    case UnaryOpType.TANH:\n      return TANH;\n    case UnaryOpType.TO_INT:\n      return TO_INT;\n\n    default:\n      throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport function activationFnSnippet(\n    activation: backend_util.Activation, hasPreluActivationWeights = false,\n    packed = false, coordsLength = 3): string {\n  if (activation === null) {\n    return '';\n  }\n\n  let activationOpSnippet = '';\n  if (activation === 'linear') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LINEAR);\n  } else if (activation === 'relu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU, packed);\n  } else if (activation === 'elu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.ELU, packed);\n  } else if (activation === 'relu6') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU6, packed);\n  } else if (activation === 'prelu') {\n    activationOpSnippet = getBinaryOpString(BinaryOpType.PRELU, packed);\n  } else if (activation === 'sigmoid') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.SIGMOID, packed);\n  } else if (activation === 'leakyrelu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LEAKYRELU, packed);\n  } else {\n    throw new Error(`Activation ${\n        activation} has not been implemented for the WebGPU backend.`);\n  }\n  const elementSize = packed ? 4 : 1;\n  const dataType = typeSnippet(elementSize);\n  let activationFnSnippet = '';\n  if (hasPreluActivationWeights) {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${activationOpSnippet}\n      }`;\n  } else {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        ${activationOpSnippet}\n      }`;\n  }\n  return activationFnSnippet;\n}\n\nexport function biasActivationSnippet(\n    hasBias: boolean, activation: backend_util.Activation): string {\n  return `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkGroupInfoForMatMul} from './webgpu_util';\n\nexport function matMulReadFnSource(\n    batchAEqualOne: boolean, batchBEqualOne: boolean, transposeA: boolean,\n    transposeB: boolean, fitAOuter = false, fitBOuter = false, fitInner = false,\n    component = 1) {\n  util.assert(\n      transposeA && component === 1 || !transposeA,\n      () => `transposeA ${transposeA} is not compatible with component size ${\n          component}`);\n  const sampleA = `\n      let batch = ${batchAEqualOne ? '0' : 'batchIn'};\n      ${\n      transposeA ? `value = getA(batch, col, row);` :\n                   `value = getA(batch, row, col);`}\n\n    `;\n  const sampleB = transposeB ? `value = getB(batch, col, row);` :\n                               `value = getB(batch, row, col);`;\n\n  return `\n  fn mm_readA(batchIn: i32, row: i32, colIn: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    let col = colIn * ${component};\n    ${\n      fitAOuter && fitInner ?\n          sampleA :\n          `\n    ${\n              transposeA ?\n                  `if(row < uniforms.dimAOuter && col < uniforms.dimInner)` :\n                  `if(row < uniforms.aShape[1] && col < uniforms.aShape[2])`}\n    {\n      ${sampleA}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batchIn: i32, row: i32, colIn: i32) -> ${typeSnippet(component)} {\n    let col = colIn * ${component};\n    let batch = ${batchBEqualOne ? '0' : 'batchIn'};\n    var value = ${typeSnippet(component)}(0.0);\n    ${sampleB}\n    return value;\n  }\n  `;\n}\n\nexport function matMulReadWriteFnSource(\n    hasBias: boolean, activation: backend_util.Activation,\n    batchAEqualOne: boolean, batchBEqualOne: boolean, transposeA: boolean,\n    transposeB: boolean, fitAOuter = false, fitBOuter = false, fitInner = false,\n    component = 1) {\n  return `\n  ${\n      matMulReadFnSource(\n          batchAEqualOne, batchBEqualOne, transposeA, transposeB, fitAOuter,\n          fitBOuter, fitInner, component)}\n  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${\n      typeSnippet(component)}) {\n    let col = colIn * ${component};\n    ${\n      fitAOuter && fitBOuter ?\n          '' :\n          'if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)'}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${biasActivationSnippet(hasBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `;\n}\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / InnerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / InnerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet =\n    (transposeA: boolean, innerElementSize: number) => {\n      if (transposeA) {\n        return `\n        let ACached0 = mm_Asub[k * InnerElementSize][localRow];\n        let ACached1 = mm_Asub[k * InnerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * InnerElementSize + 2][localRow];\n        ${\n            innerElementSize === 3 ?\n                '' :\n                'let ACached3 = mm_Asub[k * InnerElementSize + 3][localRow];'}\n        for (var i = 0; i < RowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${\n            innerElementSize === 3 ?\n                '' :\n                'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n      } else {\n        return `\n        for (var i = 0; i < RowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${\n            innerElementSize === 3 ? '' :\n                                     'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n      }\n    };\n\nexport function makeMatMulPackedVec4Source(\n    workPerThread: number[], workGroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    isVectorA = false): string {\n  const tileAOuter = workGroupSize[1] * workPerThread[1];\n  const tileBOuter = workGroupSize[0] * workPerThread[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  const innerElementSize = tileAWidth / workGroupSize[0];\n  const rowPerThreadB = tileInner / workGroupSize[1];\n  util.assert(\n      ((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n       (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n          tileAWidth % workGroupSize[0] === 0 &&\n          tileInner % workGroupSize[1] === 0 && workPerThread[0] === 4,\n      () => `If transposeA ${transposeA} is true, innerElementSize ${\n          innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n          Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n      tileAWidth ${tileAWidth} must be divisible by workGroupSize[0]${\n          workGroupSize[0]}. tileInner ${\n          tileInner} must be divisible by workGroupSize[1] ${\n          workGroupSize[1]}. ColPerThread ${workPerThread[0]} must be 4.`);\n  return `\n  var<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${\n      tileAWidth / innerElementSize}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${\n      tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\n  const RowPerThread = ${workPerThread[1]};\n  const ColPerThread = ${workPerThread[0]};\n  const InnerElementSize = ${innerElementSize};\n  const TileInner = ${tileInner};\n\n  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\n  fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n            @builtin(global_invocation_id) GlobalId : vec3<u32>,\n            @builtin(num_workgroups) NumWorkgroups: vec3<u32>,\n            @builtin(workgroup_id) workgroupId: vec3<u32>) {\n    localId = LocalId;\n    globalId = GlobalId;\n    numWorkgroups = NumWorkgroups;\n\n    let localRow = i32(localId.y);\n    let tileRow = ${isVectorA ? '0' : 'localRow * RowPerThread'};\n    let tileCol = i32(localId.x);\n\n    let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * RowPerThread'};\n    let globalCol = i32(globalId.x);\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n    let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               '(uniforms.dimInner - 1) / TileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc: array<vec4<f32>, RowPerThread>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${rowPerThreadB};\n    for (var t = 0; t < numTiles; t = t + 1) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${writeDataToSubAVec4Snippet(transposeA)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${\n      rowPerThreadB}; innerRow = innerRow + 1) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + TileInner;\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < TileInner / InnerElementSize; k = k + 1) {\n            let BCached0 = mm_Bsub[k * InnerElementSize][tileCol];\n            let BCached1 = mm_Bsub[k * InnerElementSize + 1][tileCol];\n            let BCached2 = mm_Bsub[k * InnerElementSize + 2][tileCol];\n            ${\n      innerElementSize === 3 ?\n          '' :\n          'let BCached3 = mm_Bsub[k * InnerElementSize + 3][tileCol];'}\n\n            ${calculateResultSnippet(transposeA, innerElementSize)}\n        }\n\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`;\n}\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) => {\n  return transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' :\n\n                      'let ACached = mm_Asub[tileRow + innerRow][k];';\n};\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport function makeMatMulPackedSource(\n    workPerThread: number[], workGroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    sequentialAccessByThreads = false): string {\n  const tileAOuter = workPerThread[1] * workGroupSize[1];\n  const tileBOuter = workPerThread[0] * workGroupSize[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  util.assert(\n      tileAHight % workGroupSize[1] === 0 &&\n          tileAWidth % workGroupSize[0] === 0 &&\n          tileInner % workGroupSize[1] === 0,\n      () => `tileAHight ${tileAHight} must be divisible by workGroupSize[1]${\n          workGroupSize[1]}, tileAWidth ${\n          tileAWidth} must be divisible by workGroupSize[0]${\n          workGroupSize[0]}, tileInner ${\n          tileInner} must be divisible by workGroupSize[1]${workGroupSize[1]}`);\n  const rowPerThreadA = tileAHight / workGroupSize[1];\n  const colPerThreadA = tileAWidth / workGroupSize[0];\n  const rowPerThreadB = tileInner / workGroupSize[1];\n  const matmulSnippet = sequentialAccessByThreads ?\n      `\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n      let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t = t + 1) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileAHight}; inputRow = inputRow + ${workGroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n          tileAWidth}; inputCol = inputCol + ${workGroupSize[0]}) {\n            ${writeDataToSubASnippet(transposeA)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileInner}; inputRow = inputRow + ${workGroupSize[1]}) {\n              for (var inputCol = localCol; inputCol < ${\n          tileBOuter}; inputCol = inputCol + ${workGroupSize[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + TileInner;\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ColPerThread>;\n        for (var k = 0; k < TileInner; k = k + 1) {\n          for (var inner = 0; inner < ColPerThread; inner = inner + 1) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${workGroupSize[0]}];\n          }\n          for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {\n            let ACached = ${\n          transposeA ?\n              `mm_Asub[k][localRow + innerRow * ${workGroupSize[1]}];` :\n              `mm_Asub[localRow + innerRow * ${workGroupSize[1]}][k];`}\n            for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {\n              acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                  ACached * BCached[innerCol];\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {\n        let gRow = globalRowStart + localRow + innerRow * ${workGroupSize[1]};\n        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {\n          let gCol = globalColStart + localCol + innerCol * ${workGroupSize[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      ` :\n      `\n  let tileRow = i32(localId.y) * RowPerThread;\n  let tileCol = i32(localId.x) * ColPerThread;\n\n  let globalRow = i32(globalId.y) * RowPerThread;\n  let globalCol = i32(globalId.x) * ColPerThread;\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let tileRowA = i32(localId.y) * ${rowPerThreadA};\n  let tileColA = i32(localId.x) * ${colPerThreadA};\n  let tileRowB = i32(localId.y) * ${rowPerThreadB};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t = t + 1) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${\n          rowPerThreadA}; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < ${\n          colPerThreadA}; innerCol = innerCol + 1) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${writeDataToSubASnippet(transposeA)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${\n          rowPerThreadB}; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + TileInner;\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ColPerThread>;\n    for (var k = 0; k < TileInner; k = k + 1) {\n      for (var inner = 0; inner < ColPerThread; inner = inner + 1) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {\n        ${readDataFromSubASnippet(transposeA)}\n        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {\n          acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;\n\n  return `\n    var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n    const RowPerThread = ${workPerThread[1]};\n    const ColPerThread = ${workPerThread[0]};\n    const TileInner = ${tileInner};\n\n    @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\n    fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n              @builtin(global_invocation_id) GlobalId : vec3<u32>,\n              @builtin(num_workgroups) NumWorkgroups: vec3<u32>,\n              @builtin(workgroup_id) workgroupId: vec3<u32>) {\n      localId = LocalId;\n      globalId = GlobalId;\n      numWorkgroups = NumWorkgroups;\n\n      let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n      let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               '(uniforms.dimInner - 1) / TileInner + 1'};\n      var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n      var acc : array<array<f32, ColPerThread>, RowPerThread>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {\n        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${matmulSnippet}\n    }\n  `;\n}\n\nconst readVectorASnippet = (transpose: boolean) => {\n  return transpose ? `\n      mm_readA(batch, colA, globalRow),\n      mm_readA(batch, colA + 1, globalRow),\n      mm_readA(batch, colA + 2, globalRow),\n      mm_readA(batch, colA + 3, globalRow)\n  ` :\n                     `\n      mm_readA(batch, globalRow, colA),\n      mm_readA(batch, globalRow, colA + 1),\n      mm_readA(batch, globalRow, colA + 2),\n      mm_readA(batch, globalRow, colA + 3)\n  `;\n};\n\nexport function makeVectorMatrixProductSource(\n    workGroupSize: [number, number, number], transposeA = false): string {\n  util.assert(\n      workGroupSize[1] === 1 && workGroupSize[2] === 1,\n      () => `A linear work group size is required. But got ${workGroupSize}.`);\n  return `\n    const TileSize = ${workGroupSize[0] * 4};\n    var<workgroup> mm_Asub : array<vec4<f32>, ${workGroupSize[0]}>;\n\n    ${main()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / TileSize + 1;\n      let batch = i32(globalId.z);\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t = t + 1) {\n        // Load one tile of A into local memory.\n        let colA = t * TileSize + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${readVectorASnippet(transposeA)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < TileSize / 4; k = k + 1) {\n          let rowB = t * TileSize + k * 4;\n          let BCached = vec4<f32>(mm_readB(batch, rowB, globalCol),\n                              mm_readB(batch, rowB + 1, globalCol),\n                              mm_readB(batch, rowB + 2, globalCol),\n                              mm_readB(batch, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `;\n}\n\nexport class MatMulPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workGroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  batchAEqualOne: boolean;\n  batchBEqualOne: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileInner: number;\n  isVectorA: boolean;\n  isVec4: boolean;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      batchAEqualOne: boolean, batchBEqualOne: boolean, transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null,\n      sequentialAccessByThreads = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    const dimInner = transposeA ? aShape[1] : aShape[2];\n    this.isVec4 = ((dimInner % 4 === 0 && !transposeA) ||\n                   (outputShape[1] % 4 === 0 && transposeA)) &&\n        outputShape[2] % 4 === 0 && !transposeB;\n    this.isVectorA = outputShape[1] === 1 && !transposeA;\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.elementsPerThread = [1, 1, 1];\n      this.workGroupSize = [32, 1, 1];\n    } else {\n      const workGroupInfo = computeWorkGroupInfoForMatMul(\n          outputShape[1], dimInner, outputShape[2], transposeA);\n      this.workGroupSize = workGroupInfo.workGroupSize;\n      this.elementsPerThread = workGroupInfo.elementsPerThread;\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        this.elementsPerThread);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.batchAEqualOne = batchAEqualOne;\n    this.batchBEqualOne = batchBEqualOne;\n    [this.fitAOuter, this.fitBOuter, this.fitInner] =\n        this.getShapeFit(outputShape[1], outputShape[2], dimInner);\n    this.shaderKey = `matMulPacked_${this.elementsPerThread}_${transposeA}_${\n        transposeB}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${\n        this.fitInner}_${this.isVec4}_${this.isVectorA}_${\n        this.batchAEqualOne}_${this.batchBEqualOne}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getShapeFit(dimAOuter: number, dimBOuter: number, dimInner: number):\n      boolean[] {\n    const tileAOuter = this.workGroupSize[1] * this.elementsPerThread[1];\n    const tileBOuter = this.workGroupSize[0] * this.elementsPerThread[0];\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.tileInner = this.workGroupSize[0] * 4;\n    } else {\n      this.tileInner = tileBOuter;\n    }\n\n    const fitAOuter = dimAOuter % tileAOuter === 0;\n    const fitBOuter = dimBOuter % tileBOuter === 0;\n    const fitInner = dimInner % this.tileInner === 0;\n    return [fitAOuter, fitBOuter, fitInner];\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, this.isVec4)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.batchAEqualOne,\n            this.batchBEqualOne,\n            false /* transposeA is implemented in makeMatMulPackedSource */,\n            this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.isVec4 ? 4 : 1)}\n      ${\n        this.isVec4 ?\n            makeMatMulPackedVec4Source(\n                this.elementsPerThread, this.workGroupSize, this.transposeA,\n                this.tileInner, false, null, this.isVectorA) :\n            (this.isVectorA ? makeVectorMatrixProductSource(\n                                  this.workGroupSize, this.transposeA) :\n                              makeMatMulPackedSource(\n                                  this.elementsPerThread, this.workGroupSize,\n                                  this.transposeA, this.tileInner, false, null,\n                                  this.sequentialAccessByThreads))}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport function makeMatMulReduceSource(): string {\n  return `\n    var<workgroup> sumValues : array<f32, workGroupSizeX>;\n    ${main()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + i32(workGroupSizeX)) {\n        let dataA = mm_readA(batch, row, k);\n        let dataB = mm_readB(batch, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = workGroupSizeX / 2u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `;\n}\n\nexport class MatMulReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workGroupSize: [number, number, number] = [256, 1, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  batchAEqualOne: boolean;\n  batchBEqualOne: boolean;\n\n  constructor(\n      outputShape: [number, number, number], batchAEqualOne: boolean,\n      batchBEqualOne: boolean, transposeA = false, transposeB = false,\n      bias: TensorInfo = null, activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [], y: [1, 2], z: [0]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.batchAEqualOne = batchAEqualOne;\n    this.batchBEqualOne = batchBEqualOne;\n    this.shaderKey = `matMulReduce_${this.activation}_${transposeA}_${\n        transposeB}_${this.batchAEqualOne}_${this.batchBEqualOne}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.batchAEqualOne,\n            this.batchBEqualOne, this.transposeA, this.transposeB)}\n      ${makeMatMulReduceSource()}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\n\nexport function makeMatMulSmallOutputSizeSource(\n    workGroupSize: [number, number, number]): string {\n  const tileAOuter = workGroupSize[1];\n  const tileBOuter = workGroupSize[0];\n  const tileInner = tileAOuter > tileBOuter ? tileAOuter : tileBOuter;\n  return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileInner}>, ${tileAOuter}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${main()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${tileInner} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batch, globalRow, globalColA);\n    var regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${tileInner};\n    globalRowB = globalRowB + ${tileInner};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batch, globalRow, globalColA);\n      regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${tileInner};\n      globalRowB = globalRowB + ${tileInner};\n\n      for (var k = 0; k < ${tileInner}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `;\n}\n\nexport class MatMulSmallOutputSizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workGroupSize: [number, number, number] = [16, 8, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  batchAEqualOne: boolean;\n  batchBEqualOne: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    this.dispatch = [\n      Math.ceil(outputShape[2] / this.workGroupSize[0]),\n      Math.ceil(outputShape[1] / this.workGroupSize[1]), outputShape[0]\n    ];\n\n    const addBias = bias != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.batchAEqualOne = aShape[0] === 1;\n    this.batchBEqualOne = bShape[0] === 1;\n    this.shaderKey = `matMulSmallOutputSize_${this.activation}_${transposeA}_${\n        transposeB}_${this.batchAEqualOne}_${this.batchBEqualOne}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.batchAEqualOne,\n            this.batchBEqualOne, this.transposeA, this.transposeB)}\n      ${makeMatMulSmallOutputSizeSource(this.workGroupSize)}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source, matMulReadFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MatMulSplitKProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workGroupSize: [number, number, number] = [8, 8, 1];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  atomic = true;\n  batchAEqualOne: boolean;\n  batchBEqualOne: boolean;\n  isVec4 = false;\n  splitedDimInner = 128;\n\n  constructor(\n      outputShape: [number, number, number], dimInner: number,\n      batchAEqualOne: boolean, batchBEqualOne: boolean, transposeA = false,\n      transposeB = false) {\n    util.assert(\n        outputShape[0] === 1,\n        () => 'MatMulSplitKProgram only supports batch = 1.');\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0, 3]};\n    this.isVec4 = (transposeA && this.outputShape[1] % 4 === 0 ||\n                   !transposeA && dimInner % 4 === 0) &&\n        this.outputShape[2] % 4 === 0;\n    this.elementsPerThread = [4, 4, this.splitedDimInner];\n\n    if (!this.isVec4) {\n      if (this.outputShape[1] < 16) {\n        this.elementsPerThread[1] = 1;\n      }\n      if (this.outputShape[2] < 16) {\n        this.elementsPerThread[0] = 1;\n      }\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout,\n        [\n          this.outputShape[0], this.outputShape[1], this.outputShape[2],\n          dimInner\n        ],\n        this.workGroupSize, this.elementsPerThread);\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.batchAEqualOne = batchAEqualOne;\n    this.batchBEqualOne = batchBEqualOne;\n    this.shaderKey =\n        `matMulSplitK_${transposeA}_${transposeB}_${batchAEqualOne}_${\n            batchBEqualOne}_${this.elementsPerThread}_${this.isVec4}`;\n  }\n\n  getUserCode(): string {\n    // atomicAdd only supports uint/int type. For float, we use\n    // atomicCompareExchangeWeak to simulate.\n    const atomicAddSnippet = (component: number) => {\n      return `\n      for (var i = 0; i < ${component}; i = i + 1)\n      {\n        var oldValue = atomicLoad(&(result[flatIndex + i]));\n        var exchanged = false;\n        for (; !exchanged;) {\n          let newValueF32 = bitcast<f32>(oldValue) + ${\n          component > 1 ? 'value[i]' : 'value'};\n          let newValue = bitcast<i32>(newValueF32);\n          let res = atomicCompareExchangeWeak(&(result[flatIndex + i]), oldValue, newValue);\n          oldValue = res.old_value;\n          exchanged = res.exchanged;\n        }\n      }\n      `;\n    };\n\n    const component = this.isVec4 ? 4 : 1;\n    const userCode = `\n      ${\n        matMulReadFnSource(\n            this.batchAEqualOne, this.batchBEqualOne, false, this.transposeB,\n            false, false, false, component)}\n      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${\n        typeSnippet(component)}) {\n        let col = colIn * ${component};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          ${atomicAddSnippet(component)}\n        }\n      }\n      ${\n        this.isVec4 ? makeMatMulPackedVec4Source(\n                          this.elementsPerThread, this.workGroupSize,\n                          this.transposeA, 32, true, this.splitedDimInner) :\n                      makeMatMulPackedSource(\n                          this.elementsPerThread, this.workGroupSize,\n                          this.transposeA, 32, true, this.splitedDimInner)}\n    `;\n    return userCode;\n  }\n}\n\nexport class BiasActivationProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  private addBias: boolean;\n  private activation: backend_util.Activation;\n  private hasPreluActivationWeights: boolean;\n\n  constructor(\n      outputShape: number[], bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.addBias = bias != null;\n    this.hasPreluActivationWeights = preluActivationWeights != null;\n    this.activation = activation;\n    if (this.addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (this.hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `biasActivation_${activation}`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FillProgram implements WebGPUProgram {\n  variableNames: string[] = [];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'value : f32,';\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.shaderKey = 'fill';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FillProgram} from '../fill_webgpu';\n\nexport function fill(args: {backend: WebGPUBackend, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape);\n    const uniformData = [{type: 'float32', data: [value as number]}];\n    return backend.runWebGPUProgram(program, [], dtype, uniformData);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function reshape(\n    args: {inputs: ReshapeInputs, backend: WebGPUBackend, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  // Backend needs to track refCount for the dataId for reshape op\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MatMulPackedProgram} from '../matmul_packed_webgpu';\nimport {MatMulReduceProgram} from '../matmul_reduce_webgpu';\nimport {MatMulSmallOutputSizeProgram} from '../matmul_small_output_size_webgpu';\nimport {BiasActivationProgram, MatMulSplitKProgram} from '../matmul_splitK_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\nimport {MatMulProgramType} from '../webgpu_util';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const batchAEqualOne = batchDimA === 1;\n  const batchBEqualOne = batchDimB === 1;\n\n  const inputs: TensorInfo[] = [a3d, b3d];\n  const dimensions = [\n    {type: 'int32', data: [outerShapeA]}, {type: 'int32', data: [outerShapeB]},\n    {type: 'int32', data: [innerShapeA]}\n  ];\n\n  let program: WebGPUProgram;\n  let out: TensorInfo;\n  const outputShape: [number, number, number] =\n      [batchDim, outerShapeA, outerShapeB];\n  let matmulProgramType = env().get('WEBGPU_MATMUL_PROGRAM_TYPE') as number;\n  if (matmulProgramType < 0) {\n    if (outerShapeA * outerShapeB <= 128) {\n      matmulProgramType = MatMulProgramType.MatMulReduceProgram;\n    } else if (\n        // These boundaries are based on bodypix-ResNet50-image-0.5.\n        // TODO: Relax or tight these boundaries when we have a complete matmul\n        // test coverage.\n        batchDim === 1 && outerShapeA <= 128 && outerShapeB <= 48 &&\n        innerShapeB >= 2000) {\n      matmulProgramType = MatMulProgramType.MatMulSplitKProgram;\n    } else if (\n        // When the output size is absolutely small or relatively small, we may\n        // use MatMulSmallOutputSizeProgram to get better performance.\n        // Absolutely small size means that the output size is smaller than [16,\n        // 512]. Relatively small size means that one demension size of the\n        // output is smaller than 16, and the output size is also more than or\n        // equal two times smaller than each of the two input sizes. For\n        // example, if input sizes are [12, 2048] and [2048, 1024], the output\n        // size is [12, 1024], which is relatively small compared to input\n        // sizes.\n        (outerShapeA <= 16 &&\n         (outerShapeB <= 512 || innerShapeB >= 2 * outerShapeB)) ||\n        (outerShapeB <= 16 &&\n         (outerShapeA <= 512 || innerShapeA >= 2 * outerShapeA))) {\n      matmulProgramType = MatMulProgramType.MatMulSmallOutputSizeProgram;\n    } else {\n      matmulProgramType = MatMulProgramType.MatMulPackedProgram;\n    }\n  }\n\n  switch (matmulProgramType) {\n    case MatMulProgramType.MatMulReduceProgram:\n      program = new MatMulReduceProgram(\n          outputShape, batchAEqualOne, batchBEqualOne, transposeA, transposeB,\n          bias, activation, preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulSplitKProgram: {\n      // The output buffer must be initailzed to zero before using since we\n      // use atomicAdd in MatMulSplitKProgram.\n      out = fill(\n          {backend, attrs: {shape: outputShape, value: 0, dtype: a.dtype}});\n      program = new MatMulSplitKProgram(\n          outputShape, innerShapeB, batchAEqualOne, batchBEqualOne, transposeA,\n          transposeB);\n      if (bias || activation) {\n        out =\n            backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n        const biasActivationProgram = new BiasActivationProgram(\n            out.shape, bias, activation, preluActivationWeights);\n        let uniformData = null;\n        const activationInputs: TensorInfo[] = [out];\n        if (bias) {\n          activationInputs.push(bias);\n        }\n        if (preluActivationWeights) {\n          activationInputs.push(preluActivationWeights);\n        }\n        if (activation === 'leakyrelu') {\n          uniformData = [{type: 'float32', data: [leakyreluAlpha]}];\n          biasActivationProgram.uniforms += ' alpha : f32,';\n        }\n        const outActivated = backend.runWebGPUProgram(\n            biasActivationProgram, activationInputs, out.dtype, uniformData);\n        intermediates.push(out);\n        const outReshaped = reshape(\n            {inputs: {x: outActivated}, backend, attrs: {shape: outShape}});\n        intermediates.push(outActivated);\n        for (const i of intermediates) {\n          backend.disposeData(i.dataId);\n        }\n        return outReshaped;\n      }\n      break;\n    }\n    case MatMulProgramType.MatMulSmallOutputSizeProgram:\n      program = new MatMulSmallOutputSizeProgram(\n          a3dShape, b3dShape, outputShape, transposeA, transposeB, bias,\n          activation, preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulPackedProgram:\n      // Experiments show that sequential access is more friendly for Intel\n      // GPUs.\n      const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n      program = new MatMulPackedProgram(\n          a3dShape, outputShape, batchAEqualOne, batchBEqualOne, transposeA,\n          transposeB, bias, activation, preluActivationWeights,\n          sequentialAccessByThreads);\n      break;\n    default:\n      throw new Error(`Unsupported MatMulProgramType ${matmulProgramType}.`);\n  }\n\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (preluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  out = backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpComplexProgram implements WebGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [128, 1, 1];\n  op: BinaryOpType;\n  size = true;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.shaderKey = `binaryOpComplex_${op}`;\n    this.op = op;\n  }\n\n  getUserCode(): string {\n    const opStr = getBinaryOpString(this.op, false);\n    const userCode = `\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${opStr}\n      }\n\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  isVec4: boolean;\n  op: BinaryOpType;\n  outputShape: number[];\n  shaderKey: string;\n  size = true;\n  variableNames = ['A', 'B'];\n  workGroupSize: [number, number, number];\n  workPerThread: number;\n\n  private lastDimensionSize: number;\n  private useSharedMemoryWithA: boolean;\n  private useSharedMemoryWithB: boolean;\n  private type: string;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.op = op;\n\n    this.useSharedMemoryWithA =\n        aShape.length <= 1 && bShape.length > 1 && aShape[0] < 128;\n    this.useSharedMemoryWithB =\n        bShape.length <= 1 && aShape.length > 1 && bShape[0] < 128;\n\n    if (this.useSharedMemoryWithA || this.useSharedMemoryWithB) {\n      this.isVec4 = false;\n      // lastDimensionSize is used as sharedBuf array size, so can not be\n      // used as uniform.\n      this.lastDimensionSize =\n          this.useSharedMemoryWithB ? bShape[0] : aShape[0];\n      this.shaderKey = `binary_${this.type}_${op}_${this.lastDimensionSize}_${\n          this.useSharedMemoryWithB}`;\n      this.type = 'shared';\n      // This is an experimental value when using shared memory.\n      // Note that the maximum of workgroup X dimension is 256.\n      this.workGroupSize = [256, 1, 1];\n      this.workPerThread = 1;\n    } else {\n      if (util.arraysEqual(aShape, bShape) &&\n          util.sizeFromShape(aShape) % 4 === 0) {\n        this.isVec4 = true;\n        this.type = 'vec4';\n        this.workPerThread = 4;\n      } else {\n        this.isVec4 = false;\n        this.type = 'plain';\n        this.workPerThread = 1;\n      }\n      this.shaderKey = `binary_${this.type}_${op}`;\n      // TODO(jiajia.qin@intel.com): Heuristically select a good work group\n      // size.\n      this.workGroupSize = [128, 1, 1];\n    }\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [this.workPerThread, 1, 1]);\n  }\n\n  getUserCode(): string {\n    let userCode;\n    const dType = this.isVec4 ? 'vec4<f32>' : 'f32';\n    const opFnStr = `\n    fn binaryOperation(a : ${dType}, b : ${dType}) -> ${dType} {\n      ${getBinaryOpString(this.op, this.isVec4)}\n    };\n    `;\n\n    if (this.type === 'shared') {\n      const sharedIndexSnippet = this.lastDimensionSize > 1 ?\n          `coords[${this.outputShape.length - 1}]` :\n          '0';\n      const accessDataSnippet = this.useSharedMemoryWithB ?\n          `let a = getAByOutputIndex(index);\n          let b = sharedBuf[${sharedIndexSnippet}];` :\n          `let a = sharedBuf[${sharedIndexSnippet}];\n          let b = getBByOutputIndex(index);`;\n      userCode = `\n        ${opFnStr}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${main('index')} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${\n          this.useSharedMemoryWithB ? 'B' : 'A'}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${accessDataSnippet}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `;\n    } else {\n      userCode = `\n       ${opFnStr}\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let a = getAByOutputIndex(index);\n           let b = getBByOutputIndex(index);\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;\n    }\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs} = args;\n  const {x} = inputs;\n\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\n/**\n * Complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args: {inputs: ComplexInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.tensorMap.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class UnaryOpProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A'];\n  workGroupSize: [number, number, number];\n  op: UnaryOpType;\n  uniforms?: string;\n  size = true;\n\n  constructor(outputShape: number[], op: UnaryOpType) {\n    // TODO(jiajia.qin@intel.com): Heuristically select a good work group size.\n    const workGroupSizeX = 128;\n    this.workGroupSize = [workGroupSizeX, 1, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.op = op;\n    this.shaderKey = `unary_${op}`;\n  }\n\n  getUserCode(): string {\n    return `\n      fn unaryOperation(a : f32) -> f32 {\n        ${getUnaryOpString(this.op, false)}\n      }\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TensorInfo, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BinaryOpComplexProgram} from '../binary_op_complex_webgpu';\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\nimport {complex} from '../kernels/Complex';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\ntype UnaryKernelFuncConfig = {\n  opType: UnaryOpType,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opType Op type to create `UnaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opType, cpuKernelImpl, dtype}: UnaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    const $dtype = dtype || x.dtype;\n    if (webgpuBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webgpuBackend.tensorMap.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webgpuBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const program: UnaryOpProgram = new UnaryOpProgram(x.shape, opType);\n    return webgpuBackend.runWebGPUProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opType: BinaryOpType,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  supportsComplex?: boolean,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opType Op type to create `BinaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    {opType, cpuKernelImpl, supportsComplex = false, dtype}:\n        BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webgpuBackend.tensorMap.get(a.dataId);\n      const bData = webgpuBackend.tensorMap.get(b.dataId);\n      let real: TensorInfo, imag: TensorInfo;\n      if (opType !== BinaryOpType.MUL) {\n        [real, imag] = [\n          [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n          [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n        ].map(complexParts => {\n          const [aPart, bPart] = complexParts;\n\n          const aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          const bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n\n          const program = new BinaryOpProgram(opType, a.shape, b.shape);\n          return webgpuBackend.runWebGPUProgram(\n              program, [aHandle, bHandle],\n              upcastType(aPart.dtype, bPart.dtype));\n        });\n      } else {\n        const realProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_IMAG, a.shape, b.shape);\n\n        const inputs = [\n          {\n            dataId: aData.complexTensorInfos.real.dataId,\n            dtype: aData.complexTensorInfos.real.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: aData.complexTensorInfos.imag.dataId,\n            dtype: aData.complexTensorInfos.imag.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.real.dataId,\n            dtype: bData.complexTensorInfos.real.dtype,\n            shape: b.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.imag.dataId,\n            dtype: bData.complexTensorInfos.imag.dtype,\n            shape: b.shape\n          }\n        ];\n\n        real = webgpuBackend.runWebGPUProgram(realProgram, inputs, 'float32');\n        imag = webgpuBackend.runWebGPUProgram(imagProgram, inputs, 'float32');\n      }\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webgpuBackend});\n\n      webgpuBackend.disposeData(real.dataId);\n      webgpuBackend.disposeData(imag.dataId);\n\n      // TODO: Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webgpuBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aData = webgpuBackend.tensorMap.get(a.dataId).values as TypedArray;\n      const bData = webgpuBackend.tensorMap.get(b.dataId).values as TypedArray;\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aData as any as Uint8Array[]) :\n          aData;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bData as any as Uint8Array[]) :\n          bData;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return webgpuBackend.makeTensorInfo(outShape, $dtype, outValues);\n    }\n    const program = new BinaryOpProgram(opType, a.shape, b.shape);\n    return webgpuBackend.runWebGPUProgram(program, [a, b], $dtype);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  greaterImpl: greaterImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  lessImpl: lessImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  prodImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  scatterImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const abs =\n    unaryKernelFunc({opType: UnaryOpType.ABS, cpuKernelImpl: simpleAbsImplCPU});\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgpu',\n  kernelFunc: abs\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nexport const addKernelFunc = binaryKernelFunc(\n    {opType: BinaryOpType.ADD, cpuKernelImpl: cpuAdd, supportsComplex: true});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgpu',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AddNPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  workPerThread = 1;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shapes: number[][]) {\n    this.outputShape = shapes[0];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'addN';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`let v${variable} = get${variable}ByOutputCoords(coords);`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    const userCode = `\n      ${main('index')} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${snippets.join('\\n        ')}\n            setOutputAtIndex(flatIndex, ${operation});\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {AddNPackedProgram} from '../addn_packed_webgpu';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  const program = new AddNPackedProgram(shapes);\n  return backend.runWebGPUProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ArgMinMaxProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  variableNames = ['x'];\n  uniforms = 'infinityValue : f32,';\n  inputShape: number[];\n  reductionFactor: number;\n  op: string;\n  size = true;\n  private type: string;\n\n  constructor(inputShape: number[], axis: number, reduceType: 'min'|'max') {\n    const axes = [axis];\n\n    this.op = reduceType === 'min' ? '<' : '>';\n\n    // |outShape| is the shape with the removed axis\n    const [outputShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(inputShape, axes);\n\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // The shared algorithm is mainly used for large reduce size. It fully\n    // utilizes the threads in one workgroup to do the reduction. However,\n    // when the reduce size is very small or the output shape is too large. It's\n    // better to use the plain algorithm to reduce the number of workgroups to\n    // speedup. The threthold can be further tuned.\n    if (util.sizeFromShape(reduceShape) < 32 ||\n        util.sizeFromShape(outputShape) > 1000) {\n      this.type = 'plain';\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workGroupSize);\n    } else {\n      this.type = 'shared';\n      // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n      // dispatch size.\n      this.dispatch =\n          computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n    }\n\n    this.inputShape = inputShape;\n    this.shaderKey = `argMinMax_${this.op}_${this.type}`;\n  }\n\n  getUserCode(): string {\n    const getInputShapeLastDim = () => {\n      if (this.inputShape.length === 1) {\n        return 'uniforms.xShape';\n      } else {\n        return `uniforms.xShape.${getCoordsXYZ(this.inputShape.length - 1)}`;\n      }\n    };\n\n    const splitOutputCoords = () => {\n      let snippet = '';\n      if (this.outputShape.length === 1) {\n        if (this.inputShape.length !== 1) {\n          snippet += 'outputCoords,';\n        }\n      } else {\n        for (let i = 0; i < this.outputShape.length; i++) {\n          snippet += `outputCoords.${getCoordsXYZ(i)},`;\n        }\n      }\n      return snippet;\n    };\n\n    if (this.type === 'shared') {\n      const sharedMemorySnippet = `\n      var<workgroup> xBestIndices : array<i32, ${this.workGroupSize[0]}>;\n      var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;\n    `;\n      const userCode = `\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${sharedMemorySnippet}\n\n      ${main('index')} {\n        let outputIndex = index / i32(workGroupSizeX);\n        let reduceLength = ${getInputShapeLastDim()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + i32(workGroupSizeX)) {\n          let candidate = getX(${splitOutputCoords()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), workGroupSizeX);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `;\n      return userCode;\n    } else {\n      const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${splitOutputCoords()} 0);\n          let reduceLength = ${getInputShapeLastDim()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${splitOutputCoords()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `;\n      return userCode;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getWorkGroupSizeString, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class TransposeSharedProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[]};\n  dispatch: [number, number, number];\n  // Note that the maximum number of workgroup invocations by webgpu is 256.\n  workGroupSize: [number, number, number] = [16, 16, 1];\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [0], y: [1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize, [1, 1, 1]);\n\n    this.shaderKey = 'transposeShared';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      const TILE_DIM = ${this.workGroupSize[0]};\n      var<workgroup> tile : array<array<f32, ${this.workGroupSize[0] + 1}>, ${\n        this.workGroupSize[0]}>;\n      ${getWorkGroupSizeString()}\n      fn _start(@builtin(local_invocation_id) localId : vec3<u32>,\n                @builtin(workgroup_id) workgroupId : vec3<u32>) {\n        var x = i32(workgroupId.x) * TILE_DIM + i32(localId.x);\n        var y = i32(workgroupId.y) * TILE_DIM + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = A[y * width + x];\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * TILE_DIM + i32(localId.x);\n        y = i32(workgroupId.x) * TILE_DIM + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransposeProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  shaderKey: string;\n  outputShape: number[];\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  size = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.newDim = newDim;\n    this.shaderKey = `transpose_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let resRC = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${\n        this.outputShape.length}D(\n              ${dtype}(${switched}), uniforms.aShape)]);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = `resRC.${getCoordsXYZ(i)}`;\n  }\n\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Transpose, TransposeAttrs, TransposeInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {transposeImplCPU as cpuTranspose} from '../kernel_utils/shared';\n\nimport {TransposeSharedProgram} from '../transpose_shared_webgpu';\nimport {TransposeProgram} from '../transpose_webgpu';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webgpuBackend = backend;\n\n  const xRank = x.shape.length;\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = webgpuBackend.tensorMap.get(x.dataId);\n    const values = xData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  if (x.shape.length === 2 && util.arraysEqual(perm, [1, 0])) {\n    const program = new TransposeSharedProgram(x.shape, perm);\n    return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n  const program = new TransposeProgram(x.shape, perm);\n  return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: WebGPUBackend, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'max');\n  const uniformData = [{type: 'float32', data: [Number.NEGATIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: WebGPUBackend, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'min');\n  const uniformData = [{type: 'float32', data: [Number.POSITIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const atan2 = binaryKernelFunc({opType: BinaryOpType.ATAN2});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgpu',\n  kernelFunc: atan2\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Pool2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms =\n      `stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,`;\n  // TODO(jiajia.qin@intel.com): Dynamically choose different workGroupSize for\n  // different output shapes.\n  workGroupSize: [number, number, number] = [128, 1, 1];\n  poolType: 'max'|'avg';\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg') {\n    this.outputShape = convInfo.outShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.shaderKey = `pool2D_${poolType}`;\n    this.poolType = poolType;\n  }\n\n  getUserCode(): string {\n    let updateSnippet = `resultValue = max(value, resultValue);`;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue = resultValue + value; count = count + 1.0;`;\n    }\n\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / count`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          var resultValue = ${\n        this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};\n          var count = 0.0;\n\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, coords[3]);\n              ${updateSnippet}\n            }\n          }\n\n          setOutputAtIndex(index, ${returnValue});\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class PoolWithFilterSizeEqualsOneProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = `stride : vec2<i32>,`;\n  workGroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.shaderKey = 'poolWithFilterSizeEqualsOne';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.stride;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  variableNames = ['x'];\n  uniforms = 'reduceSize : i32,';\n  reduceType: 'max'|'mean'|'min'|'prod'|'sum';\n  inputShape: number[];\n  size = true;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'max'|'mean'|'min'|'prod'|'sum') {\n    this.inputShape = [reduceInfo.batchSize, reduceInfo.inSize];\n    const [outputShape, ] =\n        backend_util.computeOutAndReduceShapes(this.inputShape, [1]);\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n    // dispatch size.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n\n    this.reduceType = reduceType;\n    this.shaderKey = `reduce_${reduceType}`;\n  }\n\n  getUserCode(): string {\n    let reduceOp = ``;\n    let initValue = '0.0';\n    if (this.reduceType === 'min' || this.reduceType === 'max') {\n      reduceOp = `\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${\n          this.reduceType === 'min' ? '<' : '>'} bestValue)\n           {  bestValue = candidate; }`;\n      initValue = 'f32(x[offset])';\n    } else if (this.reduceType === 'sum' || this.reduceType === 'mean') {\n      reduceOp = ' bestValue = bestValue + candidate; ';\n    } else if (this.reduceType === 'prod') {\n      reduceOp = ' bestValue = bestValue * candidate; ';\n      initValue = '1.0';\n    }\n\n    const outputSnippet = this.reduceType === 'mean' ?\n        // tslint:disable-next-line:max-line-length\n        `setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));` :\n        `setOutputAtIndex(outputIndex, bestValue);`;\n\n    const sharedMemorySnippet = `\n         var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;\n       `;\n\n    const userCode = `\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${sharedMemorySnippet}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${\n        this.outputShape.length === 1 ?\n            'outputCoords' :\n            'outputCoords[0]'} * uniforms.reduceSize;\n          return offset;\n       }\n       ${main('index')} {\n         let outputIndex = index / i32(workGroupSizeX);\n         let offset = getOffset(outputIndex);\n         var bestValue = ${initValue};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), workGroupSizeX);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + i32(workGroupSizeX)) {\n           let candidate = f32(x[offset + k]);\n           ${reduceOp}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), workGroupSizeX);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${reduceOp}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${outputSnippet}\n        }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {maxImplCPU} from './shared';\nimport {prodImplCPU} from './shared';\nimport {ReduceProgram} from '../reduce_webgpu';\nimport {reshape} from '../kernels/Reshape';\nimport {transpose} from '../kernels/Transpose';\n\ntype ReduceTypes = 'max'|'mean'|'min'|'prod'|'sum';\n\nexport function reduce(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    reduceType: ReduceTypes, backend: WebGPUBackend): TensorInfo {\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n\n  let input = x;\n  if (permutedAxes != null) {\n    input = transpose({inputs: {x}, attrs: {perm: permutedAxes}, backend});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(input);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(reduceType, axes, xRank);\n\n  const [reduceOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, axes);\n  let resOutShape = reduceOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    resOutShape = backend_util.expandShapeToKeepDim(reduceOutShape, origAxes);\n  }\n\n  let res;\n  if ((reduceType === 'max' || reduceType === 'prod') &&\n      backend.shouldExecuteOnCPU([input])) {\n    const xVals = backend.tensorMap.get(input.dataId).values as TypedArray;\n    switch (reduceType) {\n      case 'max':\n        const outValues = maxImplCPU(\n            xVals, util.sizeFromShape(reduceShape), resOutShape, x.dtype);\n        res = backend.makeTensorInfo(resOutShape, x.dtype, outValues);\n        break;\n      case 'prod':\n        const {outVals, outShape, outDtype} =\n            prodImplCPU(input.shape, input.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n        break;\n      default:\n        throw new Error(\n            `${reduceType} CPU implementation is not yet supported.`);\n    }\n  } else {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(input.shape);\n    const batchSize = xSize / inSize;\n\n    const reduceInfo = {windowSize: inSize, inSize, batchSize, outSize: 1};\n    const dtype = reduceType === 'mean' ? 'float32' : sumOutType(x.dtype);\n    const uniformData = [\n      {type: 'int32', data: [inSize]},\n    ];\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const reduced =\n        backend.runWebGPUProgram(program, [input], dtype, uniformData);\n    toDispose.push(reduced);\n\n    res = reshape({inputs: {x: reduced}, attrs: {shape: resOutShape}, backend});\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return res;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: WebGPUBackend, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  return reduce(x, reductionIndices, keepDims, 'max', backend);\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function mean(\n    args: {inputs: MeanInputs, attrs: MeanAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'mean', backend);\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool2DProgram} from '../pool2d_webgpu';\nimport {PoolWithFilterSizeEqualsOneProgram} from '../pool_filtersizeone_webgpu';\n\nimport {identity} from './Identity';\nimport {max} from './Max';\nimport {mean} from './Mean';\nimport {reshape} from './Reshape';\n\ntype PoolType = 'max'|'avg';\nexport function poolImpl(\n    x: TensorInfo, convInfo: backend_util.Conv2DInfo, poolType: PoolType,\n    backend: WebGPUBackend): TensorInfo {\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n\n  if (convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.filterHeight === convInfo.inHeight && convInfo.batchSize === 1 &&\n      convInfo.padInfo.type === 'VALID') {\n    const length = x.shape.length;\n    const reshapeX = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: [\n          x.shape[length - 3] * x.shape[length - 2] /* height * width */,\n          x.shape[length - 1] /* channel */\n        ]\n      }\n    });\n    let reduceX;\n    if (poolType === 'avg') {\n      reduceX = mean(\n          {inputs: {x: reshapeX}, backend, attrs: {axis: 0, keepDims: false}});\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      reduceX = max({\n        inputs: {x: reshapeX},\n        backend,\n        attrs: {reductionIndices: 0, keepDims: false}\n      });\n    }\n\n    const result = reshape(\n        {inputs: {x: reduceX}, backend, attrs: {shape: convInfo.outShape}});\n    backend.disposeData(reshapeX.dataId);\n    backend.disposeData(reduceX.dataId);\n    return result;\n  }\n\n  let program: Pool2DProgram|PoolWithFilterSizeEqualsOneProgram;\n  const dimensions =\n      [{type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1) {\n    program = new PoolWithFilterSizeEqualsOneProgram(convInfo);\n  } else {\n    if (poolType === 'avg') {\n      program = new Pool2DProgram(convInfo, 'avg');\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      program = new Pool2DProgram(convInfo, 'max');\n    }\n\n    dimensions.push(\n        {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        },\n        {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n          type: 'int32',\n          data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x], x.dtype, dimensions);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function avgPool(\n    args: {inputs: AvgPoolInputs, backend: WebGPUBackend, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'avg', backend);\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SliceProgram implements WebGPUProgram {\n  variableNames = ['source'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  rank: number;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  start: number[];\n  size = true;\n\n  constructor(start: number[], destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.start = start;\n    this.uniforms = `start : ${getCoordsDataType(start.length)}, `;\n    this.shaderKey = 'slice';\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getCoords(this.rank);\n    let coordSum;\n    if (this.start.length === 1) {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc = uniforms.start + coords;`;\n      });\n    } else {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc.${coords[i]} = uniforms.start.${\n            getCoordsXYZ(i)} + coords.${coords[i]};`;\n      });\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${dtype};\n          let coords = getCoordsFromIndex(index);\n          ${coordSum.join('\\n')}\n          setOutputAtIndex(index, getSource(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(coord => `sourceLoc.${coord}`).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_webgpu';\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: WebGPUBackend, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xBufferInfo = backend.tensorMap.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xBufferInfo.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // TODO(xing.xu): Add shadow slice support.\n  const program = new SliceProgram($begin, $size);\n  const uniformData = [{type: 'int32', data: $begin}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: WebGPUBackend,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU as cpuNotEqual} from '../kernel_utils/shared';\n\nexport const notEqual = binaryKernelFunc({\n  opType: BinaryOpType.NOT_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuNotEqual\n});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {castImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: WebGPUBackend, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO: Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeData(floatX.dataId);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeData(realPart.dataId);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.tensorMap.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeData(zerosTensorInfo.dataId);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function int(input: TensorInfo, backend: WebGPUBackend): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, UnaryOpType.TO_INT);\n  const output = backend.runWebGPUProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const ceil =\n    unaryKernelFunc({opType: UnaryOpType.CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgpu',\n  kernelFunc: ceil\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 4;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  isVec4 = true;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'clipVec4';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue : vec4<f32>;\n          for (var i = 0; i < 4; i = i + 1) {\n            if (isnan(value[i])) {\n              clampedValue[i] = value[i];\n            } else {\n              clampedValue[i] = clamp(value[i], uniforms.minVal, uniforms.maxVal);\n            }\n          }\n\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  minVal: number;\n  maxVal: number;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.shaderKey = 'clip';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {ClipVec4Program} from '../clip_vec4_webgpu';\nimport {ClipProgram} from '../clip_webgpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: WebGPUBackend,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program: ClipProgram|ClipVec4Program;\n  const uniformData = [\n    {type: 'float32', data: [clipValueMin]},\n    {type: 'float32', data: [clipValueMax]}\n  ];\n  if (util.sizeFromShape(x.shape) % 4 === 0) {\n    program = new ClipVec4Program(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgpu',\n  kernelFunc: clipByValue as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ConcatProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = '';\n  workPerThread = 1;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  offsetLength: number;\n\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape =\n        backend_util.computeOutShape(shapes, 1 /* axis */) as [number, number];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.offsetLength = shapes.length - 1;\n    for (let i = 0; i < this.offsetLength; i++) {\n      this.uniforms += `offset${i} : i32,`;\n    }\n    this.shaderKey = 'concat';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    if (this.offsetLength > 0) {\n      snippets.push(\n          `if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }`);\n      for (let i = 1; i < this.offsetLength; i++) {\n        snippets.push(\n            `else if (yC < uniforms.offset${[i]}){ ` +\n            `setOutputAtCoords(coords.x, coords.y, getT${\n                i}(yR, yC - uniforms.offset${i - 1})); }`);\n      }\n      const lastIndex = this.offsetLength;\n      const lastShiftIndex = this.offsetLength - 1;\n      snippets.push(`else { setOutputAtCoords(coords.x, coords.y, getT${\n          lastIndex}(yR, yC - uniforms.offset${lastShiftIndex})); }`);\n    } else {\n      snippets.push(`setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));`);\n    }\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${snippets.join('\\n        ')}\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ConcatProgram} from '../concat_webgpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeData(r.dataId));\n    imags.forEach(i => backend.disposeData(i.dataId));\n    backend.disposeData(realConcated.dataId);\n    backend.disposeData(imagConcated.dataId);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgpu doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeData(t.dataId));\n\n    return outInfo;\n  }\n\n  // There is a storage buffer limitation in compute stage, one for output so\n  // the maximum for input is limits.maxStorageBuffersPerShaderStage - 1\n  const maxInputNum = backend.device.limits.maxStorageBuffersPerShaderStage - 1;\n  if (inputs.length > maxInputNum) {\n    const reducedInputs = [];\n    for (let i = 0; i < inputs.length; i += maxInputNum) {\n      const subArray = inputs.slice(i, i + maxInputNum);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeData(i.dataId);\n    }\n\n    return result;\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const shapes = (tensors2D).map(t => t.shape as [number, number]);\n  const program = new ConcatProgram(shapes);\n\n  const uniformData: Array<{type: string; data: number[]}> = [];\n  const offsets: number[] = new Array(shapes.length - 1);\n  if (offsets.length > 0) {\n    offsets[0] = shapes[0][1];\n    uniformData.push({type: 'int32', data: [offsets[0]]});\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n      uniformData.push({type: 'int32', data: [offsets[i]]});\n    }\n  }\n\n  const res = backend.runWebGPUProgram(\n      program, tensors2D, tensors2D[0].dtype, uniformData);\n  tensors2D.forEach(r => backend.disposeData(r.dataId));\n\n  const reshapedResult =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n  backend.disposeData(res.dataId);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend) {\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(t => reshape({\n                                 inputs: {x: t},\n                                 backend,\n                                 attrs: {\n                                   shape: [\n                                     util.sizeFromShape(t.shape.slice(0, axis)),\n                                     util.sizeFromShape(t.shape.slice(axis))\n                                   ]\n                                 }\n                               }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args: {inputs: ConcatInputs, attrs: ConcatAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkGroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dCommonSnippet(\n    isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean,\n    fitInner: boolean, addBias = false,\n    activation: backend_util.Activation = null,\n    hasPreluActivationWeights = false, innerElementSizeX = 4,\n    innerElementSizeW = 4, innerElementSize = 4) {\n  const getXSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'resData = x[xIndex];';\n      case 3:\n        return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n      case 4:\n        return 'resData = x[xIndex / 4];';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return W[row * uniforms.wShape[3] + colIn];';\n      case 4:\n        return 'return W[row * uniforms.wShape[3] / 4 + colIn];';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast ? `\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ` :\n                                         `\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      `;\n\n  const coordResSnippet = isChannelsLast ? `\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ` :\n                                           `\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      `;\n\n  const xHight = isChannelsLast ? 'uniforms.xShape[1]' : 'uniforms.xShape[2]';\n  const xWidth = isChannelsLast ? 'uniforms.xShape[2]' : 'uniforms.xShape[3]';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n  const readXSnippet = `\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${col} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n      let xCh = ${col} % inChannels;\n      var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${xHight} && xCol >= 0 && xCol < ${xWidth}) {\n        ${coordASnippet}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${getXSnippet(innerElementSizeX)}\n      }\n      return resData;`;\n\n  const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n      let col = colIn * ${innerElementSizeX};\n      ${readXSnippet}` :\n                                                            `\n      let col = colIn * ${innerElementSizeX};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                   (fitInner && fitBOuter ? `\n      let col = colIn * ${innerElementSizeX};\n      ${readXSnippet}` :\n                                                            `\n      let col = colIn * ${innerElementSizeX};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n  const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n  const resType = typeSnippet(innerElementSize);\n  const aType = isChannelsLast ? typeSnippet(innerElementSizeX) :\n                                 typeSnippet(innerElementSizeW);\n  const bType = isChannelsLast ? typeSnippet(innerElementSizeW) :\n                                 typeSnippet(innerElementSizeX);\n  const userCode = `\n      ${\n      activationFnSnippet(\n          activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n        ${isChannelsLast ? sampleX : sampleW}\n      }\n\n      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n        ${isChannelsLast ? sampleW : sampleX}\n      }\n\n      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n        let col = colIn * ${innerElementSize};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n        ${coordResSnippet}\n        ${biasActivationSnippet(addBias, activation)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`;\n  return userCode;\n}\n\nexport class Conv2DMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableTypes: string[];\n  uniforms =\n      `filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workGroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileAOuter: number;\n  tileBOuter: number;\n  tileInner: number;\n  innerElementSize: number;\n  isVec4?: boolean;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, dimAOuter: number, dimBOuter: number,\n      dimInner: number, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false, sequentialAccessByThreads = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 =\n        (((convInfo.inChannels % 4 === 0 || convInfo.inChannels % 3 === 0) &&\n          this.isChannelsLast) ||\n         (convInfo.outWidth % 4 === 0 && !this.isChannelsLast)) &&\n        convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = this.isChannelsLast ? {x: [3], y: [1, 2], z: [0]} :\n                                                {x: [2, 3], y: [1], z: [0]};\n    this.workGroupSize = computeWorkGroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      if (this.isChannelsLast && convInfo.inChannels % 4 !== 0) {\n        this.innerElementSize = 3;\n        this.variableTypes = ['f32', 'vec4<f32>'];\n      } else {\n        this.innerElementSize = 4;\n        this.variableTypes = ['vec4<f32>', 'vec4<f32>'];\n      }\n\n      if (addBias) {\n        this.variableNames.push('bias');\n        this.variableTypes.push('vec4<f32>');\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n        this.variableTypes.push('vec4<f32>');\n      }\n    } else {\n      this.innerElementSize = this.elementsPerThread[0];\n      if (addBias) {\n        this.variableNames.push('bias');\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n      }\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    this.tileAOuter = this.workGroupSize[1] * this.elementsPerThread[1];\n    this.tileBOuter = this.workGroupSize[0] * this.elementsPerThread[0];\n    this.tileInner = Math.max(\n        this.workGroupSize[0] * this.innerElementSize, this.workGroupSize[1]);\n\n    this.fitAOuter = dimAOuter % this.tileAOuter === 0;\n    this.fitBOuter = dimBOuter % this.tileBOuter === 0;\n    this.fitInner = dimInner % this.tileInner === 0;\n\n    this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${\n        this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${\n        this.innerElementSize}_${this.isChannelsLast}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(\n            this.elementsPerThread, this.workGroupSize, !this.isChannelsLast,\n            this.tileInner) :\n        makeMatMulPackedSource(\n            this.elementsPerThread, this.workGroupSize, !this.isChannelsLast,\n            this.tileInner, false, null, this.sequentialAccessByThreads);\n    const elementsSize =\n        this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];\n    const userCode = `\n    ${\n        conv2dCommonSnippet(\n            this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.addBias, this.activation, this.hasPreluActivationWeights,\n            elementsSize[0], elementsSize[1], elementsSize[2])}\n    ${matMulSource}\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class Conv2DNaiveProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms =\n      'filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>,';\n  workGroupSize: [number, number, number] = [4, 4, 8];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.dispatchLayout = this.isChannelsLast ? {x: [2], y: [1], z: [0, 3]} :\n                                                {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n       ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, false, 4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${\n        this.isChannelsLast ? `vec4<i32>(batch, row, col, chan);` :\n                              `vec4<i32>(batch, chan, row, col);`}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${biasActivationSnippet(this.addBias, this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${main('index')} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast ? `coords[3];` : `coords[1];`}\n         let outRow = ${this.isChannelsLast ? `coords[1];` : `coords[2];`}\n         let outCol = ${this.isChannelsLast ? `coords[2];` : `coords[3];`}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * row - uniforms.pad[0];\n             let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * col - uniforms.pad[1];\n             for (var xChannel = 0; xChannel < ${\n        this.isChannelsLast ? `uniforms.xShape[3];` :\n                              `uniforms.xShape[1];`} xChannel = xChannel + 1) {\n               ${\n        this.isChannelsLast ? `let v = readInp(batch, xRow, xCol, xChannel);` :\n                              `let v = readInp(batch, xChannel, xRow, xCol);`}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DMMProgram} from '../conv2d_mm_webgpu';\nimport {Conv2DNaiveProgram} from '../conv2d_naive_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\n\nimport {batchMatMulImpl} from './BatchMatMul_impl';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// conv2dByMatMul fuses height and width into one dimension to compute\n// batchMatMul, so bias and activation weights are also supposed to fuse the two\n// dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nfunction conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const intermediates: TensorInfo[] = [];\n  let xReshaped;\n  let filterReshaped;\n\n  if (sameSize) {\n    const sharedDim =\n        convInfo.inHeight * convInfo.inWidth * convInfo.inChannels;\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, convInfo.batchSize, sharedDim]}\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, sharedDim, convInfo.outChannels]}\n    });\n  } else {\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [\n              convInfo.batchSize, convInfo.inHeight * convInfo.inWidth,\n              convInfo.inChannels\n            ] :\n            [\n              convInfo.batchSize, convInfo.inChannels,\n              convInfo.inHeight * convInfo.inWidth\n            ]\n      }\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n  }\n  intermediates.push(xReshaped);\n  intermediates.push(filterReshaped);\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? xReshaped : filterReshaped,\n    b: isChannelsLast ? filterReshaped : xReshaped,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape(\n      {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n  intermediates.push(result);\n\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n\n  return out;\n}\n\nexport function conv2DImpl({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const useNaiveConv2d = env().getBool('WEBGPU_USE_NAIVE_CONV2D_DEBUG');\n\n  if (!useNaiveConv2d &&\n      (sameSize ||\n       (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')))) {\n    return conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  }\n\n  let program: WebGPUProgram;\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n  if (useNaiveConv2d) {\n    program = new Conv2DNaiveProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n  } else {\n    const dimAOuter = isChannelsLast ? convInfo.outHeight * convInfo.outWidth :\n                                       convInfo.outChannels;\n    const dimBOuter = isChannelsLast ? convInfo.outChannels :\n                                       convInfo.outHeight * convInfo.outWidth;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.inChannels;\n    dimensions.push(\n        {type: 'int32', data: [dimAOuter]}, {type: 'int32', data: [dimBOuter]},\n        {type: 'int32', data: [dimInner]});\n\n    // Experiments show that sequential access is more friendly for Intel GPUs.\n    const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n    program = new Conv2DMMProgram(\n        convInfo, dimAOuter, dimBOuter, dimInner, hasBias, activation,\n        hasPreluActivationWeights, sequentialAccessByThreads);\n  }\n\n  const intermediates: TensorInfo[] = [];\n  const inputVar: TensorInfo[] = [x, filter];\n  if (hasBias) {\n    if (!isChannelsLast && bias.shape.length === 1) {\n      bias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      intermediates.push(bias);\n    }\n    inputVar.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    if (!isChannelsLast && preluActivationWeights.shape.length === 1) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n    inputVar.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const out = backend.runWebGPUProgram(program, inputVar, x.dtype, dimensions);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function conv2d(\n    args: {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: WebGPUBackend}) {\n  const {inputs, attrs, backend} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  return conv2DImpl({x, filter, convInfo, backend});\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgpu',\n  kernelFunc: conv2d as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {typeSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkGroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dTransposeCommonSnippet(innerElementSize = 4) {\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return W[getIndexFromCoords4D(coord, uniforms.wShape)];';\n      case 4:\n        return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n\n  const readASnippet = `\n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${\n      innerElementSize}];`;\n\n  const sampleA = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readASnippet}\n      }\n      return ${typeSnippet(innerElementSize)}(0.0);`;\n\n  const userCode = `\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    let col = colIn * ${innerElementSize};\n    ${sampleA}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    let col = colIn * ${innerElementSize};\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${getWSnippet(innerElementSize)}\n    }\n    return ${typeSnippet(innerElementSize)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${\n      typeSnippet(innerElementSize)}) {\n    let col = colIn * ${innerElementSize};\n    if (row < uniforms.dimAOuter && (col + ${\n      innerElementSize - 1}) < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${\n      innerElementSize}] = value;\n    }\n  }`;\n  return userCode;\n}\n\nexport class Conv2DDerInputMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableTypes: string[];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,';\n  workGroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  isVec4?: boolean;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n    this.isVec4 =\n        convInfo.inChannels % 4 === 0 && convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = {x: [3], y: [1, 2], z: [0]};\n    this.workGroupSize = computeWorkGroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      this.variableTypes = ['vec4<f32>', 'f32'];\n    }\n\n    this.shaderKey =\n        `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(this.elementsPerThread, this.workGroupSize) :\n        makeMatMulPackedSource(this.elementsPerThread, this.workGroupSize);\n    const userCode = `\n    ${conv2dTransposeCommonSnippet(this.isVec4 ? 4 : 1)}\n    ${matMulSource}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Conv2DDerInputProgram implements WebGPUProgram {\n  variableNames = ['dy', 'W'];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.shaderKey = `conv2DDerInput_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n    const channelDim = this.isChannelsLast ? 3 : 1;\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${channelDim}];\n\n        let dyCorner = vec2<i32>(coords[${rowDim}], coords[${\n        colDim}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              if (${this.isChannelsLast}) {\n                let xValue = getDy(batch, idyR, idyC, d2);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              } else {\n                let xValue = getDy(batch, d2, idyR, idyC);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerInputMMProgram} from '../conv_backprop_mm_webgpu';\nimport {Conv2DDerInputProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.batchSize, convInfo.outHeight, convInfo.outWidth,\n        convInfo.outChannels\n      ]\n    },\n  ];\n  let program: Conv2DDerInputProgram|Conv2DDerInputMMProgram;\n  // When filter size is small, Conv2DDerInputProgram is much faster than\n  // Conv2DDerInputMMProgram.\n  if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') ||\n      convInfo.filterHeight <= 2 && convInfo.filterWidth <= 2 &&\n          convInfo.outChannels <= 16 && convInfo.inChannels === 1) {\n    program = new Conv2DDerInputProgram(convInfo);\n  } else {\n    program = new Conv2DDerInputMMProgram(convInfo);\n    const dimAOuter = convInfo.inHeight * convInfo.inWidth;\n    const dimBOuter = convInfo.inChannels;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;\n    dimensions.push(\n        {type: 'uint32', data: [dimAOuter]},\n        {type: 'uint32', data: [dimBOuter]},\n        {type: 'uint32', data: [dimInner]});\n  }\n  return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cos = unaryKernelFunc({opType: UnaryOpType.COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgpu',\n  kernelFunc: cos\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cosh = unaryKernelFunc({opType: UnaryOpType.COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgpu',\n  kernelFunc: cosh\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class CropAndResizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  uniforms = 'extrapolationValue : f32,';\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  methodId: number;\n  cropHeightBiggerThan1: boolean;\n  cropWidthBiggerThan1: boolean;\n  size = true;\n\n  constructor(\n      channnel: number, boxShape: [number, number], cropSize: [number, number],\n      method: 'bilinear'|'nearest') {\n    const [numBoxes, ] = boxShape;\n    this.outputShape = [numBoxes, cropSize[0], cropSize[1], channnel];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.methodId = method === 'bilinear' ? 1 : 0;\n    this.cropHeightBiggerThan1 = this.outputShape[1] > 1;\n    this.cropWidthBiggerThan1 = this.outputShape[2] > 1;\n    this.shaderKey = `cropAndResize_${this.methodId}_${\n        this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;\n  }\n\n  getUserCode(): string {\n    const [inputHeightFloat, inputWidthFloat] =\n        [`f32(uniforms.imageShape[1] - 1)`, `f32(uniforms.imageShape[2] - 1)`];\n\n    const [heightRatio, heightScale, inY] = this.cropHeightBiggerThan1 ?\n        [\n          `(${inputHeightFloat} / f32(uniforms.outShape[1] - 1))`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + f32(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = this.cropWidthBiggerThan1 ?\n        [\n          `(${inputWidthFloat} / f32(uniforms.outShape[2] - 1))`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + f32(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${heightRatio});\n        let width_ratio = f32(${widthRatio});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${heightScale};\n        let width_scale = ${widthScale};\n        let in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CropAndResizeProgram} from '../crop_and_resize_webgpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: WebGPUBackend,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape[3], boxes.shape as [number, number], cropSize, method);\n  const uniformData = [{type: 'float32', data: [extrapolationValue]}];\n  return backend.runWebGPUProgram(\n      program, [image, boxes, boxInd], 'float32', uniformData);\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workGroupSize: [number, number, number];\n  // pow(i32, i32) is not supported, use pow(f32, f32) instead.\n  uniforms = 'index : f32,';\n  size = true;\n  exclusive: boolean;\n  reverse: boolean;\n  op: CumOpType;\n\n  constructor(\n      op: CumOpType, shape: number[], exclusive: boolean, reverse: boolean) {\n    const workGroupSizeX = 128;\n    this.workGroupSize = [workGroupSizeX, 1, 1];\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.exclusive = exclusive;\n    this.reverse = reverse;\n    this.op = op;\n    this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = this.exclusive ? initVal :\n                                 `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (this.exclusive) {\n      condition = this.reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = this.reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = this.reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (this.reverse ? 'end + pow2' : 'end - pow2');\n    }\n    return `\n      ${main('index')} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${getFinalCoord(rank, 'coords', this.op)};\n         var val = ${val};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${condition}) {\n           let idx = ${idxString};\n           ${getFinalCoord(rank, 'coords', this.op)} = idx;\n           val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType, CumProgram} from '../cum_webgpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: WebGPUBackend, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGPU cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [i]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [0]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeData(result.dataId);\n    backend.disposeData(permutedX.dataId);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: WebGPUBackend, attrs: CumprodAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgpu',\n  kernelFunc: cumprod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: WebGPUBackend, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthToSpaceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  dataFormat: string;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  uniforms = 'blockSize : i32,';\n\n  constructor(outputShape: number[], dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.shaderKey = `depthToSpace_${dataFormat}`;\n    this.dataFormat = dataFormat;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`;\n    return userCode;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `uniforms.outShape[3]`;\n    } else {\n      return `uniforms.outShape[1]`;\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthToSpaceProgram} from '../depth_to_space_webgpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: WebGPUBackend,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const uniformData = [\n    {type: 'int32', data: [blockSize]},\n  ];\n\n  const program = new DepthToSpaceProgram(outputShape, dataFormat);\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getWorkGroupSizeString, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class DepthwiseConv2DNCHWSharedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pad : vec2<i32>, inDims : vec2<i32>,`;\n  workGroupSize: [number, number, number] = [16, 16, 1];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  filterHeight: number;\n  filterWidth: number;\n\n  constructor(\n      outputShape: number[], filterHeight: number, filterWidth: number,\n      addBias = false, activation: backend_util.Activation = null,\n      hasPreluActivation = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.filterHeight = filterHeight;\n    this.filterWidth = filterWidth;\n    this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${\n        this.filterWidth}`;\n  }\n\n  getUserCode(): string {\n    const filterSize = this.filterWidth * this.filterHeight;\n    const workGroupSize =\n        this.workGroupSize[0] * this.workGroupSize[1] * this.workGroupSize[2];\n    const tileAHeight = this.workGroupSize[1] + this.filterHeight - 1;\n    const tileAWidth = this.workGroupSize[0] + this.filterWidth - 1;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHeight}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${\n        this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${getWorkGroupSizeString()}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(num_workgroups) NumWorkgroups: vec3<u32>) {\n        localId = LocalId;\n        globalId = GlobalId;\n        let localIndex = i32(LocalIndex);\n        numWorkgroups = NumWorkgroups;\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${\n        tileAHeight}; inputRow = inputRow + ${this.workGroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n        tileAWidth}; inputCol = inputCol + ${this.workGroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = localIndex;\n        ${\n        filterSize < workGroupSize ?\n            `if (wIndex < ${filterSize})` :\n            `for(; wIndex < ${filterSize}; wIndex = wIndex + ${workGroupSize})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getWorkGroupSizeString, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class DepthwiseConv2DVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = 'pad : vec2<i32>, inDims : vec2<i32>,';\n  workGroupSize: [number, number, number] = [4, 4, 4];\n  workPerThread = 4;\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  isVec4 = true;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [4, this.workPerThread, 1]);\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n\n    this.shaderKey =\n        `depthwiseVec4_${activation}_${this.convInfo.filterHeight}_${\n            this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${\n            this.convInfo.strideWidth}_${this.workPerThread}`;\n  }\n\n  getUserCode(): string {\n    const xNumber = (this.workPerThread - 1) * this.convInfo.strideWidth +\n        this.convInfo.filterWidth;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, true, 4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      const strideHeight = ${this.convInfo.strideHeight};\n      const strideWidth = ${this.convInfo.strideWidth};\n      ${getWorkGroupSizeString()}\n      fn _start(@builtin(global_invocation_id) globalId: vec3<u32>) {\n        let batch = i32(globalId.z) / uniforms.outShape[1];\n        let r = i32(globalId.z) % uniforms.outShape[1];\n        let c = i32(globalId.y) * ${this.workPerThread};\n        let d1 = i32(globalId.x) * 4;\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(strideHeight, strideWidth) - uniforms.pad;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${xNumber}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${xNumber}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * strideWidth + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${biasActivationSnippet(this.addBias, this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,`;\n  // This is an experimental value.\n  workGroupSize: [number, number, number] = [256, 1, 1];\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  isChannelsLast: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xR, xC, d1);' :\n                                              'getX(batch, d1, xR, xC);';\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      ${main()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.${\n        this.isChannelsLast ? 'yz' : 'zw'}) * uniforms.stride - uniforms.pad;\n        let d2 = coords[${this.isChannelsLast ? 3 : 1}];\n        let channelMul = uniforms.wShape[3];\n        let d1 = d2 / channelMul;\n        let q = d2 % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n        let inputRowEnd = inputRowStart + uniforms.filterHeight *\n            uniforms.dilation[0];\n        let inputColEnd = inputColStart + uniforms.filterWidth *\n            uniforms.dilation[1];\n\n        // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n        // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n        // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n        // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n        var value = 0.0;\n\n        // Extract if checking out of for loop for performance.\n        if (inputRowStart >= 0 && inputColStart >= 0 &&\n          inputRowEnd < uniforms.inDims[0] &&\n              inputColEnd < uniforms.inDims[1]) {\n            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n              let xR = inputRowStart + wR * uniforms.dilation[0];\n\n              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                let xC = inputColStart + wC * uniforms.dilation[1];\n\n                let xVal = ${getXSnippet};\n                let wVal = getW(wR, wC, d1, q);\n                value = value + xVal * wVal;\n              }\n            }\n          } else {\n            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n              let xR = inputRowStart + wR * uniforms.dilation[0];\n\n              if (xR < 0 || xR >= uniforms.inDims[0]) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                let xC = inputColStart + wC * uniforms.dilation[1];\n\n                if (xC < 0 || xC >= uniforms.inDims[1]) {\n                  continue;\n                }\n\n                let xVal = ${getXSnippet};\n                let wVal = getW(wR, wC, d1, q);\n                value = value + xVal * wVal;\n              }\n            }\n          }\n          ${biasActivationSnippet(this.addBias, this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DNCHWSharedProgram} from '../depthwise_conv2d_nchw_shared_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */, $dataFormat);\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program|\n      DepthwiseConv2DNCHWSharedProgram;\n  if (!isChannelsLast && convInfo.inHeight > 16 && convInfo.inWidth > 16 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      convInfo.dilationWidth === 1 && convInfo.dilationHeight === 1 &&\n      convInfo.inChannels === convInfo.outChannels) {\n    program = new DepthwiseConv2DNCHWSharedProgram(\n        convInfo.outShape, convInfo.filterHeight, convInfo.filterWidth);\n  } else if (\n      isChannelsLast && convInfo.inHeight > 4 && convInfo.inWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x, filter], x.dtype, dimensions);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nexport const multiplyKernelFunc = binaryKernelFunc({\n  opType: BinaryOpType.MUL,\n  cpuKernelImpl: cpuMultiply,\n  supportsComplex: true\n});\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgpu',\n  kernelFunc: multiplyKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: WebGPUBackend, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'sum', backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {multiplyKernelFunc} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: WebGPUBackend, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out =\n            multiplyKernelFunc({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeData(tensorInfo.dataId);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const elu = unaryKernelFunc({opType: UnaryOpType.ELU});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgpu',\n  kernelFunc: elu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU as cpuEqual} from '../kernel_utils/shared';\n\nexport const equal = binaryKernelFunc(\n    {opType: BinaryOpType.EQUAL, dtype: 'bool', cpuKernelImpl: cpuEqual});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const exp = unaryKernelFunc({\n  opType: UnaryOpType.EXP,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgpu',\n  kernelFunc: exp\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgpu',\n  kernelFunc: expandDims as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const expm1 =\n    unaryKernelFunc({opType: UnaryOpType.EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgpu',\n  kernelFunc: expm1\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FlipLeftRightProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(imageShape: [number, number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.shaderKey = 'flipLeftRight';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FlipLeftRightProgram} from '../flip_left_right_webgpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, backend}) => {\n      const {image} = inputs as FlipLeftRightInputs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n      const output =\n          webgpuBackend.runWebGPUProgram(program, [image], image.dtype);\n      return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const floor =\n    unaryKernelFunc({opType: UnaryOpType.FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgpu',\n  kernelFunc: floor\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const floorDiv =\n    binaryKernelFunc({opType: BinaryOpType.INT_DIV, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FromPixelsProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  isFromPixels = true;\n  outputShape: number[] = [0];\n  shaderKey: string;\n  importVideo: boolean;\n  variableNames: string[] = [];\n  workGroupSize: [number, number, number] =\n      [256, 1, 1];  // The empirical value.\n\n  constructor(outputShape: number[], numChannels: number, importVideo = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [numChannels, 1, 1]);\n\n    this.importVideo = importVideo;\n    this.shaderKey = `fromPixels_${this.importVideo}`;\n  }\n\n  getUserCode(): string {\n    const textureLoad = this.importVideo ?\n        'textureLoad(src, vec2<i32>(coords.yx));' :\n        'textureLoad(src, vec2<i32>(coords.yx), 0)';\n    const textureType =\n        this.importVideo ? 'texture_external' : 'texture_2d<f32>';\n    return `\n      @binding(1) @group(0) var src: ${textureType};\n      ${main('index')} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${textureLoad};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs, util} from '@tensorflow/tfjs-core';\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {TextureInfo, WebGPUBackend} from '../backend_webgpu';\nimport {FromPixelsProgram} from '../from_pixels_webgpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgpu',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\nconst videoToTextureMap = new Map<object, object>();\n\nexport function fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: WebGPUBackend,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const isCanvas = (typeof (HTMLCanvasElement) !== 'undefined' &&\n                    pixels instanceof HTMLCanvasElement) ||\n      (typeof (OffscreenCanvas) !== 'undefined' &&\n       pixels instanceof OffscreenCanvas);\n  const isImageBitmap =\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap;\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  const outputShape = [height, width, numChannels];\n\n  // Disable importExternalTexture temporarily as it has problem in spec and\n  // browser impl\n  const importVideo =\n      false && env().getBool('WEBGPU_IMPORT_EXTERNAL_TEXTURE') && isVideo;\n  const isVideoOrImage = isVideo || isImage;\n  if (isImageBitmap || isCanvas || isVideoOrImage) {\n    let textureInfo: TextureInfo;\n    if (importVideo) {\n      const videoElement = pixels as HTMLVideoElement;\n      if (!(videoToTextureMap.has(videoElement)) ||\n          (videoToTextureMap.get(videoElement) as GPUExternalTexture).expired) {\n        const externalTextureDescriptor = {source: videoElement};\n        videoToTextureMap.set(\n            videoElement,\n            backend.device.importExternalTexture(externalTextureDescriptor));\n      }\n\n      textureInfo = {\n        width,\n        height,\n        format: null,\n        usage: null,\n        texture: videoToTextureMap.get(videoElement) as GPUExternalTexture\n      };\n    } else {\n      if (isVideoOrImage) {\n        const newWillReadFrequently =\n            env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n        if (fromPixels2DContext == null ||\n            newWillReadFrequently !== willReadFrequently) {\n          willReadFrequently = newWillReadFrequently;\n          fromPixels2DContext =\n              document.createElement('canvas').getContext(\n                  '2d', {willReadFrequently}) as CanvasRenderingContext2D;\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(\n            pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n      }\n\n      const usage = GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING;\n      const format = 'rgba8unorm' as GPUTextureFormat;\n      const texture = backend.textureManager.acquireTexture(\n          outputShape[1], outputShape[0], format, usage);\n      backend.queue.copyExternalImageToTexture(\n          {source: pixels as HTMLCanvasElement | ImageBitmap}, {texture},\n          [outputShape[1], outputShape[0]]);\n      textureInfo = {width, height, format, usage, texture};\n    }\n\n    const size = util.sizeFromShape(outputShape);\n    const strides = util.computeStrides(outputShape);\n    const program =\n        new FromPixelsProgram(outputShape, numChannels, importVideo);\n\n    const uniformData = [\n      {type: 'uint32', data: [size]}, {type: 'uint32', data: [numChannels]},\n      {type: 'uint32', data: [...strides]}\n    ];\n    const input = backend.makeTensorInfo([height, width], 'int32');\n    const info = backend.tensorMap.get(input.dataId);\n    info.resourceInfo = textureInfo;\n\n    const result =\n        backend.runWebGPUProgram(program, [input], 'int32', uniformData);\n    backend.disposeData(input.dataId);\n    return result;\n  }\n\n  // TODO: Encoding should happen on GPU once we no longer have to download\n  // image data to the CPU.\n  const imageData = (pixels as ImageData | backend_util.PixelData).data;\n  let pixelArray = imageData;\n  if (numChannels != null && numChannels !== 4) {\n    pixelArray = new Uint8Array(pixels.width * pixels.height * numChannels);\n\n    const dataLength = imageData.length;\n    let j = 0;\n    for (let i = 0; i < dataLength; i++) {\n      if (i % 4 < numChannels) {\n        pixelArray[j++] = imageData[i];\n      }\n    }\n  }\n\n  const output =\n      backend.makeTensorInfo(outputShape, 'int32', new Int32Array(pixelArray));\n  backend.uploadToGPU(output.dataId);\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BatchNormProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = 'varianceEpsilon : f32,';\n  // This is an experimental value.\n  workGroupSize: [number, number, number] = [128, 1, 1];\n  offsetShape: number[]|null;\n  scaleShape: number[]|null;\n  varianceEpsilon: number;\n  size = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n    }\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n    }\n    this.offsetShape = offsetShape;\n    this.scaleShape = scaleShape;\n    this.shaderKey = 'batchNorm';\n  }\n\n  getUserCode(): string {\n    let offsetSnippet = '0.0';\n    if (this.offsetShape != null) {\n      offsetSnippet = 'getOffsetByOutputIndex(index)';\n    }\n\n    let scaleSnippet = '1.0';\n    if (this.scaleShape != null) {\n      scaleSnippet = 'getScaleByOutputIndex(index)';\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${offsetSnippet};\n          let scaleValue = ${scaleSnippet};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, Tensor} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BatchNormProgram} from '../batchnorm_webgpu';\n\nexport const fusedBatchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x, scale, offset, mean, variance} = inputs as FusedBatchNormInputs;\n    const {varianceEpsilon} = attrs as unknown as FusedBatchNormAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const batchNormInputs = [x as Tensor, mean as Tensor, variance as Tensor];\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      batchNormInputs.push(offset as Tensor);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      batchNormInputs.push(scale as Tensor);\n    }\n    const program = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape);\n    const uniformData = [{type: 'float32', data: [varianceEpsilon]}];\n    return webGPUBackend.runWebGPUProgram(\n        program, batchNormInputs, x.dtype, uniformData);\n  }\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  return conv2DImpl({\n    x,\n    filter,\n    convInfo,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program;\n  if (convInfo.inHeight > 4 && convInfo.inWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const result =\n      backend.runWebGPUProgram(program, programInputs, 'float32', dimensions);\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherNDProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  uniforms: string;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  sliceDim: number;\n  constructor(sliceDim: number, shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.shaderKey = `gathernd_${sliceDim}`;\n    this.sliceDim = sliceDim;\n    this.uniforms = `sliceDim : i32, strides : ${getCoordsDataType(sliceDim)},`;\n  }\n\n  getUserCode(): string {\n    let strideString;\n    if (this.sliceDim > 1) {\n      strideString = 'uniforms.strides[j]';\n    } else {\n      strideString = 'uniforms.strides';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${strideString};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherNDProgram} from '../gather_nd_webgpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, [numSlices, sliceSize]);\n  const uniformData =\n      [{type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides}];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype, uniformData);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  aShape: number[];\n  size = true;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = aShape.slice();\n    this.aShape = aShape;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.shaderKey = `gather`;\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.aShape);\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[]): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('indexZ');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, Rank, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {GatherProgram} from '../gather_webgpu';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(\n    args:\n        {inputs: GatherV2Inputs, backend: WebGPUBackend, attrs: GatherV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  // Unlike WebGL, WebGPU won't check if index is out of bound by calling\n  // backend.readSync() function in debug mode.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices])) {\n    const indicesBufferInfo = backend.tensorMap.get(flattenIndex.dataId);\n    const indicesValues = indicesBufferInfo.values as TypedArray;\n    const indicesBuf =\n        buffer(flattenIndex.shape, flattenIndex.dtype, indicesValues) as\n        TensorBuffer<Rank>;\n    const xBufferInfo = backend.tensorMap.get(flattenX.dataId);\n    const xValues = xBufferInfo.values as TypedArray;\n    const xBuf =\n        buffer(flattenX.shape, flattenX.dtype, xValues) as TensorBuffer<Rank>;\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeData(t.dataId));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU as cpuGreater} from '../kernel_utils/shared';\n\nexport const greater = binaryKernelFunc({\n  opType: BinaryOpType.GREATER,\n  cpuKernelImpl: cpuGreater,\n  dtype: 'bool',\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU as cpuGreaterEqual} from '../kernel_utils/shared';\n\nexport const greaterEqual = binaryKernelFunc({\n  opType: BinaryOpType.GREATER_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuGreaterEqual\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isNaN =\n    unaryKernelFunc({opType: UnaryOpType.IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgpu',\n  kernelFunc: isNaN\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: WebGPUBackend,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n  const uniformData = [{type: 'float32', data: [alpha]}];\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.LEAKYRELU);\n  program.uniforms = 'alpha : f32,';\n  return backend.runWebGPUProgram(program, [x], 'float32', uniformData);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU as cpuLess} from '../kernel_utils/shared';\n\nexport const less = binaryKernelFunc(\n    {opType: BinaryOpType.LESS, dtype: 'bool', cpuKernelImpl: cpuLess});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU as cpuLessEqual} from '../kernel_utils/shared';\n\nexport const lessEqual = binaryKernelFunc({\n  opType: BinaryOpType.LESS_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuLessEqual\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const log =\n    unaryKernelFunc({opType: UnaryOpType.LOG, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgpu',\n  kernelFunc: log\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const logicalAnd =\n    binaryKernelFunc({opType: BinaryOpType.LOGICAL_AND, dtype: 'bool'});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const logicalNot = unaryKernelFunc({opType: UnaryOpType.LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgpu',\n  kernelFunc: logicalNot\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU as cpuMaximum} from '../kernel_utils/shared';\n\nexport const maximum = binaryKernelFunc({\n  opType: BinaryOpType.MAX,\n  cpuKernelImpl: cpuMaximum,\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function maxPool(\n    args: {inputs: MaxPoolInputs, backend: WebGPUBackend, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'max', backend);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function min(\n    args: {inputs: MinInputs, backend: WebGPUBackend, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'min', backend);\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU as cpuMinimum} from '../kernel_utils/shared';\n\nexport const minimum = binaryKernelFunc({\n  opType: BinaryOpType.MIN,\n  cpuKernelImpl: cpuMinimum,\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MirrorPadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  offset: number;\n  size = true;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.xShape = xShape;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.offset = mode === 'reflect' ? 0 : 1;\n    this.shaderKey = `mirrorPad_${mode}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.xShape.length;\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape\n                    .map(\n                        (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                            rank > 1 ? `[${i}]` : ''}`)\n                    .join(',');\n\n    const shaderStart = rank === 1 ? 'start' : 'start[i]';\n    const shaderEnd = rank === 1 ? 'end' : 'end[i]';\n    const shaderOutC = rank === 1 ? 'outC' : 'outC[i]';\n    const dtype = getCoordsDataType(rank);\n    const unpackedCoords = rank > 1 ?\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n        'coords';\n\n    return `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${dtype}(${start});\n          let end = ${dtype}(${end});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${rank}; i = i + 1) {\n            if (${shaderOutC} < ${shaderStart}) {\n              ${shaderOutC} = ${shaderStart} * 2 - ${shaderOutC} - ${\n        this.offset};\n            } else if(${shaderOutC} >= ${shaderEnd}) {\n              ${shaderOutC} = (${shaderEnd} - 1) * 2 - ${shaderOutC} + ${\n        this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {MirrorPadProgram} from '../mirror_pad_webgpu';\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MirrorPadInputs;\n    const {paddings, mode} = attrs as unknown as MirrorPadAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n\n    const uniformData = paddings.map(p => {\n      return {type: 'int32', data: [p[0], p[1]]};\n    });\n    const program = new MirrorPadProgram(x.shape, paddings, mode);\n    const output =\n        webGPUBackend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {negImplCPU} from '../kernel_utils/shared';\n\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.tensorMap.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.NEG);\n\n  return backend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = kernel_impls.nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} =\n      kernel_impls.nonMaxSuppressionV5Impl(\n          boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n          scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: WebGPUBackend, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class PadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'constantValue : f32,';\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  size = true;\n\n  constructor(xShape: number[], paddings: Array<[number, number]>) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.xShape = xShape;\n    this.shaderKey = 'pad';\n  }\n\n  getUserCode(): string {\n    const rank = this.xShape.length;\n    const type = getCoordsDataType(rank);\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape\n                    .map(\n                        (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                            rank > 1 ? `[${i}]` : ''}`)\n                    .join(',');\n    const startValue = rank > 1 ? `${type}(${start})` : `${start}`;\n    const endValue = rank > 1 ? `${type}(${end})` : `${end}`;\n\n    const leftPadCondition = rank > 1 ? `any(outC < start)` : `outC < start`;\n    const rightPadCondition = rank > 1 ? `any(outC >= end)` : `outC >= end`;\n\n    const unpackedCoords = rank > 1 ?\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n        'coords';\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${startValue};\n          let end = ${endValue};\n          let outC = getCoordsFromIndex(index);\n\n          if (${leftPadCondition} || ${rightPadCondition}) {\n            setOutputAtIndex(index, uniforms.constantValue);\n          } else {\n            let coords = outC - start;\n            setOutputAtIndex(index, getX(${unpackedCoords}));\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\nimport {PadProgram} from '../pad_webgpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs,\n            backend: WebGPUBackend,\n            attrs: PadV2Attrs}): TensorInfo => {\n      const {inputs, backend, attrs} = args;\n      const {x} = inputs;\n      const {paddings, constantValue} = attrs;\n      if (paddings.every(p => util.arraysEqual(p, [0, 0]))) {\n        return identity({inputs: {x}, backend});\n      }\n      if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map(\n            (p, i) =>\n                p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n          backend,\n          attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n        });\n      }\n      const uniformData = [{type: 'float32', data: [constantValue]}];\n      paddings.map(p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n      const program = new PadProgram(x.shape, paddings);\n      return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n    };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const pow = binaryKernelFunc({\n  opType: BinaryOpType.POW,\n});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\n\nexport function prelu(args: {inputs: PreluInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = new BinaryOpProgram(BinaryOpType.PRELU, x.shape, alpha.shape);\n  return backend.runWebGPUProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgpu',\n  kernelFunc: prelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: WebGPUBackend, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'prod', backend);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: WebGPUBackend, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const realDiv = binaryKernelFunc({opType: BinaryOpType.DIV});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgpu',\n  kernelFunc: realDiv as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const reciprocal = unaryKernelFunc({opType: UnaryOpType.RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgpu',\n  kernelFunc: reciprocal\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu = unaryKernelFunc({opType: UnaryOpType.RELU});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgpu',\n  kernelFunc: relu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu6 = unaryKernelFunc({opType: UnaryOpType.RELU6});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgpu',\n  kernelFunc: relu6\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeBilinearProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,';\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.shaderKey = `resizeBilinear`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeBilinearProgram} from '../resize_bilinear_webgpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, size, halfPixelCenters} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  const halfPixelCentersValue = halfPixelCenters ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [halfPixelCentersValue]}\n  ];\n\n  const program = new ResizeBilinearProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth);\n\n  return backend.runWebGPUProgram(program, [images], 'float32', uniformData);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeNearestNeighborProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, roundBase : f32,';\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  halfPixelCenters: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, halfPixelCenters: boolean) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.halfPixelCenters = halfPixelCenters;\n    this.shaderKey = `resizeNearest_${halfPixelCenters}`;\n  }\n\n  getUserCode(): string {\n    let sourceFracIndexRC: string;\n    if (this.halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2<f32>(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2<f32>(rc) * effectiveInputOverOutputRatioRC`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${sourceFracIndexRC};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_webgpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  // When align corners is false, we rounds the value with floor.\n  const roundBase = alignCorners ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [roundBase]}\n  ];\n\n  const program = new ResizeNearestNeighborProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth,\n      halfPixelCenters);\n  return backend.runWebGPUProgram(program, [images], images.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class RotateProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms: string;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  fillSnippet: string;\n  size = true;\n\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,`;\n    this.shaderKey = 'rotate';\n    this.outputShape = imageShape;\n\n    if (typeof fillValue === 'number') {\n      this.uniforms += ` fillValue : f32,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue;`;\n      this.shaderKey += '_float';\n    } else {\n      this.uniforms += ` fillValue : vec3<f32>,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue[coords[3]];`;\n      this.shaderKey += '_vec3';\n    }\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {RotateProgram} from '../rotate_webgpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, attrs, backend}) => {\n      const {image} = inputs as RotateWithOffsetInputs;\n      const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n      const [centerX, centerY] =\n          backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n      const uniformData = [\n            {type: 'float32', data: [centerX]},\n            {type: 'float32', data: [centerY]},\n            {type: 'float32', data: [Math.sin(radians)]},\n            {type: 'float32', data: [Math.cos(radians)]}\n          ];\n\n      if (typeof fillValue === 'number') {\n        uniformData.push(\n            {type: 'float32', data: [Number.parseFloat(fillValue.toFixed(2))]});\n      } else {\n        uniformData.push({type: 'float32', data: fillValue});\n      }\n\n      const output = webgpuBackend.runWebGPUProgram(\n          program, [image], image.dtype, uniformData);\n      return output;\n   }\n };\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const rsqrt =\n    unaryKernelFunc({opType: UnaryOpType.RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgpu',\n  kernelFunc: rsqrt\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\nimport {getCoordsDataType, getMainHeaderString as main, mapToWgslTypes, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ScatterProgram implements WebGPUProgram {\n  variableNames = ['updates', 'indices'];\n  uniforms: string;\n  outputShape: number[];\n  sumDupeIndices: boolean;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  updatesRank: number;\n  indicesRank: number;\n  sliceDimGreaterThanOne: boolean;\n  atomic = true;\n  type: DataType;\n\n  constructor(\n      flattenXShape: number[], sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      outputDtype: DataType, sumDupeIndices = true) {\n    this.outputShape = shape;\n    this.type = outputDtype;\n    this.sumDupeIndices = sumDupeIndices;\n    this.dispatchLayout = flatDispatchLayout(flattenXShape);\n    // Dispatching based on |updates| shape instead of output shape.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, flattenXShape, this.workGroupSize);\n    this.sliceDimGreaterThanOne = sliceDim > 1;\n    this.shaderKey = `scatter_${indicesRank}_${updatesRank}_${\n        this.sliceDimGreaterThanOne}_${outputDtype}_${sumDupeIndices}`;\n    const stridesType = getCoordsDataType(strides.length);\n    this.uniforms = `sliceDim : i32, strides: ${stridesType}, size: i32,`;\n    this.updatesRank = updatesRank;\n    this.indicesRank = indicesRank;\n  }\n\n  getUserCode(): string {\n    let indicesString = '';\n    if (this.indicesRank === 1) {\n      indicesString = 'coords[0]';\n    } else if (this.indicesRank === 2) {\n      indicesString = 'coords[0], j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    const strideString = this.sliceDimGreaterThanOne ? 'uniforms.strides[j]' :\n                                                       'uniforms.strides';\n\n    let outCoordsString = '';\n    let getUpdatesCoordsFromFlatIndex = '';\n    if (this.dispatchLayout.x.length === 1) {\n      outCoordsString = 'flattenedIndex';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      `;\n    } else if (this.dispatchLayout.x.length === 2) {\n      outCoordsString = 'vec2<i32>(flattenedIndex, coords[1])';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      `;\n    }\n    const updatesString =\n        Array.from({length: this.updatesRank}, (_, idx) => `coords[${idx}]`);\n    const updatesSnippet = `getUpdates(${updatesString.join(', ')})`;\n\n    const atomicRMW = (ptr: string, val: string) => {\n      let atomicAddSnippet = `atomicAdd(${ptr}, bitcast<i32>(${val}))`;\n      if (this.type === 'float32') {\n        atomicAddSnippet = `\n          {\n            var oldBits = 0;\n            var newBits = bitcast<i32>(${val});\n            loop {\n              let info = atomicCompareExchangeWeak(${ptr}, oldBits, newBits);\n              if (info.exchanged) {\n                break;\n              }\n              oldBits = info.old_value;\n              let oldValue = bitcast<f32>(oldBits);\n              let newValue = oldValue + (${val});\n              newBits = bitcast<i32>(newValue);\n            }\n          }\n        `;\n      }\n      const atomicStoreSnippet = `atomicStore(${ptr}, bitcast<i32>(${val}));`;\n      return this.sumDupeIndices ? atomicAddSnippet : atomicStoreSnippet;\n    };\n\n    const userCode = `\n    ${getUpdatesCoordsFromFlatIndex}\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${indicesSnippet}));\n            flattenedIndex = flattenedIndex + indexInside * ${strideString};\n          }\n          let updateValue =\n              ${mapToWgslTypes(this.type, false)}(${updatesSnippet});\n          let flatIndex = getOutputIndexFromCoords(${outCoordsString});\n\n          ${atomicRMW('&result[flatIndex]', 'updateValue')};\n        }\n      }`;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: WebGPUBackend,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const type = flattenX.dtype;\n  const output =\n      fill({backend, attrs: {shape: flattenShape, value: 0, dtype: type}});\n  const size = util.sizeFromShape(flattenX.shape);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides},\n    {type: 'int32', data: [size]}\n  ];\n  const program = new ScatterProgram(\n      flattenX.shape, sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, type);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], type, uniformData, output);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SelectProgram implements WebGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  cRank: number;\n  rank: number;\n  size = true;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n\n    this.cRank = cRank;\n    this.rank = rank;\n    this.shaderKey = 'select';\n  }\n\n  getUserCode(): string {\n    // TODO(WGSL): below code can be merged with getUserCode.\n    let cCoords;\n    let abCoords;\n    if (this.rank > 4) {\n      throw Error(`Where for rank ${this.rank} is not yet supported`);\n    }\n\n    if (this.rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < this.outputShape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < this.cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${cCoords});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${abCoords}));\n          } else {\n            setOutputAtIndex(index, getB(${abCoords}));\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SelectProgram} from '../select_webgpu';\n\nexport function select(args: {inputs: SelectInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGPUProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sigmoid = unaryKernelFunc({opType: UnaryOpType.SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sin = unaryKernelFunc({opType: UnaryOpType.SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgpu',\n  kernelFunc: sin\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sinh = unaryKernelFunc({opType: UnaryOpType.SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgpu',\n  kernelFunc: sinh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nexport const sub = binaryKernelFunc(\n    {opType: BinaryOpType.SUB, cpuKernelImpl: cpuSub, supportsComplex: true});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args: {inputs: SoftmaxInputs, backend: WebGPUBackend, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeData(maxLogit.dataId);\n  backend.disposeData(maxLogitsReshaped.dataId);\n  backend.disposeData(a.dataId);\n  backend.disposeData(b.dataId);\n  backend.disposeData(sumExp.dataId);\n  backend.disposeData(sumExpReshaped.dataId);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: WebGPUBackend,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TileProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.rank = this.outputShape.length;\n    this.shaderKey = 'tile';\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.rank, 'uniforms.');\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nfunction getSourceCoords(rank: number, uniformPrefix = ''): string {\n  if (rank >= 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `(resRC % ${uniformPrefix}aShape)`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < rank; i++) {\n    sourceCoords.push(`(${currentCoords[i]} % ${uniformPrefix}aShape[${i}])`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_webgpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: WebGPUBackend, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank >= 5 case.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string' ||\n      x.shape.length >= 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGPUProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgpu',\n  kernelFunc: tile as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: WebGPUBackend,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const $sparseIndices = reshape({\n    inputs: {x: sparseIndices},\n    backend,\n    attrs: {shape: [numUpdates, sliceRank]}\n  });\n  const $sparseValues = sparseValues.shape.length ?\n      reshape({\n        inputs: {x: sparseValues},\n        backend,\n        attrs: {shape: [numUpdates, sliceSize]}\n      }) :\n      identity({inputs: {x: sparseValues}, backend});\n\n  const type = $sparseValues.dtype;\n  const zero =\n      backend.makeTensorInfo([], type, util.makeZerosTypedArray(1, type));\n\n  // Fill output tensor with the default value.\n  const $defaultValue = reshape({\n    inputs: {x: defaultValue},\n    backend,\n    attrs: {shape: Array(flattenShape.length).fill(1)}\n  });\n  const $denseValues =\n      tile({inputs: {x: $defaultValue}, backend, attrs: {reps: flattenShape}});\n\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n\n  switch (numUpdates) {\n    case 0:\n      break;\n    case 1:\n      if (true) {\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type,\n            sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n      break;\n    default:\n      if (true) {\n        // First replace the default value with 0 at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            zero.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [zero, $sparseIndices], type, uniformData, $denseValues);\n      }\n      {\n        // Then replace 0 with the (sum of) sparse value(s) at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n  }\n\n  const denseValues = reshape(\n      {inputs: {x: $denseValues}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeData($sparseIndices.dataId);\n  backend.disposeData($sparseValues.dataId);\n  backend.disposeData($defaultValue.dataId);\n  backend.disposeData(zero.dataId);\n  backend.disposeData($denseValues.dataId);\n  return denseValues;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: WebGPUBackend, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sqrt = unaryKernelFunc({opType: UnaryOpType.SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgpu',\n  kernelFunc: sqrt\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const program = new UnaryOpProgram(x.shape, UnaryOpType.SQUARE);\n    return webGPUBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const squaredDifference = binaryKernelFunc({\n  opType: BinaryOpType.SQUARED_DIFFERENCE,\n});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class StridedSliceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  // TODO(xing.xu): Increase the workPerThread.\n  workPerThread = 1;\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize,\n        [this.workPerThread, 1, 1]);\n\n    const dtype = getCoordsDataType(this.outputShape.length);\n    this.uniforms = `begin : ${dtype},  strides : ${dtype}, `;\n    this.shaderKey = 'stridedSlice';\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * uniforms.strides + uniforms.begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          this.outputShape\n              .map((_, i) => {\n                outputAxis++;\n                return this.outputShape.length === 1 ?\n                    `coords * uniforms.strides[${i}] + uniforms.begin[${i}]` :\n                    `coords[${outputAxis - 1}] * uniforms.strides[${\n                        i}] + uniforms.begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${newCoords}));\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {StridedSliceProgram} from '../strided_slice_webgpu';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: WebGPUBackend,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeData(sliced.dataId);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      const values = backend.readSync(x.dataId) as TypedArray;\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram(finalShapeSparse);\n      const uniformData =\n          [{type: 'int32', data: $begin}, {type: 'int32', data: $strides}];\n      const resultValues =\n          backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n      result = reshape(\n          {inputs: {x: resultValues}, backend, attrs: {shape: finalShape}});\n      backend.disposeData(resultValues.dataId);\n    }\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: WebGPUBackend,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const tanh = unaryKernelFunc({opType: UnaryOpType.TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgpu',\n  kernelFunc: tanh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\n\nexport class SwapProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workGroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,`;\n    this.shaderKey = 'swap';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n\nexport class MergeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workGroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    // |n| Size of the original input of TopK\n    // |firstPass| indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |k| Top k elements desired\n    this.uniforms = `inputSize : i32, firstPass : i32, k : i32,`;\n    this.shaderKey = 'merge';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_webgpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: WebGPUBackend, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeData(tensorInfo.dataId);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: WebGPUBackend, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted}= attrs;\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape({inputs: {x}, attrs: {shape: [batch, lastDim]}, backend});\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataSwap = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'float32', data: [Number.NEGATIVE_INFINITY]},\n        {type: 'int32', data: [dir]},\n        {type: 'int32', data: [inc]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        program, inputs, 'int32', uniformDataSwap);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataMerge = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'int32', data: [kPow2]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        mergeProgram, inputs, 'int32', uniformDataMerge);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransformProgram implements WebGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  uniforms = 'interpolationModeId : i32, fillModeId : i32, fillValue : f32,';\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workGroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workGroupSize);\n    this.shaderKey = 'transform';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${main('index')} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: WebGPUBackend, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {atan2Config} from './kernels/Atan2';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {equalConfig} from './kernels/Equal';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedBatchNormConfig} from './kernels/FusedBatchNorm';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {imagConfig} from './kernels/Imag';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {logConfig} from './kernels/Log';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {unpackConfig} from './kernels/Unpack';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  addConfig,\n  addNConfig,\n  argMaxConfig,\n  argMinConfig,\n  atan2Config,\n  avgPoolConfig,\n  batchMatMulConfig,\n  batchToSpaceNDConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  einsumConfig,\n  eluConfig,\n  equalConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fillConfig,\n  flipLeftRightConfig,\n  fromPixelsConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedBatchNormConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  imagConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeNearestNeighborConfig,\n  rotateWithOffsetConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  sigmoidConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  softmaxConfig,\n  spaceToBatchNDConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  subConfig,\n  sumConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  unpackConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {TransformProgram} from '../transform_webgpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: WebGPUBackend,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(outShape);\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId: number;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  const uniformData = [\n    {type: 'int32', data: [interpolationModeId]},\n    {type: 'int32', data: [fillModeId]}, {type: 'float32', data: [fillValue]}\n  ];\n  return backend.runWebGPUProgram(\n      program, [image, transforms], 'float32', uniformData);\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n"],"names":["ENV","env","registerFlag","AdapterInfo","constructor","adapterInfo","this","vendor","isIntel","BufferManager","device","Map","acquireUploadBuffer","size","usage","acquireBuffer","mappedAtCreation","key","getBufferKey","freeBuffers","has","set","usedBuffers","numBytesUsed","numUsedBuffers","get","length","numFreeBuffers","newBuffer","shift","push","numBytesAllocated","createBuffer","releaseBuffer","buffer","bufferList","bufferIndex","indexOf","Error","splice","releaseUploadBuffer","mapAsync","GPUMapMode","WRITE","then","err","getNumUsedBuffers","getNumFreeBuffers","dispose","forEach","buffers","destroy","TextureManager","acquireTexture","width","height","format","byteSize","getBytesPerElement","getTextureKey","freeTextures","usedTextures","numUsedTextures","numFreeTextures","newTexture","createTexture","releaseTexture","texture","textureList","textureIndex","getNumUsedTextures","getNumFreeTextures","textures","symbolicallyComputeStrides","indicesArr","variableName","Math","max","numCoords","shape","map","d","strides","Array","i","compileProgram","program","inputsData","output","source","inputInfo","outputData","prefixSnippets","workGroupSize","isFlatDispatch","isFromPixels","mapToWgslTypes","dtype","isVec4","commonSnippet","join","getCoordsFromIndexSnippet","getUserCode","uniformDeclaration","variableNames","x","perDataType","getCoordsDataType","charAt","toLowerCase","slice","outputDataType","stridesDataType","uniforms","uniformShader","curInsertRe","replace","match","preInsertRe","_","p1","p2","insertAlignment","atomic","variableTypes","coordsSnippet","outShape","dispatchLayout","y","z","outRank","rank","gatherDimensionsStr","dims","arr","j","dimensions","snippet","getOutputCoordsSnippet","sources","getOutputIndexFromCoordsSnippet","outBufferType","wgslType","type","setOutputSnippet","inputSnippet","isFlatDispatchLayout","res","texName","name","funcName","toUpperCase","inputs","shapeStr","rankStr","getInputAtCoordsSnippet","texFuncSnippet","inRank","util","arraysEqual","broadcastDims","backend_util","getBroadcastDims","rankDiff","getCoordsXYZ","unpackedCoordsSnippet","coordsType","coordsValues","s","getInputByOutputSnippet","getInputSnippet","makeShader","module","createShaderModule","code","label","createComputePipeline","compute","entryPoint","layout","index","getMainHeaderString","params","getWorkGroupSizeString","computeStrides","coords","assert","dispatch","arrayProduct","product","computeDispatch","outputShape","elementsPerThread","dispatchX","dispatchY","dispatchZ","ceil","computeWorkGroupInfoForMatMul","dimAOuter","dimInner","dimBOuter","transposeA","computeWorkGroupSizeForConv2d","dim0","dim1","computeWorkPerThreadForConv2d","flatDispatchLayout","GPUBytesPerElement","ArrayBufferToTypedArray","data","Float32Array","Int32Array","Uint8Array","from","isWebGPUSupported","window","WorkerGlobalScope","navigator","gpu","MatMulProgramType","tileSize","every","dim","dimIdx","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","WebGPUBackend","KernelBackend","super","WeakSet","webgpu_util.isWebGPUSupported","pipelineCache","queue","currentCommandEncoder","currentComputePass","supportTimeQuery","features","bufferManager","textureManager","tensorMap","DataStorage","engine","querySet","createQuerySet","count","getBool","dummyCanvas","document","createElement","dummyContext","getContext","configure","body","appendChild","nextDataId","floatPrecision","defaultGpuBufferUsage","GPUBufferUsage","STORAGE","COPY_SRC","COPY_DST","disposeData","dataId","force","tensorDataPendingDisposal","tensorData","decRef","refCount","commandQueueOwnedIds","complexTensorInfos","real","imag","releaseResource","delete","memory","numBytesInGPU","numBytesAllocatedInGPU","unreliable","resourceInfo","textureInfo","GPUTexture","bufferInfo","incRef","write","values","id","move","submitQueue","ensureComputePassEnded","submit","finish","dispatchNumberInEncoder","uniformPendingDisposal","stagingPendingDisposal","ensureCommandEncoderReady","createCommandEncoder","end","getComputePass","beginComputePass","async","staging","MAP_READ","copyBufferToBuffer","READ","getMappedRange","unmap","undefined","getCurrentTexture","convertAndCacheOnCPU","readSync","vals","ps","Promise","all","read","realValues","imagValues","mergeRealAndImagArrays","webgpu_util.ArrayBufferToTypedArray","getBufferData","readToGPU","srcTensorData","tensorInfo","makeTensorInfo","tensorRef","makeTensorFromTensorInfo","bufSize","bufferSync","t","strings","decodeString","f","console","warn","oldActiveTimers","activeTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","uploadWaitMs","downloadWaitMs","kernelMs","wallMs","sum","ms","isString","encodeString","tensorToBinding","tensor","info","GPUExternalTexture","createView","offset","getTimeFromQuerySet","uploadToGPU","webgpu_util.GPUBytesPerElement","sizeFromShape","stagingBuffer","MAP_WRITE","arrayBuffer","stagingInfo","makeUniforms","programUniform","currentOffset","preLength","offsets","baseAlignment","ArrayBuffer","Uint32Array","uniformBuffer","UNIFORM","writeBuffer","uniformInfo","runWebGPUProgram","outputDtype","programDefinedUniform","getTypedArrayFromDType","MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE","limits","maxComputeWorkgroupsPerDimension","dispatchAverage","sqrt","cbrt","reshapeDispatch","bufferShapes","NaN","concat","uniformsType","input","shapes","shaderKey","types","inputShapesEqualsOutShape","broadcastDimsKey","flatDispatchString","webgpu_program.makeShaderKey","pipeline","webgpu_program.compileProgram","bindings","bindGroup","createBindGroup","getBindGroupLayout","entries","b","binding","resource","pass","shouldTimeProgram","writeTimestamp","setPipeline","setBindGroup","dispatchWorkgroups","add","getQueryTime","queryBuffer","QUERY_RESOLVE","dst","resolveQuerySet","arrayBuf","BigUint64Array","timeElapsedNanos","Number","shouldExecuteOnCPU","sizeThreshold","numDataIds","disposed","BinaryOpType","registerBackend","gpuDescriptor","powerPreference","adapter","requestAdapter","adapterLimits","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","maxStorageBufferBindingSize","requiredFeatures","requestDevice","requestAdapterInfo","CHECK_NAN_SNIPPET_VEC4_INNER","CHECK_NAN_SNIPPET_VEC4","NOT_EQUAL_VEC4","POW_VEC4","getBinaryWithNanString","op","useVec4","valueForNaN","checkNanSnippet","getBinaryOpString","MUL","ADD","ATAN2","SUB","DIV","EQUAL","GREATER","GREATER_EQUAL","LESS","LESS_EQUAL","LOGICAL_AND","NOT_EQUAL","SQUARED_DIFFERENCE","INT_DIV","PRELU","MAX","MIN","POW","COMPLEX_MULTIPLY_REAL","COMPLEX_MULTIPLY_IMAG","UnaryOpType","getUnaryOpString","ABS","COS","COSH","CEIL","ELU","EXP","EXPM1","FLOOR","IS_NAN","LINEAR","LOG","LOGICAL_NOT","NEG","LEAKYRELU","RECIPROCAL","RELU","RELU6","RSQRT","SIGMOID","SIN","SINH","SQRT","SQUARE","TANH","TO_INT","typeSnippet","component","activationFnSnippet","activation","hasPreluActivationWeights","packed","coordsLength","activationOpSnippet","dataType","biasActivationSnippet","hasBias","matMulReadFnSource","batchAEqualOne","batchBEqualOne","transposeB","fitAOuter","fitBOuter","fitInner","sampleA","sampleB","matMulReadWriteFnSource","makeMatMulPackedVec4Source","workPerThread","tileInner","splitK","splitedDimInner","isVectorA","tileAOuter","tileBOuter","tileAWidth","tileAHight","innerElementSize","rowPerThreadB","transpose","writeDataToSubAVec4Snippet","calculateResultSnippet","writeDataToSubASnippet","makeMatMulPackedSource","sequentialAccessByThreads","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","MatMulPackedProgram","aShape","bias","preluActivationWeights","workGroupInfo","addBias","getShapeFit","userCode","main","readVectorASnippet","makeVectorMatrixProductSource","MatMulReduceProgram","MatMulSmallOutputSizeProgram","bShape","makeMatMulSmallOutputSizeSource","MatMulSplitKProgram","atomicAddSnippet","BiasActivationProgram","FillProgram","fill","args","backend","attrs","value","inferDtype","getArrayFromDType","uniformData","fillConfig","kernelName","Fill","backendName","kernelFunc","reshape","xSize","$shape","inferFromImplicitShape","$xSize","reshapeConfig","Reshape","batchMatMulImpl","a","leakyreluAlpha","aRank","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","assertAndGetBroadcastShape","a3dShape","b3dShape","a3d","b3d","intermediates","batchDim","out","matmulProgramType","biasActivationProgram","activationInputs","outActivated","outReshaped","_fusedMatMulConfig","_FusedMatMul","BinaryOpComplexProgram","BinaryOpProgram","useSharedMemoryWithA","useSharedMemoryWithB","lastDimensionSize","dType","opFnStr","sharedIndexSnippet","accessDataSnippet","identity","identityConfig","Identity","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","UnaryOpProgram","unaryKernelFunc","opType","cpuKernelImpl","webgpuBackend","$dtype","xData","outValues","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","upcastType","realProgram","imagProgram","complexOutput","decodedAVals","fromUint8ToStringArray","decodedBVals","createSimpleBinaryKernelImpl","aVals","bVals","newShape","resultRank","resultStrides","resultSize","result","aStrides","bStrides","aBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","createSimpleUnaryImpl","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","log","maximumImpl","aValue","bValue","minimumImpl","min","multiplyImpl","notEqualImpl","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","splits","lastSplit","validateSplits","nrows","rowLength","start","limit","outDim","outSplitsOutDim","delta","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","multiplier","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","rsqrtImpl","sigmoidImpl","sqrtImpl","squaredDifferenceImpl","diff","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","split","delimiters","skipEmpty","delimiter","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","sd","sign","swap","resultValues","abs","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","inputType","zero","toTypedArray","resultData","resultShape","simplyConcat","colOffset","decodedData","tIdx","row","resIdx","col","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","stop","num","step","reduceSize","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","prod","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","shapesShape","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","begin","isContinous","slice_util","isSliceContinous","xStrides","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","newLoc","dataSplits","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","newStrides","axis","$axis","parseAxisParam","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","castImpl","castImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterEqualImplCPU","greaterImplCPU","lessEqualImplCPU","lessImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","scatterImpl","scatterImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","absConfig","Abs","addConfig","Add","cpuAdd","AddNPackedProgram","snippets","variable","operation","addNConfig","AddN","tensors","d1","d2","ArgMinMaxProgram","reduceType","axes","getInputShapeLastDim","splitOutputCoords","TransposeSharedProgram","newDim","TransposeProgram","switched","switchedCoords","getSwitchedCoords","cpuTranspose","transposeConfig","Transpose","argMaxConfig","ArgMax","permutedAxes","getAxesPermutation","$x","intermediateTensorInfos","getInnerMostAxes","assertAxesAreInnerMostDims","NEGATIVE_INFINITY","argMinConfig","ArgMin","POSITIVE_INFINITY","atan2Config","Atan2","Pool2DProgram","convInfo","poolType","updateSnippet","returnValue","PoolWithFilterSizeEqualsOneProgram","ReduceProgram","reduceInfo","inSize","reduceOp","initValue","outputSnippet","keepDims","toDispose","origAxes","reduceOutShape","resOutShape","expandShapeToKeepDim","windowSize","outSize","sumOutType","reduced","reductionIndices","maxConfig","Max","mean","meanConfig","Mean","poolImpl","filterWidth","filterHeight","inShape","inWidth","inHeight","padInfo","reshapeX","reduceX","strideHeight","strideWidth","top","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","computePool2DInfo","batchMatMulConfig","BatchMatMul","SliceProgram","destSize","sourceCoords","coord","getCoords","coordSum","$begin","$size","parseSliceParams","assertParamsValid","xBufferInfo","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","notEqual","cpuNotEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","realPart","hasEncodingLoss","resultType","int","zerosTensorInfo","ceilConfig","Ceil","ClipVec4Program","ClipProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ConcatProgram","computeOutShape","offsetLength","lastIndex","lastShiftIndex","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","outInfo","maxInputNum","maxStorageBuffersPerShaderStage","reducedInputs","subArray","computeTensors2D","reshapedResult","assertParamsConsistent","$inputs","concatConfig","Concat","Conv2DMMProgram","isChannelsLast","dataFormat","inChannels","outWidth","outChannels","matMulSource","elementsSize","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","Conv2DNaiveProgram","getShapeForBatchMatMul","conv2DImpl","sameSize","useNaiveConv2d","xReshaped","filterReshaped","sharedDim","conv2dByMatMul","outHeight","inputVar","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerInputMMProgram","conv2dTransposeCommonSnippet","Conv2DDerInputProgram","rowDim","colDim","channelDim","conv2DBackpropInputConfig","Conv2DBackpropInput","dy","cosConfig","Cos","coshConfig","Cosh","CropAndResizeProgram","channnel","boxShape","cropSize","method","numBoxes","methodId","cropHeightBiggerThan1","cropWidthBiggerThan1","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","extrapolationValue","CumOpType","CumProgram","exclusive","reverse","initVal","Prod","val","condition","idxString","getFinalCoord","cumImpl","permutation","permutedX","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","cumprodConfig","Cumprod","cumsumConfig","Cumsum","Sum","DepthToSpaceProgram","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","blockSize","outputHeight","outputWidth","outputDepth","DepthwiseConv2DNCHWSharedProgram","hasPreluActivation","tileAHeight","DepthwiseConv2DVec4Program","xNumber","DepthwiseConv2DProgram","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","multiplyKernelFunc","cpuMultiply","multiplyConfig","Multiply","sumConfig","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","eluConfig","Elu","equalConfig","Equal","cpuEqual","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","expm1Config","Expm1","FlipLeftRightProgram","imageShape","flipLeftRightConfig","FlipLeftRight","floorConfig","Floor","floorDivConfig","FloorDiv","FromPixelsProgram","numChannels","importVideo","textureLoad","fromPixelsConfig","FromPixels","pixels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","isCanvas","HTMLCanvasElement","OffscreenCanvas","isImageBitmap","ImageBitmap","videoWidth","videoHeight","isVideoOrImage","newWillReadFrequently","fromPixels2DContext","willReadFrequently","canvas","drawImage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","copyExternalImageToTexture","imageData","pixelArray","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","offsetSnippet","scaleSnippet","fusedBatchNormConfig","FusedBatchNorm","scale","variance","varianceEpsilon","webGPUBackend","batchNormInputs","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","eitherStridesOrDilationsAreOne","programInputs","GatherNDProgram","sliceDim","strideString","gatherNdConfig","GatherNd","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","getSourceCoords","gatherV2","batchDims","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","indicesValues","xValues","gatherV2Config","GatherV2","greaterConfig","Greater","cpuGreater","greaterEqualConfig","GreaterEqual","cpuGreaterEqual","isNaNConfig","IsNan","leakyReluConfig","LeakyRelu","alpha","lessConfig","Less","cpuLess","lessEqualConfig","LessEqual","cpuLessEqual","logConfig","Log","logicalAndConfig","LogicalAnd","logicalNotConfig","LogicalNot","maximumConfig","Maximum","cpuMaximum","maxPoolConfig","MaxPool","minConfig","Min","minimumConfig","Minimum","cpuMinimum","MirrorPadProgram","paddings","mode","p","shaderStart","shaderEnd","shaderOutC","unpackedCoords","mirrorPadConfig","MirrorPad","negConfig","Neg","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","kernel_impls","nonMaxSuppressionV3Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","nonMaxSuppressionV5Impl","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","startValue","endValue","leftPadCondition","rightPadCondition","padV2","constantValue","padV2Config","PadV2","powConfig","Pow","preluConfig","Prelu","prodConfig","rangeConfig","Range","realDiv","realDivConfig","RealDiv","reciprocalConfig","Reciprocal","reluConfig","Relu","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","ResizeNearestNeighborProgram","sourceFracIndexRC","resizeNearestNeighborConfig","ResizeNearestNeighbor","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","cos","parseFloat","toFixed","rsqrtConfig","Rsqrt","ScatterProgram","flattenXShape","indicesRank","updatesRank","sliceDimGreaterThanOne","stridesType","indicesString","indicesSnippet","outCoordsString","getUpdatesCoordsFromFlatIndex","updatesSnippet","ptr","atomicStoreSnippet","atomicRMW","scatterNdConfig","ScatterNd","calculateShapes","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","e","sigmoidConfig","Sigmoid","sinConfig","Sin","sinhConfig","Sinh","sub","cpuSub","subConfig","Sub","softmaxConfig","Softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","TileProgram","uniformPrefix","tile","buf","tileConfig","Tile","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","updatesBuf","$defaultValue","$sparseIndices","$sparseValues","$denseValues","denseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","sqrtConfig","Sqrt","squareConfig","Square","squaredDifferenceConfig","SquaredDifference","StridedSliceProgram","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","stringNGramsConfig","StringNGrams","$data","$dataSplits","tanhConfig","Tanh","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","uniformDataSwap","prevIndices","len","mergeProgram","uniformDataMerge","prevValues","TransformProgram","kernelConfigs","Transform","transforms","interpolation","fillMode","imageHeight","imageWidth","interpolationModeId","fillModeId","Unpack","kernelConfig","registerKernel"],"mappings":";;;;;;;;;;;;;;;;k0DAmBA,MAAMA,GAAMC,IAGZD,GAAIE,aAAa,qCAAqC,IAAM,KAM5DF,GAAIE,aAAa,sBAAsB,KAAM,IAO7CF,GAAIE,aAAa,8BAA8B,KAAO,IAMtDF,GAAIE,aAAa,qCAAqC,KAAM,IAM5DF,GAAIE,aAAa,4BAA4B,KAAM,IAQnDF,GAAIE,aAAa,qCAAqC,IAAM,MAM5DF,GAAIE,aAAa,2BAA2B,KAAM,IAKlDF,GAAIE,aAAa,kCAAkC,KAAM,IAKzDF,GAAIE,aAAa,iCAAiC,KAAM,UC/C3CC,GAGXC,YAAYC,GACNA,IACFC,KAAKC,OAASF,EAAYE,QAI9BC,UACE,MAAuB,UAAhBF,KAAKC,cCjBHE,GASXL,YAAoBM,GAAAJ,YAAAI,EARZJ,oBAAiB,EACjBA,oBAAiB,EACjBA,iBAAwC,IAAIK,IAC5CL,iBAAwC,IAAIK,IAE7CL,kBAAe,EACfA,uBAAoB,EAI3BM,oBAAoBC,EAAcC,GAChC,OAAOR,KAAKS,cAAcF,EAAMC,GAAO,GAGzCC,cACIF,EAAcC,EAA4BE,GAAmB,GAC/D,MAAMC,EAAMC,GAAaL,EAAMC,GAY/B,GAXKR,KAAKa,YAAYC,IAAIH,IACxBX,KAAKa,YAAYE,IAAIJ,EAAK,IAGvBX,KAAKgB,YAAYF,IAAIH,IACxBX,KAAKgB,YAAYD,IAAIJ,EAAK,IAG5BX,KAAKiB,cAAgBV,EACrBP,KAAKkB,iBAEDlB,KAAKa,YAAYM,IAAIR,GAAKS,OAAS,EAAG,CACxCpB,KAAKqB,iBAEL,MAAMC,EAAYtB,KAAKa,YAAYM,IAAIR,GAAKY,QAE5C,OADAvB,KAAKgB,YAAYG,IAAIR,GAAKa,KAAKF,GACxBA,EAGTtB,KAAKyB,mBAAqBlB,EAC1B,MAAMe,EAAYtB,KAAKI,OAAOsB,aAAa,CAACnB,OAAMC,QAAOE,qBAGzD,OAFAV,KAAKgB,YAAYG,IAAIR,GAAKa,KAAKF,GAExBA,EAGTK,cAAcC,EAAmBrB,EAAcC,GAC7C,GAA8B,IAA1BR,KAAKa,YAAYN,KACnB,OAGF,MAAMI,EAAMC,GAAaL,EAAMC,GAC1BR,KAAKa,YAAYC,IAAIH,IACxBX,KAAKa,YAAYE,IAAIJ,EAAK,IAG5BX,KAAKa,YAAYM,IAAIR,GAAKa,KAAKI,GAC/B5B,KAAKqB,iBACLrB,KAAKkB,iBAEL,MAAMW,EAAa7B,KAAKgB,YAAYG,IAAIR,GAClCmB,EAAcD,EAAWE,QAAQH,GACvC,GAAIE,EAAc,EAChB,MAAM,IAAIE,MACN,0EAGNH,EAAWI,OAAOH,EAAa,GAC/B9B,KAAKiB,cAAgBV,EAGvB2B,oBACIN,EAAmBrB,EAAcC,GACnCoB,EAAOO,SAASC,WAAWC,OACtBC,MACG,KACEtC,KAAK2B,cAAcC,EAAQrB,EAAMC,EAAM,IAExC+B,IAAD,IAKVC,oBACE,OAAOxC,KAAKkB,eAGduB,oBACE,OAAOzC,KAAKqB,eAGdqB,UACE1C,KAAKa,YAAY8B,SAAQ,CAACC,EAASjC,KACjCiC,EAAQD,SAAQf,IACdA,EAAOiB,SAAS,GAChB,IAGJ7C,KAAKgB,YAAY2B,SAAQ,CAACC,EAASjC,KACjCiC,EAAQD,SAAQf,IACdA,EAAOiB,SAAS,GAChB,IAGJ7C,KAAKa,YAAc,IAAIR,IACvBL,KAAKgB,YAAc,IAAIX,IACvBL,KAAKkB,eAAiB,EACtBlB,KAAKqB,eAAiB,EACtBrB,KAAKiB,aAAe,EACpBjB,KAAKyB,kBAAoB,GAI7B,SAASb,GAAaL,EAAcC,GAClC,MAAO,GAAGD,KAAQC,GACpB,OCjHasC,GASXhD,YAAoBM,GAAAJ,YAAAI,EARZJ,qBAAkB,EAClBA,qBAAkB,EAClBA,kBAA0C,IAAIK,IAC9CL,kBAA0C,IAAIK,IAE/CL,kBAAe,EACfA,uBAAoB,EAI3B+C,eACIC,EAAeC,EAAgBC,EAC/B1C,GACF,MACM2C,EAAWH,EAAQC,EADDG,GAAmBF,GAErCvC,EAAM0C,GAAcL,EAAOC,EAAQC,EAAQ1C,GAYjD,GAXKR,KAAKsD,aAAaxC,IAAIH,IACzBX,KAAKsD,aAAavC,IAAIJ,EAAK,IAGxBX,KAAKuD,aAAazC,IAAIH,IACzBX,KAAKuD,aAAaxC,IAAIJ,EAAK,IAG7BX,KAAKiB,cAAgBkC,EACrBnD,KAAKwD,kBAEDxD,KAAKsD,aAAanC,IAAIR,GAAKS,OAAS,EAAG,CACzCpB,KAAKyD,kBAEL,MAAMC,EAAa1D,KAAKsD,aAAanC,IAAIR,GAAKY,QAE9C,OADAvB,KAAKuD,aAAapC,IAAIR,GAAKa,KAAKkC,GACzBA,EAGT1D,KAAKyB,mBAAqB0B,EAE1B,MAAMO,EAAa1D,KAAKI,OAAOuD,cAAc,CAC3CpD,KAAM,CAACyC,EAAOC,GACdC,SACA1C,UAIF,OAFAR,KAAKuD,aAAapC,IAAIR,GAAKa,KAAKkC,GAEzBA,EAGTE,eACIC,EAAqBb,EAAeC,EACpCC,EAA0B1C,GAC5B,GAA+B,IAA3BR,KAAKsD,aAAa/C,KACpB,OAGF,MAAMI,EAAM0C,GAAcL,EAAOC,EAAQC,EAAQ1C,GAC5CR,KAAKsD,aAAaxC,IAAIH,IACzBX,KAAKsD,aAAavC,IAAIJ,EAAK,IAG7BX,KAAKsD,aAAanC,IAAIR,GAAKa,KAAKqC,GAChC7D,KAAKyD,kBACLzD,KAAKwD,kBAEL,MAAMM,EAAc9D,KAAKuD,aAAapC,IAAIR,GACpCoD,EAAeD,EAAY/B,QAAQ8B,GACzC,GAAIE,EAAe,EACjB,MAAM,IAAI/B,MACN,4EAGN8B,EAAY7B,OAAO8B,EAAc,GACjC,MACMZ,EAAWH,EAAQC,EADDG,GAAmBF,GAE3ClD,KAAKiB,cAAgBkC,EAGvBa,qBACE,OAAOhE,KAAKwD,gBAGdS,qBACE,OAAOjE,KAAKyD,gBAGdf,UACE1C,KAAKsD,aAAaX,SAAQ,CAACuB,EAAUvD,KACnCuD,EAASvB,SAAQkB,IACfA,EAAQhB,SAAS,GACjB,IAGJ7C,KAAKuD,aAAaZ,SAAQ,CAACuB,EAAUvD,KACnCuD,EAASvB,SAAQkB,IACfA,EAAQhB,SAAS,GACjB,IAGJ7C,KAAKsD,aAAe,IAAIjD,IACxBL,KAAKuD,aAAe,IAAIlD,IACxBL,KAAKwD,gBAAkB,EACvBxD,KAAKyD,gBAAkB,EACvBzD,KAAKiB,aAAe,EACpBjB,KAAKyB,kBAAoB,GAI7B,SAAS4B,GACLL,EAAeC,EAAgBC,EAC/B1C,GACF,MAAO,GAAGwC,KAASC,KAAUC,KAAU1C,GACzC,CAEA,SAAS4C,GAAmBF,GAC1B,GAAe,eAAXA,EACF,OAAO,GAEP,MAAM,IAAIlB,MAAM,GAAGkB,sBAEvB,UCtHgBiB,GACZC,EAAsBC,GACxB,GAAIC,KAAKC,OAAOH,GAAc,EAC5B,MAAM,IAAIpC,MAAM,4DAGlB,MAAMwC,EAAYJ,EAAWhD,OACvBqD,EAAQL,EAAWM,KAAIC,GAAK,GAAGN,KAAgBM,OAC/CC,EAAU,IAAIC,MAAML,EAAY,GACtCI,EAAQJ,EAAY,GAAKC,EAAMD,EAAY,GAC3C,IAAK,IAAIM,EAAIN,EAAY,EAAGM,GAAK,IAAKA,EACpCF,EAAQE,GAAK,IAAIF,EAAQE,EAAI,QAAQL,EAAMK,EAAI,MAGjD,OAAOF,CACT,CCoBO,MAAMG,GACT,CAAC3E,EAAmB4E,EAAwBC,EAC3CC,KACC,MACMC,EA+FZ,SACIC,EAAwBC,EACxBL,GACF,MAAMM,EAA2B,GA4BjC,GA3BAA,EAAe9D,KAAK,kCACSwD,EAAQO,cAAc,sCACtBP,EAAQO,cAAc,sCACtBP,EAAQO,cAAc,2PAS/CC,GAAeR,GACX,4BACA,yjBAaJA,EAAQS,aAYV,OAXAH,EAAe9D,KAAK,8NAQhBkE,GAAeL,EAAWM,MAAOX,EAAQY,oFAGtC,CACLC,GACAP,EAAeQ,KAAK,MACpBC,GAA0BV,EAAWZ,OACrCO,EAAQgB,eACRF,KAAK,MAGT,IAAIG,EAAqB,gCACzBjB,EAAQkB,cAAcvD,SAAQ,CAACwD,EAAGrB,KAChC,MAAMsB,EAAcC,GAAkBjB,EAAUN,GAAGL,MAAMrD,QACzD6E,GACI,GAAGE,EAAEG,OAAO,GAAGC,cAAgBJ,EAAEK,MAAM,aAAaJ,KAAe,IAEzE,MAAMK,EAAiBJ,GAAkBhB,EAAWZ,MAAMrD,QAC1D6E,GAAsB,cAAcQ,MACpC,MACMC,EAAkBL,GADFhB,EAAWZ,MAAMrD,OAAS,GAEhD6E,GAAsB,+BACIS,MAEtB1B,EAAQzE,OACV0F,GAAsB,gBAGpBjB,EAAQ2B,WACVV,GAAsBjB,EAAQ2B,UAEhCV,GAAsB,KACtBA,EAimBF,SAAyBW,GAEvB,MAAMC,EAAc,wBACpBD,EAAgBA,EAAcE,QAAQD,GAAcE,GAC3C,cAAgBA,IAIzB,MAAMC,EAAc,wBAIpB,OAHAJ,EAAgBA,EAAcE,QAAQE,GAAa,CAACC,EAAGC,EAAIC,IAClD,MAAMD,iBAAkBC,KAGnC,CA9mBuBC,CAAgBnB,GAErCX,EAAe9D,KAAKyE,GAGhBjB,EAAQqC,OACV/B,EAAe9D,KAAK,4FAIpB8D,EAAe9D,KAAK,wEAEhBkE,GAAeL,EAAWM,MAAOX,EAAQY,mBAG/CZ,EAAQkB,cAAcvD,SAAQ,CAACwD,EAAGrB,KAChCQ,EAAe9D,KAAK,8BACG,EAAIsD,yBAAyBqB,YAChDnB,EAAQsC,cACJtC,EAAQsC,cAAcxC,GACtBY,GAAeN,EAAUN,GAAGa,MAAOX,EAAQY,sBAC7C,IAGmB,KAAvBK,GACFX,EAAe9D,KAAK,8BAEhB,EAAIwD,EAAQkB,cAAc9E,oDAIhC,MAAMmG,EAkXR,SACIC,EACAC,GACF,MAAMtB,EAACA,EAACuB,EAAEA,EAAI,GAAEC,EAAEA,EAAI,IAAMF,EAEtBG,EAAUJ,EAASpG,OACnByG,EAAO1B,EAAE/E,OAASsG,EAAEtG,OAASuG,EAAEvG,OAGrC,GAAIyG,IAASD,EACX,MAAO,GAGT,GAAIzB,EAAE/E,SAAWwG,EAAS,CAOxB,MALgB,2BADFvB,GAAkBuB,qGASlC,IAAIE,EAAsB,GAC1B,MAAMC,EAAO,CAAC5B,EAAGuB,EAAGC,GAEpB,IAAK,IAAI7C,EAAI,EAAGA,EAAIiD,EAAK3G,OAAQ0D,IAAK,CACpC,MAAMkD,EAAMD,EAAKjD,GAEjB,GAAmB,IAAfkD,EAAI5G,OAIR,GAAmB,IAAf4G,EAAI5G,OACN0G,GAAuB,QAAQE,EAAI,qBAAqBlD,WACnD,CACL,MAAMF,EAAUT,GAA2B6D,EAAK,qBAChDF,GAAuB,YAAYhD,oBAAoBA,OACvD,IAAK,IAAImD,EAAI,EAAGA,EAAIrD,EAAQxD,OAAQ6G,IAClCH,GAAuB,QAAQE,EAAIC,aAAanD,OAAOF,EAAQqD,MAE3DA,IAAMrD,EAAQxD,OAAS,EACzB0G,GAAuB,QAAQE,EAAIC,EAAI,aAC3BnD,QAAQkD,EAAIC,QAAQrD,EAAQqD,MAExCH,GACI,QAAQhD,YAAYA,QAAQkD,EAAIC,QAAQrD,EAAQqD,OAM5D,MAAMC,EAAa,GACnB,IAAK,IAAIpD,EAAI,EAAGA,EAAI+C,EAAM/C,IACxBoD,EAAW1G,KAAK,IAAIsD,KAGtB,MAAMa,EAAQU,GAAkBwB,GAChC,IAAIM,EAAU,2BAA2BxC,UACvCmC,MAEwB,IAAtBI,EAAW9G,OACb+G,GAAW,UAAUxC,UAErBwC,GAAW,UAAUxC,KAASuC,EAAWpC,KAAK,WAGhD,OAAOqC,CACT,CArbMC,CAAuB/C,EAAWZ,MAAOO,EAAQyC,gBAE/CY,EAAU,CACdxC,GAAeP,EAAeQ,KAAK,MACnCC,GAA0BV,EAAWZ,OAAQ8C,EAC7Ce,GAAgCjD,EAAWZ,MAAMrD,SAE9C4D,EAAQqC,QACXgB,EAAQ7G,KAigBZ,SACIgG,EAAoBe,EAAyB3C,GAC/C,MAAMgC,EAAUJ,EAASpG,OACnBoH,EAAW9C,GAAe6C,EAAe3C,GAC/C,IAAIuC,EAEFA,EADEvC,EACQ,wFACc4C,iHAGAA,mBAGd,kFACcA,2GAGAA,mBAG1B,GAAIZ,GAAW,EAAG,CAChB,MAAMG,EAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAAMvB,MAAM,EAAGoB,GACrDa,EAAOpC,GAAkBuB,GAG7BO,GADEvC,EACS,gCAEPmC,EAAKrD,KAAIC,GAAK,GAAGA,YAAWmB,KAAK,iFACQ2C,KAAQV,EAAKjC,KAAK,qGAI3DiC,EAAKrD,KAAIC,GAAK,GAAGA,YAAWmB,KAAK,iFACQ2C,KAAQV,EAAKjC,KAAK,8EAKpD,gCAEPiC,EAAKrD,KAAIC,GAAK,GAAGA,YAAWmB,KAAK,2EACQ2C,KAAQV,EAAKjC,KAAK,iGAI3DiC,EAAKrD,KAAIC,GAAK,GAAGA,YAAWmB,KAAK,2EACQ2C,KAAQV,EAAKjC,KAAK,0EAOnE,OAAOqC,CACT,CAtjBQO,CAAiBrD,EAAWZ,MAAOY,EAAWM,MAAOX,EAAQY,SAGnE,MAAM+C,EACFvD,EACKV,KACG,CAACyB,EAAGrB,IAgVlB,SACIM,EAAsBoC,EAAoB5B,EAC1CgD,GACF,IAAIC,EAzLN,SACIzD,EAAsBQ,GACxB,MAAMkD,EAAU1D,EAAU2D,KACpBlB,EAAOzC,EAAUX,MAAMrD,OACvBqH,EAAOpC,GAAkBwB,GACzBmB,EAAW,MAAQF,EAAQxC,OAAO,GAAG2C,cAAgBH,EAAQtC,MAAM,GACnEuB,EAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAAMvB,MAAM,EAAGqB,GACrDqB,EAASnB,EAAKrD,KAAIC,GAAK,GAAGA,YAAWmB,KAAK,MAEhD,GAAI+B,EAAO,EACT,OAAIjC,EACK,gBACAoD,kDACgBF,4BAKlB,cACAE,mCACUF,wBAKnB,MAAMK,EACF,YAAYL,EAAQxC,OAAO,GAAGC,cAAgBuC,EAAQtC,MAAM,UAChE,IAAI4C,EAAU,GAAGvB,KACJ,IAATA,IACFuB,EAAU,MAGZ,GAAIxD,EACF,MAAO,cACAoD,KAAYE,+CACIJ,uBAA6BM,KAAWX,KAC3DV,EAAKjC,KAAK,qBACNqD,6BAKV,MAAO,YACAH,KAAYE,iCACFJ,uBAA6BM,KAAWX,KACrDV,EAAKjC,KAAK,mBACNqD,mBAGV,CAwIYE,CAAwBjE,EAAWQ,GAE7BR,EAAUX,MACdrD,QAAUoG,EAASpG,SAC7ByH,GA1IJ,SACIzD,EAAsBoC,EAAoB5B,EAC1CgD,GACF,MAAME,EAAU1D,EAAU2D,KACpBO,EAAiBR,EAAQxC,OAAO,GAAG2C,cAAgBH,EAAQtC,MAAM,GAEjEwC,EAAW,MAAQM,EAAiB,WAEpCC,EAASnE,EAAUX,MAAMrD,OACzBwG,EAAUJ,EAASpG,OACnBqH,EAAOpC,GAAkBuB,GAK/B,GAAI4B,EAAKC,YAAYrE,EAAUX,MAAO+C,IAAaoB,EACjD,OAAIhD,EACK,cACFoD,sEACgBF,yCAGhBE,oBAA2BP,+CACXK,KACjBlB,EAAU,EAAI,mCAAqC,mCAIhD,YACJoB,wDACUF,qCAGVE,oBAA2BP,iCACjBK,KACTlB,EAAU,EAAI,mCAAqC,2BAM3D,MAAM8B,EACFC,EAAaC,iBAAiBxE,EAAUX,MAAO+C,GAC7CqC,EAAWjC,EAAU2B,EAE3B,IAAIhC,EAAgB,GAEpB,GAAe,IAAXgC,EACF,OAAI3D,EACK,YACJoD,6DACSM,yBAGTN,oBAA2BP,sCAClBa,kBAIP,YACFN,sDACSM,yBAGTN,oBAA2BP,+BAClBa,kBAKZ/B,EADEK,EAAU,GAAK8B,EAActI,QAAU,EACzB,cAGZsI,EAAchF,KAAIC,GAAK,UAAUmF,GAAanF,EAAIkF,YAC7C/D,KAAK,MAIlB,IAAIiE,EAAwB,GAC5B,GAAInC,EAAU,GAAK2B,EAAS,EAC1BQ,EAAwB,cAExB,GAAInC,EAAU,EAAG,CACf,MAAMoC,EAAa3D,GAAkBkD,GAC/BU,EACF7E,EAAUX,MAAMC,KAAI,CAACwF,EAAGpF,IAAM,UAAUgF,GAAahF,EAAI+E,OACpD/D,KAAK,MACdiE,EAAwB,GAAGC,KAAcC,UAEzCF,EAAwB,SAI5B,MAAMZ,EACF,YAAYL,EAAQxC,OAAO,GAAGC,cAAgBuC,EAAQtC,MAAM,UAC1D4C,EAAU,GAAGG,KACnB,GAAI3D,EACF,MAAO,YACFoD,wGAEDzB,mBACOuB,uBAA6BM,KACpCW,MAA0BZ,6BAGzBH,sBAA6BP,0DAE9BlB,mBACOuB,uBAA6BM,KACpCW,MAA0BZ,sBAKhC,MAAO,UACFH,8FAEDzB,qBACWuB,uBAA6BM,KACxCW,MAA0BZ,sBAGzBH,sBAA6BP,gDAE9BlB,qBACWuB,uBAA6BM,KACxCW,MAA0BZ,cAGhC,CASWgB,CACH/E,EAAWoC,EAAU5B,EAAQgD,IAGnC,OAAOC,CACT,CA5VwBuB,CACNjE,EAAGd,EAAWZ,MACdO,EAAQsC,cAC0B,cAA7BtC,EAAQsC,cAAcxC,GACvBE,EAAQY,OACZZ,EAAQyC,eAAetB,EAAE/E,SAAWiE,EAAWZ,MAAMrD,UAC5D0E,KAAK,MACduC,EAAQ7G,KAAKmH,GAEbN,EAAQ7G,KAAKwD,EAAQgB,eAErB,OADeqC,EAAQvC,KAAK,KAE9B,CAlOqBuE,CAAWpF,EADP,CAACU,MAAOT,EAAOS,MAAOlB,MAAOS,EAAOT,OACLO,GAC5CsF,EAASlK,EAAOmK,mBAClB,CAACC,KAAMrF,EAAQsF,MAAOzF,EAAQlF,YAAYiJ,OAO9C,OANiB3I,EAAOsK,sBAAsB,CAC5CC,QAAS,CAACL,SAAQM,WAAY,UAC9BH,MAAOzF,EAAQlF,YAAYiJ,KAC3B8B,OAAQ,QAGK,WAGLxE,GAAkBwB,GAChC,GAAIA,GAAQ,EACV,MAAO,MACF,GAAa,IAATA,EACT,MAAO,YACF,GAAa,IAATA,EACT,MAAO,YACF,GAAa,IAATA,EACT,MAAO,YACF,GAAa,IAATA,EACT,MAAO,OACF,GAAa,IAATA,EACT,MAAO,OAEP,MAAM7F,MAAM,gBAAgB6F,yBAEhC,UAEgBiC,GAAagB,GAC3B,GAAc,IAAVA,EACF,MAAO,IACF,GAAc,IAAVA,EACT,MAAO,IACF,GAAc,IAAVA,EACT,MAAO,IACF,GAAc,IAAVA,EACT,MAAO,IACF,GAAc,IAAVA,EACT,MAAO,IACF,GAAc,IAAVA,EACT,MAAO,IAEP,MAAM9I,MAAM,SAAS8I,yBAEzB,UAIgBC,MAAuBC,GACrC,IAAI7C,EACJ,OAAQ6C,EAAO5J,QACb,KAAK,EACH+G,EAAU,aACN8C,iYAYJ,MACF,KAAK,EACH9C,EAAU,aACN8C,wYAUQD,EAAO,oBAEnB,MACF,QACE,MAAMhJ,MAAM,eAEhB,OAAOmG,CACT,UAEgB8C,KACd,MAAO,gFAGT,CAgKA,MAAMpF,GAAgB,4nFAsEtB,SAASE,GAA0BtB,GACjC,MAAMoD,EAAOpD,EAAMrD,OAEnB,GAAIyG,GAAQ,EACV,MAAO,8DAGT,MAAMjD,EAAU4E,EAAK0B,eAAezG,GAC9BkB,EAAQU,GAAkBwB,GAE1BsD,EAAmB,GACzB,IAAK,IAAIrG,EAAI,EAAGA,EAAI+C,EAAM/C,IACxBqG,EAAO3J,KAAK,IAAIsD,KAGlB,GAAuB,IAAnBF,EAAQxD,OACV,MAAO,kMAKT,IAAI+G,EAgBJ,OAfAA,EAAU,sBACNvD,EACKF,KAAI,CAACuC,EAAGnC,IASA,GAPH,OAAOqG,EAAOrG,0CACVgF,GAAahF,SACPA,IAAMF,EAAQxD,OAAS,EACjC,OAAO+J,EAAOrG,EAAI,iBACdqG,EAAOrG,iCAAiCgF,GAAahF,KACzD,qBAAqBqG,EAAOrG,iCACxBgF,GAAahF,UAGtBgB,KAAK,IAEP,+CACmCH,cACpCwC,mBACOxC,KAASwF,EAAOrF,KAAK,mBAGpC,CAgRA,SAASwC,GAAgCV,GACvC,IAAIO,EAAU,GACd,OAAQP,GACN,KAAK,EACL,KAAK,EACHO,GAAW,8GAKX,MACF,KAAK,EACHA,GAAW,iKAKX,MACF,KAAK,EACHA,GAAW,+LAKX,MACF,KAAK,EACHA,GAAW,yOAMX,MACF,KAAK,EACHA,GAAW,6UASX,MACF,KAAK,EACHA,GAAW,oYAUX,MACF,QACEqB,EAAK4B,QAAO,GAAO,IAAM,eAAexD,aAG5C,OAAOO,CACT,CAEA,SAAS3C,GAAeR,GACtB,OAA+B,IAAxBA,EAAQqG,SAAS,IAAoC,IAAxBrG,EAAQqG,SAAS,EACvD,UAEgB3F,GAAe+C,EAAgB7C,GAE7C,MAAa,YAAT6C,EACK7C,EAAS,YAAc,MACZ,UAAT6C,GAES,SAATA,EADF7C,EAAS,YAAc,MAOzB6C,CACT,CCrvBA,MAAM6C,GAAgBtD,IACpB,IAAIuD,EAAU,EACd,IAAK,IAAIzG,EAAI,EAAGA,EAAIkD,EAAI5G,OAAQ0D,IAC9ByG,GAAWvD,EAAIlD,GAEjB,OAAOyG,CAAO,WAiBAC,GACZX,EAAmDY,EACnDlG,EAA0C,CAAC,EAAG,EAAG,GACjDmG,EACI,CAAC,EAAG,EAAG,IACb,MAAOC,EAAWC,EAAWC,GAAa,CACxCvH,KAAKwH,KACDR,GAAaT,EAAO1E,EAAEzB,KAAIC,GAAK8G,EAAY9G,OAC1CY,EAAc,GAAKmG,EAAkB,KAC1Cb,EAAOnD,EAAIpD,KAAKwH,KACDR,GAAaT,EAAOnD,EAAEhD,KAAIC,GAAK8G,EAAY9G,OAC1CY,EAAc,GAAKmG,EAAkB,KAC1C,EACXb,EAAOlD,EAAIrD,KAAKwH,KACDR,GAAaT,EAAOlD,EAAEjD,KAAIC,GAAK8G,EAAY9G,OAC1CY,EAAc,GAAKmG,EAAkB,KAC1C,GAEb,MAAO,CAACC,EAAWC,EAAWC,EAChC,UAOgBE,GACZC,EAAmBC,EAAkBC,EACrCC,GAAa,GAQf,MAAM5G,EAA0C,CAAC,EAAG,EAAG,GACjDmG,EAA8C,CAAC,EAAG,EAAG,GAY3D,OAVKS,IACCH,GAAa,IACfN,EAAkB,GAAK,GAGrBO,GAAY,IAAMC,GAAa,KACjC3G,EAAc,GAAK,IAIhB,CAACA,gBAAemG,oBACzB,UAEgBU,GACZvB,EAAmDY,EACnD7F,GAAS,GACX,GAAIA,EACF,MAAO,CAAC,EAAG,EAAG,GAGhB,MAAMyG,EAAOf,GAAaT,EAAO1E,EAAEzB,KAAIC,GAAK8G,EAAY9G,MAClD2H,EAAOhB,GAAaT,EAAOnD,EAAEhD,KAAIC,GAAK8G,EAAY9G,MASxD,OAAI0H,GAAQ,EACH,CAAC,EAAG,GAAI,GAEbC,GAAQ,EACH,CAAC,GAAI,EAAG,GAGV,CAAC,GAAI,GAAI,EAClB,UAEgBC,GACZ1B,EAAmDY,EACnD7F,GAAS,GACX,GAAIA,EACF,MAAO,CAAC,EAAG,EAAG,GAGhB,MAAMyG,EAAOf,GAAaT,EAAO1E,EAAEzB,KAAIC,GAAK8G,EAAY9G,MAClD2H,EAAOhB,GAAaT,EAAOnD,EAAEhD,KAAIC,GAAK8G,EAAY9G,MAIxD,OAAI0H,GAAQ,EACH,CAAC,EAAG,EAAG,GAEZC,GAAQ,EACH,CAAC,EAAG,EAAG,GAGT,CAAC,EAAG,EAAG,EAChB,UAEgBE,GAAmB/H,GACjC,MAAO,CAAC0B,EAAG1B,EAAMC,KAAI,CAACC,EAAGG,IAAMA,IACjC,UAEgB2H,GAAmB9G,GACjC,GAAc,YAAVA,GAAiC,UAAVA,GAA+B,SAAVA,GAClC,WAAVA,EACF,OAAO,EACF,GAAc,cAAVA,EACT,OAAO,EAEP,MAAM,IAAI3D,MAAM,iBAAiB2D,IAErC,UAEgB+G,GAAwBC,EAAmBhH,GACzD,GAAc,YAAVA,EACF,OAAO,IAAIiH,aAAaD,GACnB,GAAc,UAAVhH,EACT,OAAO,IAAIkH,WAAWF,GACjB,GAAc,SAAVhH,GAA8B,WAAVA,EAC7B,OAAOmH,WAAWC,KAAK,IAAIF,WAAWF,IAEtC,MAAM,IAAI3K,MAAM,iBAAiB2D,IAErC,UAEgBqH,KACd,OAA2B,oBAAXC,QAEsB,oBAAtBC,sBACVC,UAAUC,GAClB,CAEA,IAAYC,IAAZ,SAAYA,GACVA,iDACAA,iDACAA,mEACAA,iDACAA,4BACD,CAND,CAAYA,KAAAA,gEApJRC,EAAoB7I,GACtB,GAAI6I,EAASlM,SAAWqD,EAAMrD,OAC5B,MAAM,IAAIY,MACN,+BAA+BsL,EAASlM,qCACTqD,EAAMrD,oCAG3C,OAAOqD,EAAM8I,OACT,CAACC,EAAaC,IAAmBD,EAAMF,EAASG,IAAY,GAClE,wPCwCA,MAAMC,GACF/N,IAAMgO,UAAU,2CA+BPC,WAAsBC,EA+BjC/N,YAAYM,EAAmBL,GAE7B,GADA+N,QArBM9N,0BAAuB,IAAI+N,QAC3B/N,6BAA0B,EAC1BA,eAAW,EACXA,oBAAiB,EAGjBA,+BAAsC,GAKtCA,4BAAuC,GAEvCA,4BAAuC,GACvCA,kBAAe,GAQhBgO,KACH,MAAM,IAAIhM,MAAM,0CAElBhC,KAAKiO,cAAgB,GACrBjO,KAAKI,OAASA,EACdJ,KAAKkO,MAAQ9N,EAAO8N,MACpBlO,KAAKmO,sBAAwB,KAC7BnO,KAAKoO,mBAAqB,KAC1BpO,KAAKqO,iBAAmBjO,EAAOkO,SAASxN,IAAI,mBAC5Cd,KAAKD,YAAc,IAAIF,GAAYE,GAEnCC,KAAKuO,cAAgB,IAAIpO,GAAcH,KAAKI,QAC5CJ,KAAKwO,eAAiB,IAAI1L,GAAe9C,KAAKI,QAC9CJ,KAAKyO,UAAY,IAAIC,EAAY1O,KAAM2O,KACnC3O,KAAKqO,mBACPrO,KAAK4O,SAAW5O,KAAKI,OAAOyO,eAAe,CACzCpG,KAAM,YACNqG,MAAO,KAMPnP,IAAMoP,QAAQ,6BAChB/O,KAAKgP,YAAcC,SAASC,cAAc,UAC1ClP,KAAKgP,YAAYhM,MAAQ,EACzBhD,KAAKgP,YAAY/L,OAAS,EAE1BjD,KAAKmP,aAAenP,KAAKgP,YAAYI,WAAW,UAChDpP,KAAKmP,aAAaE,UAAU,CAC1BjP,SACA8C,OAAQ,eAGV+L,SAASK,KAAKC,YAAYvP,KAAKgP,cAxC3BQ,aACN,OAAO5B,GAAc4B,aA2CvBC,iBACE,OAAO,GAGTC,wBACE,OAAOC,eAAeC,QAAUD,eAAeE,SAC3CF,eAAeG,SAUrBC,YAAYC,EAAgBC,GAAQ,GAClC,GAAIjQ,KAAKkQ,0BAA0BnO,QAAQiO,IAAW,EACpD,OAAO,EAET,IAAKhQ,KAAKyO,UAAU3N,IAAIkP,GACtB,OAAO,EAGT,MAAMG,EAAanQ,KAAKyO,UAAUtN,IAAI6O,GAEtC,GADAhQ,KAAKoQ,OAAOJ,IACPC,GAASE,EAAWE,SAAW,EAClC,OAAO,EAIT,GAAIrQ,KAAKsQ,qBAAqBxP,IAAIkP,GAEhC,OADAhQ,KAAKkQ,0BAA0B1O,KAAKwO,IAC7B,EAGT,MAAMO,mBAACA,GAAsBvQ,KAAKyO,UAAUtN,IAAI6O,GAShD,OAR0B,MAAtBO,IACFvQ,KAAK+P,YAAYQ,EAAmBC,KAAKR,OAAQC,GACjDjQ,KAAK+P,YAAYQ,EAAmBE,KAAKT,OAAQC,IAGnDjQ,KAAK0Q,gBAAgBV,GACrBhQ,KAAKyO,UAAUkC,OAAOX,IAEf,EAGTY,SACE,MAAO,CACLC,cAAe7Q,KAAKuO,cAActN,aAClC6P,uBAAwB9Q,KAAKuO,cAAc9M,kBAC3CsP,YAAY,GAIhBL,gBAAgBV,GACd,MAAMG,EAAanQ,KAAKyO,UAAUtN,IAAI6O,GACtC,GAAKG,GAAeA,EAAWa,aAA/B,CAGA,GAAI,YAAab,EAAWa,aAAc,CACxC,MAAMC,EAAcd,EAAWa,aAC3BC,EAAYpN,mBAAmBqN,YACjClR,KAAKwO,eAAe5K,eAChBqN,EAAYpN,QAASoN,EAAYjO,MAAOiO,EAAYhO,OACpDgO,EAAY/N,OAAQ+N,EAAYzQ,OAEtCyQ,EAAYpN,QAAU,SACjB,CACL,MAAMsN,EAAahB,EAAWa,aAC9BhR,KAAKuO,cAAc5M,cACfwP,EAAWvP,OAAQuP,EAAW5Q,KAAM4Q,EAAW3Q,OACnD2Q,EAAWvP,OAAS,KAEtBuO,EAAWa,aAAe,MAI5BX,SAASL,GACP,GAAIhQ,KAAKyO,UAAU3N,IAAIkP,GAAS,CAE9B,OADmBhQ,KAAKyO,UAAUtN,IAAI6O,GACpBK,SAEpB,OAAO,EAITe,OAAOpB,GACchQ,KAAKyO,UAAUtN,IAAI6O,GAC3BK,WAIbD,OAAOJ,GACL,GAAIhQ,KAAKyO,UAAU3N,IAAIkP,GAAS,CACXhQ,KAAKyO,UAAUtN,IAAI6O,GAC3BK,YAIfgB,MAAMC,EAAoC7M,EAAiBkB,GAEzD,GAAc,cAAVA,GAAmC,MAAV2L,EAC3B,MAAM,IAAItP,MACN,yEAGN,MAAMgO,EAAS,CAACuB,GAAIvR,KAAKwP,cAEzB,OADAxP,KAAKyO,UAAU1N,IAAIiP,EAAQ,CAACrK,QAAOlB,QAAO6M,SAAQjB,SAAU,IACrDL,EAGTwB,KACIxB,EAAgBsB,EAAoC7M,EACpDkB,EAAiB0K,GACnB,GAAc,cAAV1K,EACF,MAAM,IAAI3D,MACN,yEAGNhC,KAAKyO,UAAU1N,IAAIiP,EAAQ,CAACrK,QAAOlB,QAAO6M,SAAQjB,aAGpDoB,cACEzR,KAAK0R,yBACL1R,KAAKkO,MAAMyD,OAAO,CAAC3R,KAAKmO,sBAAsByD,WAC9C5R,KAAKmO,sBAAwB,KAC7BnO,KAAK6R,wBAA0B,EAE/B7R,KAAKsQ,qBAAuB,IAAIvC,QAEhC/N,KAAKkQ,0BAA0BvN,SAAQgC,IACrC3E,KAAK0Q,gBAAgB/L,GACrB3E,KAAKyO,UAAUkC,OAAOhM,EAAE,IAE1B3E,KAAK8R,uBAAuBnP,SACxBgC,GAAK3E,KAAKuO,cAAc5M,cAAcgD,EAAE/C,OAAQ+C,EAAEpE,KAAMoE,EAAEnE,SAC9DR,KAAK+R,uBAAuBpP,SACxBgC,GAAK3E,KAAKuO,cAAcrM,oBAAoByC,EAAE/C,OAAQ+C,EAAEpE,KAAMoE,EAAEnE,SAEpER,KAAKkQ,0BAA4B,GACjClQ,KAAK8R,uBAAyB,GAC9B9R,KAAK+R,uBAAyB,GAGhCC,4BACOhS,KAAKmO,wBACRnO,KAAKmO,sBAAwBnO,KAAKI,OAAO6R,wBAI7CP,yBACM1R,KAAKoO,qBACPpO,KAAKoO,mBAAmB8D,MACxBlS,KAAKoO,mBAAqB,MAI9B+D,iBAIE,OAHKnS,KAAKoO,qBACRpO,KAAKoO,mBAAqBpO,KAAKmO,sBAAsBiE,oBAEhDpS,KAAKoO,mBAGPiE,oBAAoBzQ,EAAmBrB,GAE5C,MAAM+R,EAAUtS,KAAKuO,cAAc9N,cAC/BF,EAAMoP,eAAeG,SAAWH,eAAe4C,UACnDvS,KAAKgS,4BACLhS,KAAK0R,yBACL1R,KAAKmO,sBAAsBqE,mBAAmB5Q,EAAQ,EAAG0Q,EAAS,EAAG/R,GACrEP,KAAKyR,oBAECa,EAAQnQ,SAASC,WAAWqQ,MAClC,MAAMnB,EAASgB,EAAQI,iBAAiBlM,MAAM,GAiB9C,OAfA8L,EAAQK,QACO,MAAXL,GACFtS,KAAKuO,cAAc5M,cACf2Q,EAAS/R,EAAMoP,eAAeG,SAAWH,eAAe4C,UAK1D5S,IAAMoP,QAAQ,6BAChBvF,EAAK4B,YACqBwH,IAAtB5S,KAAKmP,cACL,IAAM,2CACVnP,KAAKmP,aAAa0D,qBAGbvB,EAGDwB,qBAAqB9C,EAAgBrD,GAE3C,MAAMwD,EAAanQ,KAAKyO,UAAUtN,IAAI6O,GAGtC,OAFAhQ,KAAK0Q,gBAAgBV,GACrBG,EAAWmB,OAAS3E,EACbwD,EAAWmB,OAKpByB,SAAS/C,GACP,MAAMG,EAAanQ,KAAKyO,UAAUtN,IAAI6O,IAChCsB,OAACA,GAAUnB,EAEjB,GAAc,MAAVmB,EACF,MAAM,IAAItP,MACN,+DAGN,OAAOsP,EAGTe,WAAWrC,GACT,IAAKhQ,KAAKyO,UAAU3N,IAAIkP,GACtB,MAAM,IAAIhO,MAAM,UAAUgO,yBAE5B,MAAMG,EAAanQ,KAAKyO,UAAUtN,IAAI6O,IAEhCsB,OAACA,GAAUnB,EAEjB,GAAc,MAAVmB,EAGF,OAAOtR,KAAK8S,qBACD9C,EAAQsB,GAKrB,IAAI0B,EACJ,GAAyB,cAArB7C,EAAWxK,MAAuB,CACpC,MAAMsN,QAAWC,QAAQC,IAAI,CAC3BnT,KAAKoT,KAAKjD,EAAWI,mBAAmBC,KAAKR,QAC7ChQ,KAAKoT,KAAKjD,EAAWI,mBAAmBE,KAAKT,UAGzCqD,EAAaJ,EAAG,GAChBK,EAAaL,EAAG,GACtBD,EAAOrJ,EAAa4J,uBAChBF,EAA4BC,OAC3B,CACL,MAAMnC,EAAahB,EAAWa,aAE9BgC,EAAOQ,SADYxT,KAAKyT,cAActC,EAAWvP,OAAQuP,EAAW5Q,MAE3C4P,EAAWxK,OAGtC,OADA3F,KAAK8S,qBAAqB9C,EAAQgD,GAC3BA,EAOTU,UAAU1D,GACR,MAAM2D,EAAgB3T,KAAKyO,UAAUtN,IAAI6O,IACnCsB,OAACA,EAAM3L,MAAEA,EAAKlB,MAAEA,EAAKuM,aAAEA,GAAgB2C,EAE7C,GAAc,cAAVhO,EACF,MAAM,IAAI3D,MAAM,wDAGlB,GAAoB,MAAhBgP,EACF,MAAc,MAAVM,EACI,IAAItP,MAAM,kCAEV,IAAIA,MAAM,mCAIpB,MAAMzB,EAAQyQ,EAA4BzQ,KACpCqB,EAAS5B,KAAKuO,cAAc9N,cAAcF,EAAMyQ,EAAaxQ,OACnER,KAAKgS,4BACLhS,KAAK0R,yBACL1R,KAAKmO,sBAAsBqE,mBACtBxB,EAA4BpP,OAAQ,EAAGA,EAAQ,EAAGrB,GACvDP,KAAKyR,cAEL,MAAMmC,EAAa5T,KAAK6T,eAAepP,EAAOkB,GAExCmO,EAAYnF,IAASoF,yBAAyBH,GAMpD,OAJmB5T,KAAKyO,UAAUtN,IAAIyS,EAAW5D,QAE5CgB,aAAe,CAACzQ,OAAMC,MAAOR,KAAK0P,wBAAyB9N,UAEzD,CAACkS,YAAWlS,SAAQoS,QAASzT,GAGtC0T,WAA+CC,GAE7C,MAAMvH,EAAO3M,KAAK+S,SAASmB,EAAElE,QAC7B,GAAgB,WAAZkE,EAAEvO,MACJ,IAEE,MAAMwO,EAAWxH,EAAsBjI,KAAIC,GAAK6E,EAAK4K,aAAazP,KAClE,OAAO/C,EAAOsS,EAAEzP,MAAsByP,EAAEvO,MAAOwO,GAE/C,SACA,MAAM,IAAInS,MAAM,oDAGpB,OAAOJ,EAAOsS,EAAEzP,MAAsByP,EAAEvO,MAAOgH,GAIjD0F,WAAWgC,GACJrU,KAAKqO,kBACRiG,QAAQC,KACJ,kVAON,MAAMC,EAAkBxU,KAAKyU,aACvBC,EAA+B,GAErC,IAAIC,GAAgB,EACW,MAA3B3U,KAAK4U,oBACP5U,KAAK4U,mBAAqBF,EAC1BC,GAAgB,GAEhB3U,KAAKyU,aAAajT,KAAKkT,GAEzB1U,KAAKyU,aAAeC,EAEpBL,IAEA,MAAMQ,EACFrL,EAAKsL,QAAQ9U,KAAKyU,aAAa/P,KAAKC,GAAwBA,EAAEoQ,SACzDC,QAAOrQ,GAAU,MAALA,IACfsQ,EACFzL,EAAKsL,QAAQ9U,KAAKyU,aAAa/P,KAAKC,GAAwBA,EAAEoE,QACzDiM,QAAOrQ,GAAU,MAALA,IAErB3E,KAAKyU,aAAeD,EAEhBG,IACF3U,KAAK4U,mBAAqB,MAE5B,MAAM/L,EAAwB,CAC5BqM,aAAclV,KAAKkV,aACnBC,eAAgBnV,KAAKmV,eACrBC,SAAU,KACVC,OAAQ,MAGJD,QAAiBlC,QAAQC,IAAI0B,GAQnC,OAPAhM,EAAc,SAAIW,EAAK8L,IAAIF,GAC3BvM,EAAyB,oBAAI,IACzBuM,EAAS1Q,KAAI,CAACC,EAAGG,MAAQiE,KAAMkM,EAA0BnQ,GAAIyQ,GAAI5Q,MAC5DD,KAAIC,GAAK,GAAGA,EAAEoE,SAASpE,EAAE4Q,OACzBzP,KAAK,MACd9F,KAAKkV,aAAe,EACpBlV,KAAKmV,eAAiB,EACftM,EAGTgL,eACIpP,EAAiBkB,EACjB2L,GACY,WAAV3L,GAAgC,MAAV2L,GAAkBA,EAAOlQ,OAAS,GACxDoI,EAAKgM,SAASlE,EAAO,MACvBA,EAAUA,EAA0B5M,KAAIC,GAAK6E,EAAKiM,aAAa9Q,MAIjE,MAAO,CAACqL,OADJhQ,KAAKqR,MAAMC,EAAsC7M,EAAOkB,GAC5ClB,QAAOkB,SAGjB+P,gBAAgBC,GACtB,IAAKA,EACH,OAAO,KAGT,MAAMxF,EAAanQ,KAAKyO,UAAUtN,IAAIwU,EAAO3F,QAC7C,GAAI,YAAaG,EAAWa,aAAc,CACxC,MAAM4E,EAAOzF,EAAWa,aACxB,OAAI4E,EAAK/R,mBAAmBgS,mBACnBD,EAAK/R,QAEL+R,EAAK/R,QAAQiS,aAGxB,MAAM3E,EAAahB,EAAWa,aAC9B,MAAO,CAAC+E,OAAQ,EAAGxV,KAAM4Q,EAAW5Q,KAAMqB,OAAQuP,EAAWvP,QAG/DyQ,mBAAmB0C,GACjB,OAAI/U,KAAKqO,iBACArO,KAAKgW,oBAAoBjB,GAEzB,EAIXkB,YAAYjG,GACV,MAAMG,EAAanQ,KAAKyO,UAAUtN,IAAI6O,GAEtC,GAAIG,EAAWa,aACb,OAGF,MAAMzQ,EAAO2V,GAA+B/F,EAAWxK,OACnD6D,EAAK2M,cAAchG,EAAW1L,OAC5B7C,EACF5B,KAAKuO,cAAc9N,cAAcF,EAAMP,KAAK0P,yBAIhD,GAFAS,EACKa,aAAe,CAACzQ,OAAMC,MAAOR,KAAK0P,wBAAyB9N,UAC5DuO,EAAWmB,OAAQ,CACrB,MAAM8E,EAAgBpW,KAAKuO,cAAcjO,oBACrCC,EAAMoP,eAAe0G,UAAY1G,eAAeE,UAC9CyG,EAAcF,EAAc1D,iBACT,UAArBvC,EAAWxK,OAA0C,SAArBwK,EAAWxK,MAC7C,IAAIkH,WAAWyJ,GAAavV,IAAIoP,EAAWmB,QAE3C,IAAI1E,aAAa0J,GAAavV,IAAIoP,EAAWmB,QAE/C8E,EAAczD,QACd3S,KAAKgS,4BACLhS,KAAK0R,yBACL1R,KAAKmO,sBAAsBqE,mBACvB4D,EAAe,EAAGxU,EAAQ,EAAGrB,GAEjC,MAAMgW,EAAc,CAClBhW,OACAC,MAAOmP,eAAe0G,UAAY1G,eAAeE,SACjDjO,OAAQwU,GAEVpW,KAAK+R,uBAAuBvQ,KAAK+U,IAU7BC,aAAaC,GACnB,IAAIC,EAAgB,EAChBC,EAAY,EAChB,MAAMC,EAAoB,GAC1BH,EAAe9T,SAASgC,IAKtB,IAAIkS,EACJ,OALsB,IAAlBlS,EAAEgI,KAAKvL,SACTuD,EAAEgI,KAAO,CAAC,IAIJhI,EAAEgI,KAAKvL,QACb,KAAK,EACHyV,EAAgB,EAChB,MACF,KAAK,EACHA,EAAgB,EAChB,MACF,KAAK,EAGL,KAAK,EAGL,KAAK,EAGL,KAAK,EACHA,EAAgB,GAChB,MACF,QACErN,EAAK4B,QAAO,GAAO,IAAM,eAAezG,EAAEgI,KAAKvL,kBAGjC,IAAduV,GAAiC,IAAdA,IACrBE,EAAgB,IAElBH,EAAgBpS,KAAKwH,KAAK4K,EAAgBG,GAAiBA,EAC3DF,EAAYhS,EAAEgI,KAAKvL,OACnBwV,EAAQpV,KAAKkV,GACbA,GAAiC,EAAhB/R,EAAEgI,KAAKvL,MAAU,IAGpC,MAAMkV,EAAc,IAAIQ,YAAYJ,GACpCD,EAAe9T,SAAQ,CAACgC,EAAGG,KACzB,MAAMiR,EAASa,EAAQ9R,GACR,UAAXH,EAAE8D,KACJ,IAAIoE,WAAWyJ,EAAaP,EAAQpR,EAAEgI,KAAKvL,QAAQL,IAAI4D,EAAEgI,MACrC,WAAXhI,EAAE8D,KACX,IAAIsO,YAAYT,EAAaP,EAAQpR,EAAEgI,KAAKvL,QAAQL,IAAI4D,EAAEgI,MAE1D,IAAIC,aAAa0J,EAAaP,EAAQpR,EAAEgI,KAAKvL,QAAQL,IAAI4D,EAAEgI,SAI/D,MAAMqK,EAAgBhX,KAAKuO,cAAc9N,cACrCiW,EAAe/G,eAAeG,SAAWH,eAAesH,SAC5DjX,KAAKkO,MAAMgJ,YAAYF,EAAe,EAAGV,EAAa,EAAGI,GAEzD,MAAMS,EAAc,CAClB5W,KAAMmW,EACNlW,MAAOmP,eAAeG,SAAWH,eAAesH,QAChDrV,OAAQoV,GAIV,OAFAhX,KAAK8R,uBAAuBtQ,KAAK2V,GAE1B,CAACpB,OAAQ,EAAGxV,KAAMmW,EAAe9U,OAAQoV,GAG3CI,iBACHpS,EAAuCkE,EACvCmO,EAAuBC,EACvBpS,GAIF,GAHKA,IACHA,EAASlF,KAAK6T,eAAe7O,EAAQyG,YAAa4L,IAEX,IAArC7N,EAAK2M,cAAcjR,EAAOT,OAK5B,OAFAzE,KAAKyO,UAAUtN,IAAI+D,EAAO8K,QAAQsB,OAC9B9H,EAAK+N,uBAAuBrS,EAAOS,MAAoB,GACpDT,EAETlF,KAAKiW,YAAY/Q,EAAO8K,QACxBhL,EAAQqG,SArnBR,EAACjL,EACA4E,KACC,MAAMwS,EACFpX,EAAOqX,OAAOC,iCACZ7M,EAAS7F,EAAwB,eACjCqG,EAAWrG,EAAkB,SACnC,GAAIqG,EAASkC,OAAO5I,GAAMA,GAAK6S,IAC7B,OAAOnM,EAGT7B,EAAK4B,OACDC,EAAS,GAAKmM,QACG5E,IAAb/H,EAAOnD,QAAgCkL,IAAb/H,EAAOlD,GACrC,IAAM,6DAEV,IAAIgQ,EAAkBrT,KAAKwH,KAAKxH,KAAKsT,KAAKvM,EAAS,KACnD,OAAIsM,EAAkBH,GACpBG,EAAkBrT,KAAKwH,KAAKxH,KAAKuT,KAAKxM,EAAS,KAC/C7B,EAAK4B,OACDuM,GAAmBH,GACnB,IAAM,gDACH,CAACG,EAAiBA,EAAiBA,IAEnC,CAACA,EAAiBA,EAAiB,IA8lB3BG,CAAgB9X,KAAKI,OAAQ4E,GAIhD,IAAIyR,EAAiC,GACjCsB,EAA2B,GAC/B,IAAK/S,EAAQS,aAAc,CACzBgR,EAAejV,KAAK,CAACiH,KAAM,UAAWkE,KAAM,CAACqL,OAC7CD,EAAe7O,EAAO+O,OAAO/S,GAAQR,KAAIC,GAAKA,EAAEF,QAChD,MAAMyT,EAAe,QACrBH,EAAarT,KAAIC,IACf8R,EAAejV,KAAK,CAACiH,KAAMyP,EAAcvL,KAAMhI,GAAG,IAEpD,MAAMC,EAAU4E,EAAK0B,eAAehG,EAAOT,OAE3C,GADAgS,EAAejV,KAAK,CAACiH,KAAMyP,EAAcvL,KAAM/H,IAC3CI,EAAQzE,KAAM,CAChB,MAAMA,EAAOiJ,EAAK2M,cAAcnR,EAAQyG,aACxCgL,EAAejV,KACX,CAACiH,KAAMyP,EAAcvL,KAAM,CAAC3H,EAAQY,OAASrF,EAAO,EAAIA,MAIhE,MAAM0E,EAAaiE,EAAOxE,KAAI,CAACyT,EAAmBrT,KAChD,GAAoB,cAAhBqT,EAAMxS,MACR,MAAM,IAAI3D,MACN,mIAMN,OAFAhC,KAAKiW,YAAYkC,EAAMnI,QAEhB,CAGLrK,MAAO3F,KAAKyO,UAAUtN,IAAIgX,EAAMnI,QAAQrK,MACxClB,MAAO0T,EAAM1T,MACbsE,KAAM/D,EAAQkB,cAAcpB,GAC7B,IAGGnE,WFhdNqE,EAAwBoT,EAA4BnT,EACpDC,GACF,IAAIvE,EAAMqE,EAAQqT,UAClB,GAAIrT,EAAQS,aACV,OAAO9E,EAGT,MAAM2X,EAAQrT,EAAWP,KAAIC,GAAKA,EAAEgB,QAAOsS,OAAO/S,EAAOS,OACnD+D,EACFzE,EAAWP,KAAIC,GAAKgF,EAAaC,iBAAiBjF,EAAEF,MAAOS,EAAOT,SAChE8T,EACFtT,EAAWP,KAAIC,GAAK6E,EAAKC,YAAY9E,EAAEF,MAAOS,EAAOT,SAAQqB,KAAK,KAChE0S,EAAmB9O,EAAchF,KAAIC,GAAKA,EAAEmB,KAAK,OAAMA,KAAK,KAE5D2S,EAAqBjT,GAAeR,GAAW,eAAiB,GAOtE,OALArE,GAAO,KAAOqE,EAAQO,cAAgBP,EAAQO,cAAcO,KAAK,KAAO,IACpEsS,EAAO1T,KAAID,GAASA,EAAMrD,SAAQ0E,KAAK,KAAOwS,EAAMxS,KAAK,KACzDd,EAAQkB,cAAcJ,KAAK,KAAO0S,EAClCD,EAA4BE,EAEzB9X,CACT,CE2bQ+X,CAA6B1T,EAAS+S,EAAc9S,EAAYC,GAEpE,IAAIyT,EACAhY,KAAOX,KAAKiO,cACd0K,EAAW3Y,KAAKiO,cAActN,IAE9BgY,EAAWC,GACP5Y,KAAKI,OAAQ4E,EAASC,EAAYC,GACtClF,KAAKiO,cAActN,GAAOgY,GAGxBrB,IACFb,EAAiB,IAAIA,KAAmBa,IAE1C,MAAMuB,EAAW,CACf7Y,KAAK0V,gBAAgBxQ,MAAYgE,EAAOxE,KAAIwP,GAAKlU,KAAK0V,gBAAgBxB,KACtElU,KAAKwW,aAAaC,IAGdqC,EAAY9Y,KAAKI,OAAO2Y,gBAAgB,CAC5ClO,OAAQ8N,EAASK,mBAAmB,GACpCC,QAASJ,EAASnU,KAAI,CAACwU,EAAGpU,MAAQqU,QAASrU,EAAGsU,SAAUF,QAG1DlZ,KAAKgS,4BACL,MAAMqH,EAAOrZ,KAAKmS,iBACZmH,EAAyC,MAArBtZ,KAAKyU,aAmC/B,OAlCI6E,GACEtZ,KAAKqO,kBAENgL,EAAaE,eAAevZ,KAAK4O,SAAU,GAGhDyK,EAAKG,YAAYb,GACjBU,EAAKI,aAAa,EAAGX,GACrBO,EAAKK,mBACD1U,EAAQqG,SAAS,GAAIrG,EAAQqG,SAAS,GAAIrG,EAAQqG,SAAS,IAC3DiO,GACEtZ,KAAKqO,kBAENgL,EAAaE,eAAevZ,KAAK4O,SAAU,GAGhD5O,KAAK6R,0BAEL3I,EAAOvG,SAAQwV,IACbnY,KAAKsQ,qBAAqBqJ,IAAIxB,EAAMnI,OAAO,IAE7ChQ,KAAKsQ,qBAAqBqJ,IAAIzU,EAAO8K,QAEjCrQ,IAAMwB,IAAI,sCACAnB,KAAK6R,yBACjB7R,KAAKyR,cAGH6H,GACFtZ,KAAKyU,aAAajT,KAAK,CACrBuH,KAAM/D,EAAQlF,YAAYiJ,KAC1BgM,MAAO/U,KAAK4Z,aAAa5Z,KAAK4O,YAG3B1J,EAGTmN,0BAA0BzD,GACxB,MAAMiL,EAAc7Z,KAAKuO,cAAc9N,cACnC,GAAIkP,eAAeE,SAAWF,eAAemK,eAC3CC,EAAM/Z,KAAKuO,cAAc9N,cAC3B,GAAIkP,eAAe4C,SAAW5C,eAAeG,UAEjD9P,KAAKgS,4BACLhS,KAAK0R,yBACL1R,KAAKmO,sBAAsB6L,gBAAgBpL,EAAU,EAAG,EAAGiL,EAAa,GACxE7Z,KAAKmO,sBAAsBqE,mBAAmBqH,EAAa,EAAGE,EAAK,EAAG,IACtE/Z,KAAKyR,oBACCsI,EAAI5X,SAASC,WAAWqQ,MAC9B,MAAMwH,EAAW,IAAIC,eAAeH,EAAIrH,kBAClCyH,EAAmBC,OAAQH,EAAS,GAAKA,EAAS,IAQxD,OAPAF,EAAIpH,QACJ3S,KAAKuO,cAAc5M,cACfoY,EAAK,GAAIpK,eAAe4C,SAAW5C,eAAeG,UACtD9P,KAAKuO,cAAc5M,cACfkY,EAAa,GACblK,eAAeE,SAAWF,eAAemK,eAEtCK,EAAmB,IAG5BE,mBACInR,EACAoR,EAAgB5M,IAClB,OAAO/N,IAAMoP,QAAQ,uBACjB7F,EAAOqE,OACH4K,GAA0D,MAAjDnY,KAAKyO,UAAUtN,IAAIgX,EAAMnI,QAAQgB,cACtCxH,EAAK2M,cAAcgC,EAAM1T,OAAS6V,IAGhDC,aACE,OAAOva,KAAKyO,UAAU8L,aAAeva,KAAKkQ,0BAA0B9O,OAGtEsB,UACM1C,KAAKwa,WAGTxa,KAAKuO,cAAc7L,UACnB1C,KAAKwO,eAAe9L,UACpB1C,KAAKwa,UAAW,ICz0BpB,IAAYC,GD6GK7M,cAAa,EEtG1BZ,MACF0N,EAAgB,UAAUrI,UAGxB1S,IAAMoB,IAAI,gCAAgC,GAE1C,MAAM4Z,EAA0C,CAC9CC,gBAAiBjb,IAAMwB,IAAI,4BACvB,YACA,oBAGA0Z,QAAgB1N,UAAUC,IAAI0N,eAAeH,GAC7CI,EAAgBF,EAAQpD,OACxBuD,EAAwC,GACxC3M,EAAmBwM,EAAQvM,SAASxN,IAAI,mBAC9Cka,EAAiBC,eAAiB,CAChCC,+BACIH,EAAcG,+BAClBxD,iCACIqD,EAAcrD,iCAClByD,4BAA+BJ,EAAcI,6BAG3C9M,IACF2M,EAAiBI,iBAAmB,CAAC,oBAEvC,MAAMhb,QAA0Bya,EAAQQ,cAAcL,GAEhDjb,QAAqB8a,EAAgBS,qBAC3C,OAAO,IAAI1N,GAAcxN,EAAQL,EAAY,GAC5C,GDtCL,SAAY0a,GACVA,iBACAA,iBACAA,qBACAA,iBACAA,iBACAA,qBACAA,yBACAA,qCACAA,mBACAA,+BACAA,kCACAA,8BACAA,gDACAA,0BACAA,kBACAA,sBACAA,kBACAA,kBACAA,sDACAA,qDACD,CArBD,CAAYA,KAAAA,QAuBZ,MAKMc,GAA+B,uOAe/BC,GAAyB,mDAE3BD,SA+DEE,GAAiB,wEAGnBD,+BAgBEE,GAAW,yqBAsBbH,+BAUJ,SAASI,GACLC,EAAYC,EAAkBC,EAAc,gBAC9C,MAAMC,EAAkBF,EAAUL,GA1IV,qEA2IxB,OAAOK,EAAU,2BACKC,sCACSF,kBACzBG,EACE,+BAGSA,EAAkB,gBACxBH,cAEb,UAEgBI,GACZvT,EAAoBoT,GACtB,OAAQpT,GACN,KAAKgS,GAAawB,IAChB,MA1HM,gBA2HR,KAAKxB,GAAayB,IAChB,MApIM,gBAqIR,KAAKzB,GAAa0B,MAChB,OAAOR,GAAuB,QAASE,GACzC,KAAKpB,GAAa2B,IAChB,MA9HM,gBA+HR,KAAK3B,GAAa4B,IAChB,MAnIM,gBAoIR,KAAK5B,GAAa6B,MAChB,OAAOT,EAhIM,4BADL,sBAkIV,KAAKpB,GAAa8B,QAChB,OAAOV,EAhIQ,2BADL,qBAkIZ,KAAKpB,GAAa+B,cAChB,OAAOX,EAhIc,4BADL,sBAkIlB,KAAKpB,GAAagC,KAChB,OAAOZ,EAhIK,2BADL,qBAkIT,KAAKpB,GAAaiC,WAChB,OAAOb,EAhIW,4BADL,sBAkIf,KAAKpB,GAAakC,YAChB,OAAOd,EAhIY,+EADL,8CAkIhB,KAAKpB,GAAamC,UAChB,OAAOf,EAAUJ,GAlGL,iFAmGd,KAAKhB,GAAaoC,mBAChB,MAjJqB,4BAkJvB,KAAKpC,GAAaqC,QAChB,OAAOjB,EA7HQ,kjBAPL,2HAqIZ,KAAKpB,GAAasC,MAChB,OAAOlB,EApDM,2IADL,4CAsDV,KAAKpB,GAAauC,IAChB,OAAOrB,GAAuB,MAAOE,GACvC,KAAKpB,GAAawC,IAChB,OAAOtB,GAAuB,MAAOE,GACvC,KAAKpB,GAAayC,IAChB,OAAOrB,EAAUH,GAjGX,0NAkGR,KAAKjB,GAAa0C,sBAChB,MAjKwB,wCAkK1B,KAAK1C,GAAa2C,sBAChB,MAlKwB,wCAmK1B,QACE,MAAM,IAAIpb,MAAM,cAAcyG,yBAEpC,CE5NA,IAAY4U,IAAZ,SAAYA,GACVA,iBACAA,mBACAA,iBACAA,mBACAA,iBACAA,iBACAA,qBACAA,qBACAA,uBACAA,uBACAA,kBACAA,kCACAA,kBACAA,oBACAA,sBACAA,8BACAA,gCACAA,sBACAA,kBACAA,oBACAA,0BACAA,oBACAA,wBACAA,oBACAA,uBACD,CA1BD,CAAYA,KAAAA,iBAyFIC,GAAiB7U,EAAmBoT,GAClD,OAAQpT,GACN,KAAK4U,GAAYE,IACf,MAhEM,iBAiER,KAAKF,GAAYG,IACf,MAhEM,iBAiER,KAAKH,GAAYI,KACf,MAjEO,8DAkET,KAAKJ,GAAYK,KACf,MArEO,kBAsET,KAAKL,GAAYM,IACf,OAAO9B,EA/DI,wQADL,sDAiER,KAAKwB,GAAYO,IACf,MAjDM,iBAkDR,KAAKP,GAAYQ,MACf,MArEQ,uBAsEV,KAAKR,GAAYS,MACf,MApDQ,mBAqDV,KAAKT,GAAYU,OACf,MArDS,wBAsDX,KAAKV,GAAYW,OACf,MAtDS,YAuDX,KAAKX,GAAYY,IACf,MAvDM,0DAwDR,KAAKZ,GAAYa,YACf,MAvDc,2BAwDhB,KAAKb,GAAYc,IACf,MAxDM,aAyDR,KAAKd,GAAYe,UACf,OAAOvC,EAxDU,sJADL,wDA0Dd,KAAKwB,GAAYgB,WACf,MAtDa,kBAuDf,KAAKhB,GAAYiB,KACf,OAAOzC,EAnDK,8DAJL,kCAwDT,KAAKwB,GAAYkB,MACf,OAAO1C,EAtDT,iFAFU,6BAyDV,KAAKwB,GAAYmB,MACf,MApDQ,sBAqDV,KAAKnB,GAAYoB,QACf,MArDU,sCAsDZ,KAAKpB,GAAYqB,IACf,MAtDM,iBAuDR,KAAKrB,GAAYsB,KACf,MAvDO,6DAwDT,KAAKtB,GAAYuB,KACf,MArDO,kBAsDT,KAAKvB,GAAYwB,OACf,MAtDS,gBAuDX,KAAKxB,GAAYyB,KACf,MAvDO,qFAwDT,KAAKzB,GAAY0B,OACf,MArDS,wBAuDX,QACE,MAAM,IAAI/c,MAAM,cAAcyG,yBAEpC,CC5IO,MAAMuW,GAAeC,IAC1B,OAAQA,GACN,KAAK,EACH,MAAO,MACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,YACT,QACE,MAAM,IAAIjd,MAAM,GAAGid,4CAITC,GACZC,EAAqCC,GAA4B,EACjEC,GAAS,EAAOC,EAAe,GACjC,GAAmB,OAAfH,EACF,MAAO,GAGT,IAAII,EAAsB,GAC1B,GAAmB,WAAfJ,EACFI,EAAsBjC,GAAiBD,GAAYW,aAC9C,GAAmB,SAAfmB,EACTI,EAAsBjC,GAAiBD,GAAYiB,KAAMe,QACpD,GAAmB,QAAfF,EACTI,EAAsBjC,GAAiBD,GAAYM,IAAK0B,QACnD,GAAmB,UAAfF,EACTI,EAAsBjC,GAAiBD,GAAYkB,MAAOc,QACrD,GAAmB,UAAfF,EACTI,EAAsBvD,GAAkBvB,GAAasC,MAAOsC,QACvD,GAAmB,YAAfF,EACTI,EAAsBjC,GAAiBD,GAAYoB,QAASY,OACvD,IAAmB,cAAfF,EAGT,MAAM,IAAInd,MAAM,cACZmd,sDAHJI,EAAsBjC,GAAiBD,GAAYe,UAAWiB,GAKhE,MACMG,EAAWR,GADGK,EAAS,EAAI,GAEjC,IAAIH,EAAsB,GAe1B,OAbEA,EADEE,EACoB,6BACAI,kBAAyBF,cAC3CE,kFAEED,aAGgB,6BACAC,kBAAyBF,cAC3CE,gBACED,aAGDL,CACT,UAEgBO,GACZC,EAAkBP,GACpB,MAAO,WACDO,EAAU,iDAAmD,aAC7DP,EAAa,qCAAuC,YAE5D,UCnEgBQ,GACZC,EAAyBC,EAAyB1T,EAClD2T,EAAqBC,GAAY,EAAOC,GAAY,EAAOC,GAAW,EACtEhB,EAAY,GACdzV,EAAK4B,OACDe,GAA4B,IAAd8S,IAAoB9S,GAClC,IAAM,cAAcA,2CAChB8S,MACR,MAAMiB,EAAU,uBACEN,EAAiB,IAAM,qBAErCzT,EAAa,iCACA,2CAGXgU,EAAUL,EAAa,iCACA,iCAE7B,MAAO,0DAC8Cd,GAAYC,yBACjDD,GAAYC,mCACNA,WAElBc,GAAaE,EACTC,EACA,SAEI/T,EACI,0DACA,4EAEV+T,oGAM+ClB,GAAYC,+BAC3CA,uBACNY,EAAiB,IAAM,+BACvBb,GAAYC,iBACxBkB,+BAIN,UAEgBC,GACZV,EAAkBP,EAClBS,EAAyBC,EAAyB1T,EAClD2T,EAAqBC,GAAY,EAAOC,GAAY,EAAOC,GAAW,EACtEhB,EAAY,GACd,MAAO,OAEHU,GACIC,EAAgBC,EAAgB1T,EAAY2T,EAAYC,EACxDC,EAAWC,EAAUhB,gEAEzBD,GAAYC,gCACMA,WAElBc,GAAaC,EACT,GACA,yJAIFP,GAAsBC,EAASP,sFAKvC,UAqDgBkB,GACZC,EAAyB/a,EACzB4G,GAAa,EAAOoU,EAAY,GAAIC,GAAS,EAAOC,EAAkB,GACtEC,GAAY,GACd,MAAMC,EAAapb,EAAc,GAAK+a,EAAc,GAC9CM,EAAarb,EAAc,GAAK+a,EAAc,GAC9CO,EAAa1U,EAAawU,EAAaJ,EACvCO,EAAa3U,EAAaoU,EAAYI,EACtCI,EAAmBF,EAAatb,EAAc,GAC9Cyb,EAAgBT,EAAYhb,EAAc,GAahD,OAZAiE,EAAK4B,QACCe,GAAmC,IAArB4U,GAA+C,IAArBT,EAAc,KACrDnU,IAAoC,IAArB4U,GAA+C,IAArBA,KACxCF,EAAatb,EAAc,IAAO,GAClCgb,EAAYhb,EAAc,IAAO,GAA0B,IAArB+a,EAAc,IACxD,IAAM,iBAAiBnU,+BACnB4U,0BAAyCT,EAAc,wDACzBS,uCACrBF,0CACTtb,EAAc,iBACdgb,2CACAhb,EAAc,oBAAoB+a,EAAc,kBACjD,+CACmCS,WACtCF,EAAaE,OAAsBD,0DAEnCF,EAAaN,EAAc,QAAQC,iCAEhBD,EAAc,+BACdA,EAAc,mCACVS,2BACPR,meAYFG,EAAY,IAAM,wFAGhBA,EAAY,IAAM,4FAEtBF,EAAS,IAAM,qEACeG,4BAG1CH,EAAS,GAAGlc,KAAKwH,KAAK2U,EAAkBF,KAC/B,gEACIC,EAAS,qBAAqBC,IAAoB,6HAKrCO,8RA9GG,CAACC,GAC9BA,EACK,4JAOA,uJA2GGC,CAA2B/U,gHAKnC6U,8nBAcqB,IAArBD,EACI,GACA,+EAvHN,EAAC5U,EAAqB4U,IAChB5U,EACK,wNAKkB,IAArB4U,EACI,GACA,mSAMiB,IAArBA,EACI,GACA,yDAGD,kRAOkB,IAArBA,EAAyB,GACA,uDA6FvBI,CAAuBhV,EAAY4U,6NAUjD,CAEA,MAAMK,GAA0BH,GAC1BA,EACK,yIAOA,kJAgBKI,GACZf,EAAyB/a,EACzB4G,GAAa,EAAOoU,EAAY,GAAIC,GAAS,EAAOC,EAAkB,GACtEa,GAA4B,GAC9B,MAAMX,EAAaL,EAAc,GAAK/a,EAAc,GAC9Cqb,EAAaN,EAAc,GAAK/a,EAAc,GAC9Csb,EAAa1U,EAAawU,EAAaJ,EACvCO,EAAa3U,EAAaoU,EAAYI,EAC5CnX,EAAK4B,OACD0V,EAAavb,EAAc,IAAO,GAC9Bsb,EAAatb,EAAc,IAAO,GAClCgb,EAAYhb,EAAc,IAAO,GACrC,IAAM,cAAcub,0CAChBvb,EAAc,kBACdsb,0CACAtb,EAAc,iBACdgb,0CAAkDhb,EAAc,OACxE,MAAMgc,EAAgBT,EAAavb,EAAc,GAC3Cic,EAAgBX,EAAatb,EAAc,GAC3Cyb,EAAgBT,EAAYhb,EAAc,GAC1Ckc,EAAgBH,EAClB,iIAG4CX,uDACAC,oMAMxCE,4BAAqCvb,EAAc,6DAEnDsb,4BAAqCtb,EAAc,sBAC/C6b,GAAuBjV,kIAK3BoU,4BAAoChb,EAAc,iEAElDqb,4BAAqCrb,EAAc,8gBAaAA,EAAc,sIAIjE4G,EACI,oCAAoC5G,EAAc,OAClD,iCAAiCA,EAAc,kbAUDA,EAAc,wJAEZA,EAAc,mGAKtE,yPAMwCob,2CAEVY,yCACAC,yCACAR,2KAK1BO,0EAEAC,oIAGAJ,GAAuBjV,6GAMvB6U,iwBA/GsB,CAAC7U,GACxBA,EAAa,gDAEA,gDAgIZuV,CAAwBvV,wgBAkBhC,MAAO,mDACuC0U,OAAgBC,sDAChBF,OAAgBL,iCACrCD,EAAc,iCACdA,EAAc,8BACjBC,+cAWJC,EAAS,IAAM,4CAE7BA,EAAS,GAAGlc,KAAKwH,KAAK2U,EAAkBF,KAC/B,kEACMC,EAAS,qBAAqBC,IAAoB,4XAU/DgB,cAGR,OA+DaE,GAwBX7hB,YACI8hB,EAAkCnW,EAClCmU,EAAyBC,EAAyB1T,GAAa,EAC/D2T,GAAa,EAAO+B,EAAmB,KACvC1C,EAAsC,KACtC2C,EAAqC,KACrCR,GAA4B,GAzBhCthB,mBAAgB,CAAC,IAAK,KACtBA,cAAW,oDAyBTA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB,CAACtB,EAAG,CAAC,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,IAC3C,MAAMsE,EAAWE,EAAayV,EAAO,GAAKA,EAAO,GAMjD,GALA5hB,KAAK4F,QAAWqG,EAAW,GAAM,IAAME,GACvBV,EAAY,GAAK,GAAM,GAAKU,IACxCV,EAAY,GAAK,GAAM,IAAMqU,EACjC9f,KAAK0gB,UAA+B,IAAnBjV,EAAY,KAAaU,GAErCnM,KAAK4F,QAAU5F,KAAK0gB,UAEvB1gB,KAAK0L,kBAAoB,CAAC,EAAG,EAAG,GAChC1L,KAAKuF,cAAgB,CAAC,GAAI,EAAG,OACxB,CACL,MAAMwc,EAAgBhW,GAClBN,EAAY,GAAIQ,EAAUR,EAAY,GAAIU,GAC9CnM,KAAKuF,cAAgBwc,EAAcxc,cACnCvF,KAAK0L,kBAAoBqW,EAAcrW,kBAGzC1L,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5CvF,KAAK0L,mBAET,MAAMsW,EAAkB,MAARH,EACVzC,EAAsD,MAA1B0C,EAC9BE,GACFhiB,KAAKkG,cAAc1E,KAAK,QAGtB4d,GACFpf,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAKshB,0BAA4BA,EACjCthB,KAAKmM,WAAaA,EAClBnM,KAAK8f,WAAaA,EAClB9f,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKof,0BAA4BA,EACjCpf,KAAK4f,eAAiBA,EACtB5f,KAAK6f,eAAiBA,GACrB7f,KAAK+f,UAAW/f,KAAKggB,UAAWhgB,KAAKigB,UAClCjgB,KAAKiiB,YAAYxW,EAAY,GAAIA,EAAY,GAAIQ,GACrDjM,KAAKqY,UAAY,gBAAgBrY,KAAK0L,qBAAqBS,KACvD2T,KAAc9f,KAAKmf,cAAcnf,KAAK+f,aAAa/f,KAAKggB,aACxDhgB,KAAKigB,YAAYjgB,KAAK4F,UAAU5F,KAAK0gB,aACrC1gB,KAAK4f,kBAAkB5f,KAAK6f,kBAC5B7f,KAAKshB,4BAGXW,YAAYjW,EAAmBE,EAAmBD,GAEhD,MAAM0U,EAAa3gB,KAAKuF,cAAc,GAAKvF,KAAK0L,kBAAkB,GAC5DkV,EAAa5gB,KAAKuF,cAAc,GAAKvF,KAAK0L,kBAAkB,IAE7D1L,KAAK4F,QAAU5F,KAAK0gB,UAEvB1gB,KAAKugB,UAAoC,EAAxBvgB,KAAKuF,cAAc,GAEpCvF,KAAKugB,UAAYK,EAMnB,MAAO,CAHW5U,EAAY2U,GAAe,EAC3BzU,EAAY0U,GAAe,EAC5B3U,EAAWjM,KAAKugB,WAAc,GAIjDva,cACE,MAAMkc,EAAW,WAEbhD,GACIlf,KAAKmf,WAAYnf,KAAKof,0BAA2Bpf,KAAK4F,kBAE1Dwa,GACIpgB,KAAKgiB,QAAShiB,KAAKmf,WAAYnf,KAAK4f,eACpC5f,KAAK6f,gBACL,EACA7f,KAAK8f,WAAY9f,KAAK+f,UAAW/f,KAAKggB,UAAWhgB,KAAKigB,SACtDjgB,KAAK4F,OAAS,EAAI,aAEtB5F,KAAK4F,OACDya,GACIrgB,KAAK0L,kBAAmB1L,KAAKuF,cAAevF,KAAKmM,WACjDnM,KAAKugB,WAAW,EAAO,KAAMvgB,KAAK0gB,WACrC1gB,KAAK0gB,mBAjKdnb,EAAyC4G,GAAa,GAIxD,OAHA3C,EAAK4B,OACoB,IAArB7F,EAAc,IAAiC,IAArBA,EAAc,IACxC,IAAM,iDAAiDA,OACpD,0BACiC,EAAnBA,EAAc,sDACWA,EAAc,eAExD4c,giBAxBqB,CAAClB,GACnBA,EAAY,sLAMA,sLA+BkBmB,CAAmBjW,0pBAqB1D,CAsH8BkW,CACIriB,KAAKuF,cAAevF,KAAKmM,YAC7BkV,GACIrhB,KAAK0L,kBAAmB1L,KAAKuF,cAC7BvF,KAAKmM,WAAYnM,KAAKugB,WAAW,EAAO,KACxCvgB,KAAKshB,mCAEnC,OAAOY,SC7jBEI,GAgBXxiB,YACI2L,EAAuCmU,EACvCC,EAAyB1T,GAAa,EAAO2T,GAAa,EAC1D+B,EAAmB,KAAM1C,EAAsC,KAC/D2C,EAAqC,MAfzC9hB,mBAAgB,CAAC,IAAK,KACtBA,cAAW,oDACXA,mBAA0C,CAAC,IAAK,EAAG,GAcjDA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB,CAACtB,EAAG,GAAIuB,EAAG,CAAC,EAAG,GAAIC,EAAG,CAAC,IAC7C3H,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhD,MAAMyc,EAAkB,MAARH,EACVzC,EAAsD,MAA1B0C,EAC9BE,GACFhiB,KAAKkG,cAAc1E,KAAK,QAGtB4d,GACFpf,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAKmM,WAAaA,EAClBnM,KAAK8f,WAAaA,EAClB9f,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKof,0BAA4BA,EACjCpf,KAAK4f,eAAiBA,EACtB5f,KAAK6f,eAAiBA,EACtB7f,KAAKqY,UAAY,gBAAgBrY,KAAKmf,cAAchT,KAChD2T,KAAc9f,KAAK4f,kBAAkB5f,KAAK6f,iBAGhD7Z,cASE,MARiB,WACbkZ,GAAoBlf,KAAKmf,WAAYnf,KAAKof,qCAE1CgB,GACIpgB,KAAKgiB,QAAShiB,KAAKmf,WAAYnf,KAAK4f,eACpC5f,KAAK6f,eAAgB7f,KAAKmM,WAAYnM,KAAK8f,wFArFjDqC,i6BCqDOI,GAgBXziB,YACI8hB,EAAkCY,EAClC/W,EAAuCU,GAAa,EACpD2T,GAAa,EAAO+B,EAAmB,KACvC1C,EAAsC,KACtC2C,EAAqC,MAhBzC9hB,mBAAgB,CAAC,IAAK,KACtBA,cAAW,oDACXA,mBAA0C,CAAC,GAAI,EAAG,GAehDA,KAAKyL,YAAcA,EAEnBzL,KAAKyH,eAAiB,CAACtB,EAAG,CAAC,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,IAC3C3H,KAAKqL,SAAW,CACd/G,KAAKwH,KAAKL,EAAY,GAAKzL,KAAKuF,cAAc,IAC9CjB,KAAKwH,KAAKL,EAAY,GAAKzL,KAAKuF,cAAc,IAAKkG,EAAY,IAGjE,MAAMuW,EAAkB,MAARH,EACZG,GACFhiB,KAAKkG,cAAc1E,KAAK,QAG1B,MAAM4d,EAAsD,MAA1B0C,EAC9B1C,GACFpf,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAKmM,WAAaA,EAClBnM,KAAK8f,WAAaA,EAClB9f,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKof,0BAA4BA,EACjCpf,KAAK4f,eAA+B,IAAdgC,EAAO,GAC7B5hB,KAAK6f,eAA+B,IAAd2C,EAAO,GAC7BxiB,KAAKqY,UAAY,yBAAyBrY,KAAKmf,cAAchT,KACzD2T,KAAc9f,KAAK4f,kBAAkB5f,KAAK6f,iBAGhD7Z,cASE,MARiB,WACbkZ,GAAoBlf,KAAKmf,WAAYnf,KAAKof,qCAE1CgB,GACIpgB,KAAKgiB,QAAShiB,KAAKmf,WAAYnf,KAAK4f,eACpC5f,KAAK6f,eAAgB7f,KAAKmM,WAAYnM,KAAK8f,+BAlHnDva,GACF,MAAMob,EAAapb,EAAc,GAC3Bqb,EAAarb,EAAc,GAC3Bgb,EAAYI,EAAaC,EAAaD,EAAaC,EACzD,MAAO,iDACqCL,OAAeI,oDACfC,OAAgBL,4dAQ1D4B,kSAQ2C5B,iUAQfA,qCACAA,qcAYEA,uCACAA,mCAENA,wLAS5B,CA4DQkC,CAAgCziB,KAAKuF,8BClHhCmd,GAiBX5iB,YACI2L,EAAuCQ,EACvC2T,EAAyBC,EAAyB1T,GAAa,EAC/D2T,GAAa,GAfjB9f,mBAAgB,CAAC,IAAK,KACtBA,cAAW,oDACXA,mBAA0C,CAAC,EAAG,EAAG,GAIjDA,aAAS,EAGTA,aAAS,EACTA,qBAAkB,IAMhBwJ,EAAK4B,OACkB,IAAnBK,EAAY,IACZ,IAAM,iDACVzL,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB,CAACtB,EAAG,CAAC,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,EAAG,IAC9C3H,KAAK4F,QAAUuG,GAAcnM,KAAKyL,YAAY,GAAK,GAAM,IACzCU,GAAcF,EAAW,GAAM,IAC3CjM,KAAKyL,YAAY,GAAK,GAAM,EAChCzL,KAAK0L,kBAAoB,CAAC,EAAG,EAAG1L,KAAKygB,iBAEhCzgB,KAAK4F,SACJ5F,KAAKyL,YAAY,GAAK,KACxBzL,KAAK0L,kBAAkB,GAAK,GAE1B1L,KAAKyL,YAAY,GAAK,KACxBzL,KAAK0L,kBAAkB,GAAK,IAIhC1L,KAAKqL,SAAWG,GACZxL,KAAKyH,eACL,CACEzH,KAAKyL,YAAY,GAAIzL,KAAKyL,YAAY,GAAIzL,KAAKyL,YAAY,GAC3DQ,GAEFjM,KAAKuF,cAAevF,KAAK0L,mBAE7B1L,KAAKmM,WAAaA,EAClBnM,KAAK8f,WAAaA,EAClB9f,KAAK4f,eAAiBA,EACtB5f,KAAK6f,eAAiBA,EACtB7f,KAAKqY,UACD,gBAAgBlM,KAAc2T,KAAcF,KACxCC,KAAkB7f,KAAK0L,qBAAqB1L,KAAK4F,SAG3DI,cAGE,MAkBMiZ,EAAYjf,KAAK4F,OAAS,EAAI,EAC9Bsc,EAAW,WAEbvC,GACI3f,KAAK4f,eAAgB5f,KAAK6f,gBAAgB,EAAO7f,KAAK8f,YACtD,GAAO,GAAO,EAAOb,qEAEzBD,GAAYC,oCACQA,oWA1BC,CAACA,GACjB,+BACeA,6MAMlBA,EAAY,EAAI,WAAa,qQAwB3B0D,CAAiB1D,iCAIrBjf,KAAK4F,OAASya,GACIrgB,KAAK0L,kBAAmB1L,KAAKuF,cAC7BvF,KAAKmM,WAAY,IAAI,EAAMnM,KAAKygB,iBACpCY,GACIrhB,KAAK0L,kBAAmB1L,KAAKuF,cAC7BvF,KAAKmM,WAAY,IAAI,EAAMnM,KAAKygB,yBAEtD,OAAOyB,SAIEU,GAaX9iB,YACI2L,EAAuBoW,EAAmB,KAC1C1C,EAAsC,KACtC2C,EAAqC,MAbzC9hB,cAAW,GAGXA,mBAAgB,CAAC,KACjBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EASLA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKgiB,QAAkB,MAARH,EACf7hB,KAAKof,0BAAsD,MAA1B0C,EACjC9hB,KAAKmf,WAAaA,EACdnf,KAAKgiB,SACPhiB,KAAKkG,cAAc1E,KAAK,QAGtBxB,KAAKof,2BACPpf,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAKqY,UAAY,kBAAkB8G,IAGrCnZ,cACE,MAAO,SACLkZ,GAAoBlf,KAAKmf,WAAYnf,KAAKof,mCAC1C+C,GAAK,2JAID1C,GAAsBzf,KAAKgiB,QAAShiB,KAAKmf,oFCzJtC0D,GAUX/iB,YAAY2E,GATZzE,mBAA0B,GAC1BA,iBAAwB,GAIxBA,cAAW,eACXA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAGLA,KAAKyL,YAAchH,EACnBzE,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKqY,UAAY,OAGnBrS,cAQE,MAPiB,SACfmc,GAAK,iICnBKW,GAAKC,GAEnB,MAAMC,QAACA,EAAOC,MAAEA,GAASF,GACnBte,MAACA,EAAKye,MAAEA,GAASD,EACvB,IAAItd,MAACA,GAASsd,EAId,GAFAtd,EAAQA,GAAS6D,EAAK2Z,WAAWD,GAEnB,WAAVvd,EAAoB,CAEtB,MAAM2L,EAAS9H,EAAK4Z,kBAAkBzd,EAAO6D,EAAK2M,cAAc1R,IAEhE,OADA6M,EAAOwR,KAAKI,GACLF,EAAQnP,eAAepP,EAAOkB,EAAO2L,GACvC,CACL,MAAMtM,EAAU,IAAI6d,GAAYpe,GAC1B4e,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAACuW,KAC9C,OAAOF,EAAQ5L,iBAAiBpS,EAAS,GAAIW,EAAO0d,GAExD,CAEO,MAAMC,GAA2B,CACtCC,WAAYC,EACZC,YAAa,SACbC,WAAYZ,aCxBEa,GACZZ,GAEF,MAAM7Z,OAACA,EAAM+Z,MAAEA,GAASF,GAClB5c,EAACA,GAAK+C,GACNzE,MAACA,GAASwe,EAEVW,EAAQpa,EAAK2M,cAAchQ,EAAE1B,OAC7Bof,EAASra,EAAKsa,uBAAuBrf,EAAOmf,GAC5CG,EAASva,EAAK2M,cAAc0N,GAUlC,OARAra,EAAK4B,OACDwY,IAAUG,GACV,IAAM,kBAAkBF,UAAeE,iCACzB5d,EAAE1B,cAAcmf,mFAIlCb,EAAKC,QAAQ5R,OAAOjL,EAAE6J,QACf,CAACA,OAAQ7J,EAAE6J,OAAQvL,MAAOof,EAAQle,MAAOQ,EAAER,MACpD,CAEO,MAAMqe,GAA8B,CACzCT,WAAYU,EACZR,YAAa,SACbC,WAAYC,aCJEO,IAAgBC,EAC9BA,EAACjL,EACDA,EAAC/M,WACDA,EAAU2T,WACVA,EAAUkD,QACVA,EAAOnB,KACPA,EAAO,KAAIC,uBACXA,EAAyB,KAAIsC,eAC7BA,EAAiB,EAACjF,WAClBA,EAAa,OAEb,MAAMkF,EAAQF,EAAE1f,MAAMrD,OAChBkjB,EAAQpL,EAAEzU,MAAMrD,OAEhBmjB,EAAcpY,EAAagY,EAAE1f,MAAM4f,EAAQ,GAAKF,EAAE1f,MAAM4f,EAAQ,GAChEG,EAAc1E,EAAa5G,EAAEzU,MAAM6f,EAAQ,GAAKpL,EAAEzU,MAAM6f,EAAQ,GAEhEG,EAActY,EAAagY,EAAE1f,MAAM4f,EAAQ,GAAKF,EAAE1f,MAAM4f,EAAQ,GAChEK,EAAc5E,EAAa5G,EAAEzU,MAAM6f,EAAQ,GAAKpL,EAAEzU,MAAM6f,EAAQ,GAEhEK,EAAaR,EAAE1f,MAAM+B,MAAM,GAAI,GAC/Boe,EAAa1L,EAAEzU,MAAM+B,MAAM,GAAI,GAE/Bqe,EAAYrb,EAAK2M,cAAcwO,GAC/BG,EAAYtb,EAAK2M,cAAcyO,GAI/Bpd,EAFoBud,EAAeC,2BACrCb,EAAE1f,MAAM+B,MAAM,GAAI,GAAI0S,EAAEzU,MAAM+B,MAAM,GAAI,IACTyR,OAAO,CAACwM,EAAaC,IAExDlb,EAAK4B,OACDmZ,IAAgBC,GAChB,IAAM,kCAAkCD,WACjCC,6BAAuCL,EAAE1f,aACzCyU,EAAEzU,wBAAwB0H,oBACV2T,kBAE3B,MAAMmF,EAAqC9Y,EACvC,CAAC0Y,EAAWN,EAAaE,GACzB,CAACI,EAAWJ,EAAaF,GACvBW,EAAqCpF,EACvC,CAACgF,EAAWJ,EAAaF,GACzB,CAACM,EAAWN,EAAaE,GAGvBS,EAAMxB,GAAQ,CAACza,OAAQ,CAAC/C,EAAGge,GAAInB,UAASC,MAAO,CAACxe,MAAOwgB,KACvDG,EAAMzB,GAAQ,CAACza,OAAQ,CAAC/C,EAAG+S,GAAI8J,UAASC,MAAO,CAACxe,MAAOygB,KACvDG,EAA8B,CAACF,EAAKC,GAEpCE,EAAWhhB,KAAKC,IAAIsgB,EAAWC,GAC/BlF,EAA+B,IAAdiF,EACjBhF,EAA+B,IAAdiF,EAEjB5b,EAAuB,CAACic,EAAKC,GAC7Bld,EAAa,CACjB,CAACO,KAAM,QAASkE,KAAM,CAAC8X,IAAe,CAAChc,KAAM,QAASkE,KAAM,CAAC+X,IAC7D,CAACjc,KAAM,QAASkE,KAAM,CAAC4X,KAGzB,IAAIvf,EACAugB,EACJ,MAAM9Z,EACF,CAAC6Z,EAAUb,EAAaC,GAC5B,IAAIc,EAAoB7lB,IAAMwB,IAAI,8BA+BlC,OA9BIqkB,EAAoB,IAEpBA,EADEf,EAAcC,GAAe,IACXrX,GAAkBiV,oBAKvB,IAAbgD,GAAkBb,GAAe,KAAOC,GAAe,IACvDF,GAAe,IACGnX,GAAkBqV,oBAWnC+B,GAAe,KACdC,GAAe,KAAOF,GAAe,EAAIE,IAC1CA,GAAe,KACdD,GAAe,KAAOF,GAAe,EAAIE,GACzBpX,GAAkBkV,6BAElBlV,GAAkBsU,qBAIlC6D,GACN,KAAKnY,GAAkBiV,oBACrBtd,EAAU,IAAIsd,GACV7W,EAAamU,EAAgBC,EAAgB1T,EAAY2T,EACzD+B,EAAM1C,EAAY2C,GACtB,MACF,KAAKzU,GAAkBqV,oBAQrB,GALA6C,EAAMzC,GACF,CAACE,UAASC,MAAO,CAACxe,MAAOgH,EAAayX,MAAO,EAAGvd,MAAOwe,EAAExe,SAC7DX,EAAU,IAAI0d,GACVjX,EAAa+Y,EAAa5E,EAAgBC,EAAgB1T,EAC1D2T,GACA+B,GAAQ1C,EAAY,CACtBoG,EACIvC,EAAQ5L,iBAAiBpS,EAASkE,EAAQib,EAAExe,MAAOuC,EAAYqd,GACnE,MAAME,EAAwB,IAAI7C,GAC9B2C,EAAI9gB,MAAOod,EAAM1C,EAAY2C,GACjC,IAAIuB,EAAc,KAClB,MAAMqC,EAAiC,CAACH,GACpC1D,GACF6D,EAAiBlkB,KAAKqgB,GAEpBC,GACF4D,EAAiBlkB,KAAKsgB,GAEL,cAAf3C,IACFkE,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAACyX,KACxCqB,EAAsB9e,UAAY,iBAEpC,MAAMgf,EAAe3C,EAAQ5L,iBACzBqO,EAAuBC,EAAkBH,EAAI5f,MAAO0d,GACxDgC,EAAc7jB,KAAK+jB,GACnB,MAAMK,EAAcjC,GAChB,CAACza,OAAQ,CAAC/C,EAAGwf,GAAe3C,UAASC,MAAO,CAACxe,MAAO+C,KACxD6d,EAAc7jB,KAAKmkB,GACnB,IAAK,MAAM7gB,KAAKugB,EACdrC,EAAQjT,YAAYjL,EAAEkL,QAExB,OAAO4V,EAET,MAEF,KAAKvY,GAAkBkV,6BACrBvd,EAAU,IAAIud,GACV0C,EAAUC,EAAUzZ,EAAaU,EAAY2T,EAAY+B,EACzD1C,EAAY2C,GAChB,MACF,KAAKzU,GAAkBsU,oBAGrB,MAAML,EAA4B0B,EAAQjjB,YAAYG,UACtD8E,EAAU,IAAI2c,GACVsD,EAAUxZ,EAAamU,EAAgBC,EAAgB1T,EACvD2T,EAAY+B,EAAM1C,EAAY2C,EAC9BR,GACJ,MACF,QACE,MAAM,IAAItf,MAAM,iCAAiCwjB,MAGjD3D,GACF3Y,EAAO1H,KAAKqgB,GAEVC,GACF5Y,EAAO1H,KAAKsgB,GAEK,cAAf3C,IACFjX,EAAW1G,KAAK,CAACiH,KAAM,UAAWkE,KAAM,CAACyX,KACzCpf,EAAQ2B,UAAY,iBAEtB4e,EAAMvC,EAAQ5L,iBAAiBpS,EAASkE,EAAQib,EAAExe,MAAOuC,EAAYqd,GACrE,MAAMK,EACFjC,GAAQ,CAACza,OAAQ,CAAC/C,EAAGof,GAAMvC,UAASC,MAAO,CAACxe,MAAO+C,KACvD6d,EAAc7jB,KAAK+jB,GACnB,IAAK,MAAMzgB,KAAKugB,EACdrC,EAAQjT,YAAYjL,EAAEkL,QAExB,OAAO4V,CACT,CC5KO,MAAMC,GAAmC,CAC9CtC,WAAYuC,EACZrC,YAAa,SACbC,oBAzB2BX,GAK3B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BoB,EAACA,EAACjL,EAAEA,EAAC2I,KAAEA,EAAIC,uBAAEA,GAA0B5Y,GACvCiD,WAACA,EAAU2T,WAAEA,EAAUX,WAAEA,EAAUiF,eAAEA,GAAkBnB,EAE7D,OAAOiB,GAAgB,CACrBC,IACAjL,IACA/M,aACA2T,aACAkD,UACAnB,OACAC,yBACAsC,iBACAjF,cAEJ,SCpBa4G,GAUXjmB,YAAY8b,EAAkBgG,EAAkBY,GAThDxiB,mBAAgB,CAAC,QAAS,QAAS,QAAS,SAK5CA,mBAA0C,CAAC,IAAK,EAAG,GAEnDA,WAAO,EAGLA,KAAKyL,YAAc9B,EAAaqb,2BAA2BpD,EAAQY,GACnExiB,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKqY,UAAY,mBAAmBuD,IACpC5b,KAAK4b,GAAKA,EAGZ5V,cAkBE,MAhBiB,gHADHgW,GAAkBhc,KAAK4b,IAAI,wBAOrCuG,GAAK,wXC3BA6D,GAiBXlmB,YAAY8b,EAAkBgG,EAAkBY,GAVhDxiB,WAAO,EACPA,mBAAgB,CAAC,IAAK,KAUpBA,KAAKyL,YAAc9B,EAAaqb,2BAA2BpD,EAAQY,GACnExiB,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAK4b,GAAKA,EAEV5b,KAAKimB,qBACDrE,EAAOxgB,QAAU,GAAKohB,EAAOphB,OAAS,GAAKwgB,EAAO,GAAK,IAC3D5hB,KAAKkmB,qBACD1D,EAAOphB,QAAU,GAAKwgB,EAAOxgB,OAAS,GAAKohB,EAAO,GAAK,IAEvDxiB,KAAKimB,sBAAwBjmB,KAAKkmB,sBACpClmB,KAAK4F,QAAS,EAGd5F,KAAKmmB,kBACDnmB,KAAKkmB,qBAAuB1D,EAAO,GAAKZ,EAAO,GACnD5hB,KAAKqY,UAAY,UAAUrY,KAAKyI,QAAQmT,KAAM5b,KAAKmmB,qBAC/CnmB,KAAKkmB,uBACTlmB,KAAKyI,KAAO,SAGZzI,KAAKuF,cAAgB,CAAC,IAAK,EAAG,GAC9BvF,KAAKsgB,cAAgB,IAEjB9W,EAAKC,YAAYmY,EAAQY,IACzBhZ,EAAK2M,cAAcyL,GAAU,GAAM,GACrC5hB,KAAK4F,QAAS,EACd5F,KAAKyI,KAAO,OACZzI,KAAKsgB,cAAgB,IAErBtgB,KAAK4F,QAAS,EACd5F,KAAKyI,KAAO,QACZzI,KAAKsgB,cAAgB,GAEvBtgB,KAAKqY,UAAY,UAAUrY,KAAKyI,QAAQmT,IAGxC5b,KAAKuF,cAAgB,CAAC,IAAK,EAAG,IAEhCvF,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACvF,KAAKsgB,cAAe,EAAG,IAG9Bta,cACE,IAAIkc,EACJ,MAAMkE,EAAQpmB,KAAK4F,OAAS,YAAc,MACpCygB,EAAU,gCACSD,UAAcA,SAAaA,cAChDpK,GAAkBhc,KAAK4b,GAAI5b,KAAK4F,wBAIpC,GAAkB,WAAd5F,KAAKyI,KAAmB,CAC1B,MAAM6d,EAAqBtmB,KAAKmmB,kBAAoB,EAChD,UAAUnmB,KAAKyL,YAAYrK,OAAS,KACpC,IACEmlB,EAAoBvmB,KAAKkmB,qBAC3B,kEACoBI,MACpB,qBAAqBA,mDAEzBpE,EAAW,aACPmE,oDACsCrmB,KAAKmmB,gCAC3ChE,GAAK,qIAGaniB,KAAKmmB,iEAEvBnmB,KAAKkmB,qBAAuB,IAAM,4KAM9BK,wGAMRrE,EAAW,YACRmE,aACAlE,GAAK,2OAUV,OAAOD,YClHKsE,GACZzD,GACF,MAAM7Z,OAACA,GAAU6Z,GACX5c,EAACA,GAAK+C,EAGZ,OADA6Z,EAAKC,QAAQ5R,OAAOjL,EAAE6J,QACf,CAACA,OAAQ7J,EAAE6J,OAAQvL,MAAO0B,EAAE1B,MAAOkB,MAAOQ,EAAER,MACrD,CAEO,MAAM8gB,GAA+B,CAC1ClD,WAAYmD,EACZjD,YAAa,SACbC,WAAY8C,aCFEG,GAAQ5D,GAEtB,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpBvS,KAACA,EAAIC,KAAEA,GAAQvH,EAEf0d,EAAc5D,EAAQnP,eAAerD,EAAK/L,MAAO,aACjDkiB,EAAU3D,EAAQvU,UAAUtN,IAAIylB,EAAY5W,QAE5C6W,EAAiBL,GAAS,CAACtd,OAAQ,CAAC/C,EAAGqK,GAAOwS,YAE9C8D,EAAiBN,GAAS,CAACtd,OAAQ,CAAC/C,EAAGsK,GAAOuS,YAIpD,OAFA2D,EAAQpW,mBAAqB,CAACC,KAAMqW,EAAgBpW,KAAMqW,GAEnDF,CACT,CAEO,MAAMG,GAA8B,CACzCxD,WAAYyD,EACZvD,YAAa,SACbC,WAAYiD,UC7BDM,GAWXnnB,YAAY2L,EAAuBmQ,GANnC5b,mBAAgB,CAAC,KAIjBA,WAAO,EAKLA,KAAKuF,cAAgB,CADE,IACe,EAAG,GACzCvF,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAK4b,GAAKA,EACV5b,KAAKqY,UAAY,SAASuD,IAG5B5V,cACE,MAAO,wDAEDsX,GAAiBtd,KAAK4b,IAAI,sBAE5BuG,GAAK,6LCLG+E,IACZC,OAACA,EAAMC,cAAEA,EAAazhB,MAAEA,IAC1B,MAAO,EAAEuD,SAAQ8Z,cACf,MAAM7c,EAACA,GAAK+C,EACNme,EAAgBrE,EAEhBsE,EAAS3hB,GAASQ,EAAER,MAC1B,GAAI0hB,EAAchN,mBAAmB,CAAClU,KAAwB,MAAjBihB,EAAuB,CAClE,MAAMG,EAAQF,EAAc5Y,UAAUtN,IAAIgF,EAAE6J,QACtCwX,EAAYJ,EAAcG,EAAMjW,OAAsBgW,GAC5D,OAAOD,EAAcxT,eAAe1N,EAAE1B,MAAO6iB,EAAQE,GAGvD,MAAMxiB,EAA0B,IAAIiiB,GAAe9gB,EAAE1B,MAAO0iB,GAC5D,OAAOE,EAAcjQ,iBAAiBpS,EAAS,CAACmB,GAAImhB,EAAO,CAE/D,UAkBgBG,IACZN,OAACA,EAAMC,cAAEA,EAAaM,gBAAEA,GAAkB,EAAK/hB,MAAEA,IAEnD,MAAO,EAAEuD,SAAQ8Z,cACf,MAAMmB,EAACA,EAACjL,EAAEA,GAAKhQ,EACTme,EAAgBrE,EAEtB,GAAI0E,GAA+B,cAAZvD,EAAExe,MAAuB,CAC9C,MAAMgiB,EAAQN,EAAc5Y,UAAUtN,IAAIgjB,EAAEnU,QACtC4X,EAAQP,EAAc5Y,UAAUtN,IAAI+X,EAAElJ,QAC5C,IAAIQ,EAAkBC,EACtB,GAAI0W,IAAW1M,GAAawB,KACzBzL,EAAMC,GAAQ,CACb,CAACkX,EAAMpX,mBAAmBC,KAAMoX,EAAMrX,mBAAmBC,MACzD,CAACmX,EAAMpX,mBAAmBE,KAAMmX,EAAMrX,mBAAmBE,OACzD/L,KAAImjB,IACJ,MAAOC,EAAOC,GAASF,EAEjBG,EAAU,CACdhY,OAAQ8X,EAAM9X,OACdrK,MAAOmiB,EAAMniB,MACblB,MAAO0f,EAAE1f,OAELwjB,EAAU,CACdjY,OAAQ+X,EAAM/X,OACdrK,MAAOoiB,EAAMpiB,MACblB,MAAOyU,EAAEzU,OAGLO,EAAU,IAAIghB,GAAgBmB,EAAQhD,EAAE1f,MAAOyU,EAAEzU,OACvD,OAAO4iB,EAAcjQ,iBACjBpS,EAAS,CAACgjB,EAASC,GACnBC,EAAWJ,EAAMniB,MAAOoiB,EAAMpiB,OAAO,QAEtC,CACL,MAAMwiB,EAAc,IAAIpC,GACpBtL,GAAa0C,sBAAuBgH,EAAE1f,MAAOyU,EAAEzU,OAC7C2jB,EAAc,IAAIrC,GACpBtL,GAAa2C,sBAAuB+G,EAAE1f,MAAOyU,EAAEzU,OAE7CyE,EAAS,CACb,CACE8G,OAAQ2X,EAAMpX,mBAAmBC,KAAKR,OACtCrK,MAAOgiB,EAAMpX,mBAAmBC,KAAK7K,MACrClB,MAAO0f,EAAE1f,OAEX,CACEuL,OAAQ2X,EAAMpX,mBAAmBE,KAAKT,OACtCrK,MAAOgiB,EAAMpX,mBAAmBE,KAAK9K,MACrClB,MAAO0f,EAAE1f,OAEX,CACEuL,OAAQ4X,EAAMrX,mBAAmBC,KAAKR,OACtCrK,MAAOiiB,EAAMrX,mBAAmBC,KAAK7K,MACrClB,MAAOyU,EAAEzU,OAEX,CACEuL,OAAQ4X,EAAMrX,mBAAmBE,KAAKT,OACtCrK,MAAOiiB,EAAMrX,mBAAmBE,KAAK9K,MACrClB,MAAOyU,EAAEzU,QAIb+L,EAAO6W,EAAcjQ,iBAAiB+Q,EAAajf,EAAQ,WAC3DuH,EAAO4W,EAAcjQ,iBAAiBgR,EAAalf,EAAQ,WAG7D,MAAMmf,EACF1B,GAAQ,CAACzd,OAAQ,CAACsH,OAAMC,QAAOuS,QAASqE,IAO5C,OALAA,EAActX,YAAYS,EAAKR,QAC/BqX,EAActX,YAAYU,EAAKT,QAIxBqY,EAGT,MAAMf,EAAS3hB,GAASuiB,EAAW/D,EAAExe,MAAOuT,EAAEvT,OAC9C,IAAiB,WAAZwe,EAAExe,OAAkC,WAAZuT,EAAEvT,OAC1B0hB,EAAchN,mBAAmB,CAAC8J,EAAGjL,MACrB,MAAjBkO,EAAuB,CACzB,MAAMO,EAAQN,EAAc5Y,UAAUtN,IAAIgjB,EAAEnU,QAAQsB,OAC9CsW,EAAQP,EAAc5Y,UAAUtN,IAAI+X,EAAElJ,QAAQsB,OAC9CgX,EAA2B,WAAZnE,EAAExe,MAEnBgE,EAAa4e,uBAAuBZ,GACpCA,EACEa,EAA2B,WAAZrE,EAAExe,MAEnBgE,EAAa4e,uBAAuBX,GACpCA,GACGJ,EAAWhgB,GACd4f,EAAcjD,EAAE1f,MAAOyU,EAAEzU,MAAO6jB,EAAcE,EAAclB,GAEhE,OAAOD,EAAcxT,eAAerM,EAAU8f,EAAQE,GAExD,MAAMxiB,EAAU,IAAIghB,GAAgBmB,EAAQhD,EAAE1f,MAAOyU,EAAEzU,OACvD,OAAO4iB,EAAcjQ,iBAAiBpS,EAAS,CAACmf,EAAGjL,GAAIoO,EAAO,CAElE,UC1JgBmB,GAA6B7M,GAE3C,MAAO,CAACgG,EAAkBY,EAAkBkG,EACpCC,EAAmBhjB,KACzB,MAAMijB,EAAWjf,EAAaqb,2BAA2BpD,EAAQY,GAE3DqG,EAAaD,EAASxnB,OACtB0nB,EAAgBtf,EAAK0B,eAAe0d,GACpCG,EAAavf,EAAK2M,cAAcyS,GAEhCI,EACFxf,EAAK+N,uBAAuB5R,EAA0BojB,GAEpD1E,EAAQzC,EAAOxgB,OACfkjB,EAAQ9B,EAAOphB,OAEf6nB,EAAWzf,EAAK0B,eAAe0W,GAC/BsH,EAAW1f,EAAK0B,eAAesX,GAE/B2G,EAAiBxf,EAAaC,iBAAiBgY,EAAQgH,GACvDQ,EAAiBzf,EAAaC,iBAAiB4Y,EAAQoG,GAE7D,GAAIO,EAAe/nB,OAASgoB,EAAehoB,SAAW,EACpD,IAAK,IAAI0D,EAAI,EAAGA,EAAIkkB,EAAO5nB,SAAU0D,EACnCkkB,EAAOlkB,GAAK8W,EAAG8M,EAAM5jB,EAAI4jB,EAAMtnB,QAASunB,EAAM7jB,EAAI6jB,EAAMvnB,cAG1D,IAAK,IAAI0D,EAAI,EAAGA,EAAIkkB,EAAO5nB,SAAU0D,EAAG,CACtC,MAAMukB,EAAM7f,EAAK8f,WAAWxkB,EAAG+jB,EAAYC,GAErCS,EAAOF,EAAI7iB,OAAO6d,GACxB8E,EAAexmB,SAAQgC,GAAK4kB,EAAK5kB,GAAK,IACtC,MAAM6kB,EAAShgB,EAAKigB,WAAWF,EAAMlF,EAAO4E,GAEtCS,EAAOL,EAAI7iB,OAAO8d,GACxB8E,EAAezmB,SAAQgC,GAAK+kB,EAAK/kB,GAAK,IACtC,MAAMglB,EAASngB,EAAKigB,WAAWC,EAAMpF,EAAO4E,GAE5CF,EAAOlkB,GAAK8W,EAAG8M,EAAMc,GAASb,EAAMgB,IAIxC,MAAO,CAACX,EAAQJ,EAAS,CAE7B,CC9CO,MAAMgB,GACTnB,KAA+BtE,EAAWjL,IAAciL,EAAIjL,aCChD2Q,GAAsBjO,GAEpC,MAAO,CAACtK,EAAQ3L,EAAOsd,KACrB,MAAM6G,EACFtgB,EAAK+N,uBAAuB5R,EAA0B2L,EAAOlQ,QACjE,IAAK,IAAI0D,EAAI,EAAGA,EAAIwM,EAAOlQ,SAAU0D,EACnCglB,EAAUhlB,GAAK8W,EAAGtK,EAAOxM,GAAIme,GAE/B,OAAO6G,CAAS,CAEpB,CCZO,MAAMC,GAAWF,IAAuBG,GAAO1lB,KAAKwH,KAAKke,KCAzD,MAAMC,GACTxB,IAA6B,CAACtE,EAAWjL,IAAeiL,IAAMjL,EAAK,EAAI,ICD9DgR,GAAUL,IAAuBG,GAAO1lB,KAAK6lB,IAAIH,KCAjDI,GAAYP,IAAuBG,GAAO1lB,KAAK+lB,MAAML,KCArDM,GAAYT,IAAuBG,GAAO1lB,KAAKimB,MAAMP,KCA3D,MAAMQ,GACT/B,IAA6B,CAACtE,EAAWjL,IAAeiL,EAAIjL,EAAK,EAAI,ICD5DuR,GACThC,IAA6B,CAACtE,EAAWjL,IAAeiL,GAAKjL,EAAK,EAAI,ICD7DwR,GACTjC,IAA6B,CAACtE,EAAWjL,IAAeiL,EAAIjL,EAAK,EAAI,ICD5DyR,GACTlC,IAA6B,CAACtE,EAAWjL,IAAeiL,GAAKjL,EAAK,EAAI,ICDnE,MAAM0R,GAAUf,IAAuBG,GAAO1lB,KAAKumB,IAAIb,KCAvD,MAAMc,GAAcrC,KACrBsC,EAAQC,IAAW1mB,KAAKC,IAAIwmB,EAAkBC,KCDvCC,GAAcxC,KACrBsC,EAAQC,IAAW1mB,KAAK4mB,IAAIH,EAAkBC,KCFvCG,GAAe1C,KACtBsC,EAAgBC,IAAmBD,EAASC,ICA3C,MAAMI,GACT3C,KAA+BtE,EAAGjL,IAAOiL,IAAMjL,EAAK,EAAI,ICuC5D,SAASmS,GACLC,EAAqBC,EACrBC,EAAkCC,GACpC,MAAMC,EAAuC,GAC7C,IAAIC,EAAY,EAEhB,MAAMC,EAAYL,EAAanqB,OAAS,EAAIoqB,EAAmBpqB,OACzDyqB,EAAY,IAAIhnB,MAAM+mB,GAAW9I,KAAK,MAAMpe,KAAI,IAAM,CAAC,MApC/D,SACI8mB,EAAkCC,GAEpC,IAAK,IAAIje,EAAM,EAAGA,EAAMge,EAAmBpqB,SAAUoM,EAAK,CACxD,MAAMse,EAASN,EAAmBhe,GAC5Bue,EAAave,IAAQge,EAAmBpqB,OAAS,EACnDqqB,EACAD,EAAmBhe,EAAM,GAAGpM,OAChC,GAAsB,IAAlB0qB,EAAO1qB,OACT,MAAM,IAAIY,MAAM,kCAElB,GAAI8pB,EAAO,GAAK,EACd,MAAM,IAAI9pB,MAAM,sCAElB,GAAI8pB,EAAOA,EAAO1qB,OAAS,GAAK2qB,EAC9B,MAAM,IAAI/pB,MAAM,4CAElB,IAAK,IAAI8C,EAAI,EAAGA,EAAIgnB,EAAO1qB,SAAU0D,EACnC,GAAIgnB,EAAOhnB,EAAI,GAAKgnB,EAAOhnB,GACzB,MAAM,IAAI9C,MAAM,mDAIxB,CAeEgqB,CAAeR,EAAoBC,GASnC,IAAIQ,EAAQ,EACZ,IAAK,IAAIze,EAAM,EAAGA,EAAM+d,EAAanqB,OAAS,IAAKoM,EAAK,CACtDye,GAASV,EAAa/d,GACtB,MAAM0e,EAAYX,EAAa/d,EAAM,GACrC,IAAK,IAAI1I,EAAI,EAAGA,EAAImnB,EAAQ,IAAKnnB,EAC/B+mB,EAAUre,GAAKhM,KAAKsD,EAAIonB,GAa5B,IAAK,IAAIpnB,EAAI,EAAGA,EAAIwmB,EAAQlqB,SAAU0D,EAAG,CACvC,IAAIqnB,EAAQb,EAAQxmB,GAChBsnB,EAAQd,EAAQxmB,GAAK,EAGzB,IAAK,IAAI0I,EAAM,EAAGA,EAAMge,EAAmBpqB,SAAUoM,EAAK,CACxD,MAAMse,EAASN,EAAmBhe,GAC5B6e,EAAS7e,EAAM+d,EAAanqB,OAAS,EAC3C,GAAIirB,GAAU,EAAG,CACf,MAAMC,EAAkBT,EAAUQ,GAC5BE,EACFD,EAAgBA,EAAgBlrB,OAAS,GAAK0qB,EAAOK,GACzD,IAAK,IAAIlkB,EAAIkkB,EAAOlkB,EAAImkB,IAASnkB,EAC/B4jB,EAAUQ,GAAQ7qB,KAAKsqB,EAAO7jB,EAAI,GAAKskB,GAG3CJ,EAAQL,EAAOK,GACfC,EAAQN,EAAOM,GAEbA,IAAUD,IACZT,EAAYlqB,KAAK,CAAC2qB,EAAOC,IACzBT,GAAaS,EAAQD,GAIzB,MAAO,CAACN,YAAWH,cAAaC,YAClC,CAeA,SAASa,GAAqBC,EAAgBC,GAC5C,MAAMC,EAAUF,EAAKjmB,MAAM,EAAGkmB,GAC9B,KAAOC,EAAQvrB,OAASsrB,GACtBC,EAAQnrB,KAAK,GAGf,IAAK,IAAIorB,EAAQF,EAAYE,EAAQH,EAAKrrB,OAAQwrB,IAChDD,EAAQD,EAAa,IAAMD,EAAKG,GAGlC,OAAOD,CACT,CAsBA,SAASE,GACLC,EAA+BC,EAC/BC,EAAkCtB,EAClCC,GACF,MAAMsB,EAAcF,EAAuBvmB,QAC3CymB,EAAY,GAAKtB,EAEjB,MAAMuB,EAAY1jB,EAAK4Z,kBACD4J,EACAxjB,EAAK2M,cAAc8W,IAEnCE,EAAcL,EAAkB1rB,OAOtC,OApCF,SACI0rB,EAA+BC,EAC/BrB,EAAsC0B,EAAmB9b,EACzD2b,GACF,MAAMI,EAASb,GAAqBO,EAAwB,GAAG,GACzDO,EAAUd,GAAqBS,EAAa,GAAG,GAErD,IAAIM,EAAS,EACb,IAAK,MAAM/mB,KAASklB,EAClB,IAAK,IAAI5mB,EAAI0B,EAAM,GAAI1B,EAAI0B,EAAM,KAAM1B,EAAG,CACxC,IAAK,IAAImD,EAAI,EAAGA,EAAImlB,IAAanlB,EAC/BqJ,EAAOic,EAASD,EAAUrlB,GAAK6kB,EAAkBhoB,EAAIuoB,EAASplB,KAE9DslB,EAGR,CAgBEC,CACIV,EAAmBC,EAAwBrB,EAF3B,IAAhByB,EAAoB,EAAKA,EAAcJ,EAAuB,GAG9DG,EAAWD,GAER,CAACC,EAAWD,EACrB,CC5KA,IAAOQ,GAAmB9jB,EAAa8jB,iBAGvC,MAAMC,GAGJ5tB,YACY2E,EAA2BkpB,EAC3Brc,EAA4B2b,EAC5BW,EAA+BC,EAC/BC,EACSC,EACAC,EACjBC,GANQjuB,WAAAyE,EAA2BzE,gBAAA2tB,EAC3B3tB,YAAAsR,EAA4BtR,iBAAAitB,EAC5BjtB,iBAAA4tB,EAA+B5tB,kBAAA6tB,EAC/B7tB,uBAAA8tB,EACS9tB,wBAAA+tB,EACA/tB,8BAAAguB,EAEnBhuB,KAAKkuB,kBACDvkB,EAAawkB,2BAA2BF,GAC5CjuB,KAAKouB,WAAazkB,EAAa0kB,cAAcruB,KAAKkuB,mBAG5CI,+BAA+BC,GACrC,OAAIvuB,KAAKkuB,kBAAkB,KAAOT,GAAiBe,eAC1CxuB,KAAKkuB,kBAAkBK,EAAY,GAEnCvuB,KAAKkuB,kBAAkBK,GAK1BE,sBAAsBF,GAC5B,OAAIvuB,KAAKkuB,kBAAkB,KAAOT,GAAiBe,eAC1CxuB,KAAK+tB,mBAAmBQ,EAAY,GAEpCvuB,KAAK+tB,mBAAmBQ,GAI3BG,YAAYH,GAClB,MAAMI,EAAqB3uB,KAAKyuB,sBAAsBF,EAAY,GAClE,OAAQvuB,KAAKsuB,+BAA+BC,EAAY,IACtD,KAAKd,GAAiBmB,aACpB,OAAOlB,GAAuBmB,sBAAsBF,GACtD,KAAKlB,GAAiBqB,WACpB,OAAOpB,GAAuBqB,oBAAoBJ,GACpD,QACE,MAAM,IAAI3sB,MAAM,gCACZyrB,GAAiBztB,KAAKsuB,+BAClBC,EAAY,QAI1BS,2BAA2BC,GACzB,MAAMC,EAAeD,EAAS7tB,OAC9B,GAAqB,IAAjB8tB,GAAuC,IAAjBA,EACxB,OAAO,EAET,IAAIC,EAAW,EACf,IAAK,IAAIrqB,EAAI,EAAGA,EAAIoqB,EAAe,IAAKpqB,EAAG,CACzC,MAAMsqB,EAAeH,EAASnqB,EAAI,GAAKmqB,EAASnqB,GAC5CsqB,EAAeD,IACjBA,EAAWC,GAGf,OAAOD,EAGTH,6BAA6BK,GAC3B,MAAMC,EAAcD,EAAYjuB,OAChC,GAAoB,IAAhBkuB,EACF,OAAO,EAET,IAAIC,EAAkB,EAClBC,EAAuBH,EAAY,GACnCF,EAAW,EACf,IAAK,IAAIrqB,EAAI,EAAGA,EAAIwqB,IAAexqB,EAAG,CACpC,MAAMoe,EAAQmM,EAAYvqB,GACtBoe,IAAUsM,IACZA,EAAuBtM,EACvBiM,EAAW7qB,KAAKC,IAAIO,EAAIyqB,EAAiBJ,GACzCI,EAAkBzqB,GAGtB,OAAOR,KAAKC,IAAI+qB,EAAcC,EAAiBJ,GAGzCM,sBACJvb,EAAewb,EAAkBC,GAAY,GAC/C,GAAsB,IAAlBD,EAAOtuB,OAAc,CACvB,IAAc,IAAV8S,EAAE,GACJ,MAAO,GAET,MAAM,IAAIlS,MACN,kFAGN,OAAO4tB,GAAU1b,EAAGyb,GAGdE,oBAAoBC,GAC1B,MAAMC,EAAa/vB,KAAKitB,YAClBa,EAAoB9tB,KAAK8tB,kBAE/BnkB,EAAaqmB,0BAA0BlC,EAAmBiC,GAE1D,MAAMtrB,EAAQzE,KAAKyvB,sBAAsBzvB,KAAKyE,MAAOzE,KAAK2tB,YAIpD3E,EAHcrf,EAAasmB,kCAC7BjwB,KAAKouB,WAAY3pB,EAAOsrB,GAIxB/G,EAAO,GAAK,IACdA,EAAO,GAAK8G,GAEd,IAAK,IAAIhrB,EAAI,EAAGA,GAAK9E,KAAKouB,aAActpB,EAClCkkB,EAAOlkB,GAAK,IACdkkB,EAAOlkB,GAAK9E,KAAK0uB,YAAY5pB,IAIjC,OAAOkkB,EAaDkH,gCACJC,EAAwBC,EACxBC,GACF,MAAMC,EAAehsB,KAAK4mB,IAAIiF,EAAgBE,GACxCrH,EAAmB,GACzB,IAAIuH,EAAqB,EACzB,IAAK,IAAIzrB,EAAI,EAAGA,EAAIwrB,IACbxrB,EAAGyrB,GAAsBH,EAC9BpH,EAAOxnB,KAAK+uB,GAEd,IAAK,IAAIzrB,EAAIwrB,EAAcxrB,EAAIqrB,IAAkBrrB,EAC/CkkB,EAAOxnB,MAAM,GAMf,OAJAgI,EAAK4B,OACD4d,EAAO5nB,SAAW+uB,GAClB,IAAM,4DAEHnH,EAGDwH,6BACJvB,EAAsBwB,EACtBL,EAA+BM,GACjC,MAAMC,EAAe1B,EAAS7tB,OACxB4nB,EAAmB,GACzB,IAAK,IAAIlkB,EAAI,EAAGA,EAAI6rB,EAAe,IAAK7rB,EAAG,CACzC,MAAMonB,EAAY+C,EAASnqB,EAAI,GAAKmqB,EAASnqB,GAC7C,IAAI8rB,EAAatsB,KAAK4mB,IAAIwF,EAAYxE,GAClC2E,EAA2BJ,EAAkB3rB,IAEf,IAA9B+rB,IACFD,EAAa,GAEf,IAAK,IAAI3oB,EAAI,EAAGA,EAAI2oB,IAAc3oB,EAChC+gB,EAAOxnB,KAAKqvB,GACZA,GAA4BT,EAE9B,IAAK,IAAInoB,EAAI,EAAGA,EAAIikB,EAAY0E,IAAc3oB,EAC5C+gB,EAAOxnB,MAAM,GAGjB,GAAImvB,EAAe,GAAK3H,EAAO5nB,SAAW6tB,EAAS0B,EAAe,GAChE,MAAM,IAAI3uB,MAAM,2BAGlB,OAAOgnB,EAwBD8H,+BACJzB,EAAyBoB,EACzBL,EAA+BM,GACjC,MAAMK,EAAY1B,EAAYjuB,OACxB4nB,EAAmB,GACzB,GAAkB,IAAd+H,EACF,MAAO,GAGT,IAAIC,EAAsB,EACtBC,EAAoB5B,EAAY,GAEpC,GAAI4B,GAAqBR,EAAkBrvB,OACzC,MAAM,IAAIY,MACN,yBAAyBivB,6BACrBR,EAAkBrvB,UAG5B,IAAImvB,EAAqBE,EAAkBQ,GAC3CjI,EAAOxnB,KAAK+uB,GACZ,IAAK,IAAIzrB,EAAI,EAAGA,EAAIisB,IAAajsB,EAAG,CAClC,MAAMosB,EAAiB7B,EAAYvqB,GACnC,GAAIosB,IAAmBD,EACjBV,GAAsB,MACtBS,EACEA,EAAsBN,EACxBH,GAAsBH,EAEtBG,GAAsB,OAGrB,CAIL,GAHAS,EAAsB,EACtBC,EAAoBC,EAEhBA,GAAkBT,EAAkBrvB,OACtC,MAAM,IAAIY,MACN,sBAAsBkvB,4BAClBT,EAAkBrvB,UAG5BmvB,EAAqBE,EAAkBS,GAEzClI,EAAOxnB,KAAK+uB,GAGd,GAAIvH,EAAO5nB,SAAWiuB,EAAYjuB,OAChC,MAAM,IAAIY,MAAM,oBAGlB,OAAOgnB,EAGDmI,qBACJ5C,EAAmBkC,EACnBL,EAA+BM,GACjC,MAAM/B,EAAqB3uB,KAAKyuB,sBAAsBF,GAChD6C,EAAgBpxB,KAAKsuB,+BAA+BC,GAC1D,OAAQ6C,GACN,KAAK3D,GAAiBmB,aACpB,OAAO5uB,KAAK8wB,+BACRnC,EAAoB8B,EAAmBL,EACvCM,GACN,KAAKjD,GAAiBqB,WACpB,GAAIH,EAAmBvtB,OAAS,EAAIqvB,EAAkBrvB,OACpD,MAAM,IAAIY,MAAM,mDACZ2sB,EAAmBvtB,OAAS,OAAOqvB,EAAkBrvB,UAE3D,OAAOpB,KAAKwwB,6BACR7B,EAAoB8B,EAAmBL,EACvCM,GACN,QACE,MAAM,IAAI1uB,MACN,+BAA+ByrB,GAAiB2D,OAIlDC,wBACN,MAAMC,EAAuBtxB,KAAK+tB,mBAAmB,GACrD,GAAsC,IAAlC/tB,KAAKkuB,kBAAkB9sB,OACzB,MAAM,IAAIY,MAAM,iCAElB,MAAMuvB,EAAqBvxB,KAAKkuB,kBAAkB,GAClD,OAAQqD,GACN,KAAK9D,GAAiBe,eACpB,OAAO8C,EAAqB,GAC9B,KAAK7D,GAAiBmB,aACpB,MAAM,IAAI5sB,MAAM,kDAClB,KAAKyrB,GAAiBqB,WACpB,OAAO9uB,KAAKguB,yBAAyB,GAAG,GAAK,EAC/C,QACE,MAAM,IAAIhsB,MACN,sBAAsByrB,GAAiB8D,OAIjD5mB,UAEE,GAD6B3K,KAAK+tB,mBAAmB,GAC5B3sB,QAAU,EACjC,MAAM,IAAIY,MACN,wEAGN,MAAMmuB,EAAiBnwB,KAAKqxB,wBACtBX,EAAa1wB,KAAK6vB,oBAAoBM,GACtCqB,EAAuB,IAAI3sB,MAAM7E,KAAKouB,WAAa,GAEzDoD,EAAWA,EAAWpwB,OAAS,GAAK,EACpC,IAAK,IAAI0D,EAAI0sB,EAAWpwB,OAAS,EAAG0D,GAAK,IAAKA,EAC5C0sB,EAAW1sB,GAAK0sB,EAAW1sB,EAAI,GAAK4rB,EAAW5rB,EAAI,GAGrD,MAAM2G,EAAwBmkB,GAAUc,GAAY,GAC9Ce,EACFjoB,EAAK4Z,kBACDpjB,KAAK4tB,YAAapkB,EAAK2M,cAAc1K,IAG7C,GADiB+lB,EAAW,GAAKd,EAAW,GAC7B,EAAG,CAChB,IAAIgB,EAAc1xB,KAAKkwB,gCACnBC,EAAgBqB,EAAW,GAAId,EAAW,IAC9C,IAAK,IAAI5rB,EAAI,EAAGA,GAAK9E,KAAKouB,aAActpB,EAAG,CAGzC4sB,EAFuB1xB,KAAKmxB,qBACxBrsB,EAAI,EAAG4sB,EAAaF,EAAW1sB,GAAI4rB,EAAW5rB,IAIpD9E,KAAK2xB,UAAU3xB,KAAKouB,WAAYsD,EAAaD,EAAchmB,GAG7D,MAAO,CAACA,EAAagmB,GAEvBE,UACIvD,EAAoBsD,EAAuBD,EAC3ChmB,GACF,GAA4B,IAAxBgmB,EAAarwB,OACf,OAGF,MAAMwwB,EAAa5xB,KAAKsR,OAClBugB,EAAaJ,EAEnB,IAAIK,EAAermB,EAAYjF,QAC/BsrB,EAAeA,EAAatrB,MAAM4nB,EAAa,GAC/C,MAAM2D,EAAmBvoB,EAAK2M,cAAc2b,GACtCE,EAAkBN,EAAYtwB,OAIpC,IAAIysB,EAAe7tB,KAAK6tB,aACxB,GAAIA,EAAazsB,SAAW2wB,GAA4C,IAAxBlE,EAAazsB,OAAc,CACzE,MAAM6wB,EAAWjyB,KAAK8tB,kBACtBoE,GAAK,KACH,MAAMC,EAAqBxO,EAAQkK,EAAcoE,GAC3CG,EAAeC,EAAYF,EAAoBL,GACrDjE,EAAeuE,EAAaE,UAAU,IAO1C,IAAIC,EAAW,EACXC,EAAW,EACXC,EAAS,EACb,IAAK,IAAIC,EAAO,EAAGA,GAAQV,IAAmBU,EAAM,CAElD,IAAIC,EAAOD,EAAOV,EAAkBN,EAAYgB,IAAS,EAIzD,GAAIC,IAASF,EAAb,CASA,GAAID,EAAWC,EAAQ,CAErB,MAAMG,EAAMhB,EAAWiB,SAASN,EAAWR,GAG3Ce,GAFYjB,EAAWgB,SAASL,EAAWT,GAE5Ba,GADAH,EAASD,GAAYT,GAKtC,GAAIW,GAAQV,EAAiB,CAE3B,MAAMtB,EAAae,EAAarwB,OAChCuxB,EAAOruB,KAAKimB,MAAMmG,EAAaqB,GAEjC,GAAIY,EAAOF,EACT,GAAiC,IAA7BzyB,KAAK6tB,aAAazsB,OACpBywB,EACKgB,SAASJ,EAASV,EAAkBY,EAAOZ,GAC3CjP,KAAK9iB,KAAK6tB,aAAa,IAC5B4E,EAASE,OAET,KAAOA,EAAOF,GAAQ,CAEpBK,GADYjB,EAAWrrB,MAAMisB,EAASV,GACvBlE,EAAckE,KAC3BU,EAMJE,EAAO,GAETJ,EAAWG,EAAO,EAClBF,EAAWC,IAGXF,EAAWG,EACXF,EAAWC,EACXA,EAASD,EAAW,SA9ClBC,IAoDV,SAASK,GAAU/Y,EAAiB6Y,EAAiBryB,GACnD,IAAK,IAAIuE,EAAI,EAAGA,EAAIvE,EAAMuE,IACxBiV,EAAIjV,GAAK8tB,EAAI9tB,EAEjB,CAEA,SAAS8qB,GAAUnrB,EAA4BkrB,GAC7C,MAAMpK,EAAgB,GACtB,IAAK,IAAI/X,KAAO/I,EAAO,CACrB,GAAI+I,EAAM,EAAG,CACX,IAAKmiB,EACH,MAAM,IAAI3tB,MAAM,aAAawL,kBAE/B,GAAIA,GAAO,EACT,MAAM,IAAIxL,MAAM,aAAawL,mBAE/BA,GAAO,EAET+X,EAAI/jB,KAAKgM,GAGX,OAAO+X,CACT,CC3bO,MAAMwN,GAAYlJ,IAAuBG,GAAO,EAAI1lB,KAAKsT,KAAKoS,KCA9D,MAAMgJ,GACTnJ,IAAuBG,GAAO,GAAK,EAAI1lB,KAAK6lB,KAAKH,MCD9C,MAAMiJ,GAAWpJ,IAAuBG,GAAO1lB,KAAKsT,KAAKoS,KCAnDkJ,GACTzK,KAA+BtE,EAAWjL,KACxC,MAAMia,EAAOhP,EAAIjL,EACjB,OAAOia,EAAOA,CACf,ICDL,MAAMC,GAQJtzB,YACIuzB,EAAmBC,EAAuBC,EAC1CC,EAAkBC,EAAkBC,GACtC1zB,KAAKqzB,UAAY7pB,EAAKiM,aAAa4d,GACnCrzB,KAAKszB,YAAcA,EACnBtzB,KAAKuzB,QAAU/pB,EAAKiM,aAAa8d,GACjCvzB,KAAKwzB,SAAWhqB,EAAKiM,aAAa+d,GAClCxzB,KAAKyzB,SAAWA,EAChBzzB,KAAK2zB,cAAgBD,EAGfE,YAAYC,GAIlB,OAAOvvB,KAAK4mB,IACRlrB,KAAKyzB,SAAW,EAAII,EAAa,EAAI7zB,KAAKyzB,SAAUI,EAAa,GAG/DC,aAAa1yB,EAAgByyB,GACnC,MAAMJ,EAAWzzB,KAAK4zB,YAAYC,GAClC,OAAOvvB,KAAKC,IAAI,EAAKnD,EAAS,EAAIqyB,EAAYI,EAAc,GAGtDE,aACJpnB,EAAoBqnB,EAAoB9uB,EACxC+uB,EAA0BC,EAAmBL,GAC/C,IAAK,IAAIM,EAAa,EAAGA,EAAaD,IAAaC,EAAY,CAC7D,MAAMV,EAAWzzB,KAAK4zB,YAAYC,GAC5BO,EAAc9vB,KAAKC,IAAI,EAAGkvB,EAAWU,GACrCE,EACF/vB,KAAKC,IAAI,EAAGkvB,GAAYS,GAAaC,EAAa,KAChDG,EAAYT,GAAcO,EAAcC,GACxCE,EACFP,GAAcI,EAAc,EAAI,EAAID,EAAaV,GAIrD,IAAIe,EAAY,EAEhBA,GAAaJ,EAAcp0B,KAAKuzB,QAAQnyB,OAExC,IAAK,IAAIqzB,EAAI,EAAGA,EAAIH,IAAaG,EAC/BD,GAAa7nB,EAAK4nB,EAAiBE,GAAGrzB,OAGxCozB,GAAaH,EAAer0B,KAAKwzB,SAASpyB,OAG1CozB,IADsBJ,EAAcC,EAAeC,EAAY,GAClCt0B,KAAKqzB,UAAUjyB,OAG5C8D,EAAO+uB,EAAmBE,GAAc,IAAIrnB,WAAW0nB,GACvD,MAAME,EAAQxvB,EAAO+uB,EAAmBE,GAExC,IAAIQ,EAAiB,EACrB,MAAMC,EAAiBC,GACnBA,EAAIlyB,SAASugB,GAAUwR,EAAMC,KAAoBzR,IAErD,IAAK,IAAIuR,EAAI,EAAGA,EAAIL,IAAeK,EACjCG,EAAc50B,KAAKuzB,SACnBqB,EAAc50B,KAAKqzB,WAGrB,IAAK,IAAIoB,EAAI,EAAGA,EAAIH,EAAY,IAAKG,EACnCG,EAAcjoB,EAAK4nB,EAAiBE,IACpCG,EAAc50B,KAAKqzB,WAIrB,GAAIiB,EAAY,EAAG,CAIjBM,EAAcjoB,EAAK4nB,EAAiBD,EAAY,IAChD,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,IAAgBI,EAClCG,EAAc50B,KAAKqzB,WACnBuB,EAAc50B,KAAKwzB,cAEhB,CAKL,IAAK,IAAIiB,EAAI,EAAGA,EAAIJ,EAAe,IAAKI,EACtCG,EAAc50B,KAAKwzB,UACnBoB,EAAc50B,KAAKqzB,WAErBuB,EAAc50B,KAAKwzB,YAQlB7oB,QAAQgC,EAAoBmf,GAIjC,MAAMgJ,EAAgBnoB,EAAKvL,OACrB2zB,EAAajJ,EAAO1qB,OAC1B,GAAI2zB,EAAa,EAAG,CAClB,IAAIC,EAAYlJ,EAAO,GACvB,GAAkB,IAAdkJ,EACF,MAAM,IAAIhzB,MAAM,oCAAoCgzB,KAEtD,IAAK,IAAIlwB,EAAI,EAAGA,EAAIiwB,IAAcjwB,EAAG,CACnC,IAAImwB,EAAcnJ,EAAOhnB,IAAMkwB,EAE/B,GADAC,EAAcA,GAAgBnJ,EAAOhnB,IAAMgwB,GACtCG,EACH,MAAM,IAAIjzB,MAAM,uBAAuB8pB,EAAOhnB,mBAC1CkwB,MAAcF,MAEpBE,EAAYlJ,EAAOhnB,GAErB,GAAIkwB,IAAcF,EAChB,MAAM,IAAI9yB,MAAM,gDACZ8yB,UAAsBE,KAI9B,MAAME,EAAgBH,EAAa,EAC7BI,EAAe3rB,EAAK4Z,kBAAkB,QAAS2R,GAErD,GAAsB,IAAlBD,GAAsC,IAAfC,EAAkB,CAC3C,MAAMK,EAAsB,IAAIvwB,MAAMiwB,GACtC,IAAK,IAAIhwB,EAAI,EAAGA,GAAKowB,IAAiBpwB,EACpCqwB,EAAarwB,GAAK,EAEpB,MAAO,CAACswB,EAAOD,GAGjBA,EAAa,GAAK,EAClB,IAAK,IAAIrwB,EAAI,EAAGA,GAAKowB,IAAiBpwB,EAAG,CACvC,MAAM1D,EAAS0qB,EAAOhnB,GAAKgnB,EAAOhnB,EAAI,GACtC,IAAIovB,EAAY,EAChBl0B,KAAKszB,YAAY3wB,SAASkxB,IACxBK,GAAal0B,KAAK8zB,aAAa1yB,EAAQyyB,EAAW,IAEhD7zB,KAAK2zB,eAAiBvyB,EAAS,GAAmB,IAAd8yB,IACtCA,EAAY,GAEdiB,EAAarwB,GAAKqwB,EAAarwB,EAAI,GAAKovB,EAG1C,MAAMmB,EAAuB,IAAIxwB,MAAMswB,EAAaD,IAEpD,IAAK,IAAIpwB,EAAI,EAAGA,EAAIowB,IAAiBpwB,EAAG,CACtC,MAAMkvB,EAAalI,EAAOhnB,GAC1B,IAAIwwB,EAAiBH,EAAarwB,GAalC,GAZA9E,KAAKszB,YAAY3wB,SAASkxB,IACxB,MAAMzyB,EAAS0qB,EAAOhnB,EAAI,GAAKgnB,EAAOhnB,GAChCovB,EAAYl0B,KAAK8zB,aAAa1yB,EAAQyyB,GAC5C7zB,KAAK+zB,aACDpnB,EAAMqnB,EAAYqB,EAAQC,EAAgBpB,EAAWL,GACzDyB,GAAkBpB,CAAS,IAOzBl0B,KAAK2zB,eAAiB2B,IAAmBH,EAAarwB,GAAI,CAC5D,MAAMywB,EAAazJ,EAAOhnB,EAAI,GAAKgnB,EAAOhnB,GAG1C,GAAmB,IAAfywB,EACF,SAKF,MAAM1B,EAAa0B,EAAa,EAAIv1B,KAAKyzB,SACnCS,EAAY,EAClBl0B,KAAK+zB,aACDpnB,EAAMqnB,EAAYqB,EAAQC,EAAgBpB,EAAWL,IAG7D,MAAO,CAACwB,EAAQF,ICjMpB,SAASK,GACLX,EAAiBY,EAAwBC,EACzC1M,GACF,IAAK6L,EAAIzzB,OACP,OAGF,GAA0B,IAAtBq0B,EAAWr0B,OAAc,CAC3B,IAAK,IAAI0D,EAAI,EAAGA,EAAI+vB,EAAIzzB,SAAU0D,EAChCkkB,EAAOxnB,KAAKqzB,EAAIhC,SAAS/tB,EAAGA,EAAI,IAElC,OAGF,GAA0B,IAAtB2wB,EAAWr0B,OAAc,CAC3B,MAAMu0B,EAAYF,EAAW,GAC7B,IAAIphB,EAAIwgB,EAAI9yB,QAAQ4zB,GACpB,MAAc,IAAPthB,GAAU,CACf,MAAMuhB,EAAQf,EAAIhC,SAAS,EAAGxe,GACzBqhB,GAA8B,IAAjBE,EAAMx0B,QACtB4nB,EAAOxnB,KAAKo0B,GAGdvhB,GADAwgB,EAAMA,EAAIhC,SAASxe,EAAI,IACftS,QAAQ4zB,GAKlB,YAHKD,GAA4B,IAAfb,EAAIzzB,QACpB4nB,EAAOxnB,KAAKqzB,IAMhB,IAAIgB,EAAa,EACjB,IAAK,IAAI/wB,EAAI,EAAGA,EAAI+vB,EAAIzzB,OAAS,EAAG0D,IAClC,GAAKA,IAAM+vB,EAAIzzB,SAA4C,IAAhCq0B,EAAW1zB,QAAQ8yB,EAAI/vB,IAAa,CAC7D,MAAM8wB,EAAQf,EAAIhC,SAASgD,EAAY/wB,GAClC4wB,GAA8B,IAAjBE,EAAMx0B,QACtB4nB,EAAOxnB,KAAKo0B,GAEdC,EAAa/wB,EAAI,EAGvB,CCvCO,MAAMgxB,GAAUrN,KACjBsC,EAAgBC,IAAmBD,EAASC,ICGlD,MAAM+K,GAAc,CAAC5R,EAASjL,KAC5B,MAAM8c,EAAY9c,EAAEgK,MAAQiB,EAAEjB,MAC9B,OAAqB,IAAd8S,EAAkB7R,EAAErZ,MAAQoO,EAAEpO,MAAQkrB,CAAS,EAcxD,SAASC,GAAOC,EAAeC,EAAWC,EAAO,EAAGC,EAAQH,EAAM90B,OAAS,GACzE,KAAOi1B,EAAQD,GAAM,CAInB,GAAIC,EAAQD,EAAO,IAAK,CACtB,MAAM3B,EAAI4B,EAAQD,EAAO,EACnBtxB,EAAIqxB,EAAIC,EAAO,EACfzuB,EAAIrD,KAAKumB,IAAI4J,GACbvqB,EAAI,GAAM5F,KAAK6lB,IAAI,EAAIxiB,EAAI,GAC3B2uB,EAAK,GAAMhyB,KAAKsT,KAAKjQ,EAAIuC,GAAKuqB,EAAIvqB,GAAKuqB,GAAKnwB,KAAKiyB,KAAKzxB,EAAI2vB,EAAI,GAGpEwB,GAAOC,EAAOC,EAFE7xB,KAAKC,IAAI6xB,EAAM9xB,KAAKimB,MAAM4L,EAAIrxB,EAAIoF,EAAIuqB,EAAI6B,IACzChyB,KAAK4mB,IAAImL,EAAO/xB,KAAKimB,MAAM4L,GAAK1B,EAAI3vB,GAAKoF,EAAIuqB,EAAI6B,KAIpE,MAAMpiB,EAAIgiB,EAAMC,GAChB,IAAIrxB,EAAIsxB,EACJnuB,EAAIouB,EAOR,IALA7sB,EAAKgtB,KAAKN,EAAOE,EAAMD,GAEnBJ,GAAYG,EAAMG,GAAQniB,GAAK,GACjC1K,EAAKgtB,KAAKN,EAAOE,EAAMC,GAElBvxB,EAAImD,GAAG,CAIZ,IAHAuB,EAAKgtB,KAAKN,EAAOpxB,EAAGmD,GACpBnD,IACAmD,IACO8tB,GAAYG,EAAMpxB,GAAIoP,GAAK,GAChCpP,GAAQ,EAEV,KAAOixB,GAAYG,EAAMjuB,GAAIiM,GAAK,GAChCjM,GAAQ,EAGwB,IAAhC8tB,GAAYG,EAAME,GAAOliB,GAC3B1K,EAAKgtB,KAAKN,EAAOE,EAAMnuB,IAEvBA,GAAQ,EACRuB,EAAKgtB,KAAKN,EAAOjuB,EAAGouB,IAIlBpuB,GAAKkuB,IACPC,EAAOnuB,EAAI,GAETkuB,GAAKluB,IACPouB,EAAQpuB,EAAI,GAGlB,+CCvE8B+K,GAC5B,MAAMyjB,EAAe,IAAI7pB,aAAaoG,EAAK5R,QAC3C,IAAK,IAAI0D,EAAI,EAAGA,EAAIkO,EAAK5R,SAAU0D,EACjC2xB,EAAa3xB,GAAKR,KAAKoyB,IAAI1jB,EAAKlO,IAElC,OAAO2xB,CACT,mCCRIE,EAAmBC,EAAyBC,EAC5CC,EAAwBv2B,GAC1B,MAAMw2B,EAAcvtB,EAAK2M,cAAc2gB,GACjCE,EAAUxtB,EAAKytB,oBAAoB12B,EAAMs2B,GAE/C,IAAK,IAAI/xB,EAAI,EAAGA,EAAI6xB,EAAMv1B,OAAQ0D,IAAK,CACrC,MAAMoe,EAAQyT,EAAM7xB,GACpB,GAAIoe,EAAQ,EACV,MAAM,IAAIlhB,MAAM,iCAGdkhB,GAAS3iB,IAKXy2B,EAAQ9T,IADN6T,EAAc,EACEH,EAAY9xB,GAEZ,GAItB,OAAOkyB,CACT,8BAGIE,EAAuBC,EAA6B52B,EACpD62B,GAAe,GACjB,MAAMC,EAAUH,EAAKzyB,MAAM,GACrB6yB,EAAUJ,EAAKzyB,MAAM,GAErB8yB,EAAS31B,EAAO,CAACy1B,EAAS92B,GAAO42B,EAAWxxB,OAElD,IAAK,IAAIb,EAAI,EAAGA,EAAIuyB,EAASvyB,IAC3B,IAAK,IAAImD,EAAI,EAAGA,EAAIqvB,EAASrvB,IAAK,CAChC,MAAMib,EAAQgU,EAAK/1B,IAAI2D,EAAGmD,GAC1B,GAAIib,EAAQ,EACV,MAAM,IAAIlhB,MAAM,iCAGdkhB,GAAS3iB,IAIT62B,EACFG,EAAOx2B,IAAI,EAAG+D,EAAGoe,GAEbiU,EAAW52B,KAAO,EACpBg3B,EAAOx2B,IAAIw2B,EAAOp2B,IAAI2D,EAAGoe,GAASiU,EAAWh2B,IAAI2D,EAAGmD,GAAInD,EAAGoe,GAE3DqU,EAAOx2B,IAAIw2B,EAAOp2B,IAAI2D,EAAGoe,GAAS,EAAGpe,EAAGoe,IAMhD,OAAOqU,CACT,oBClDIjmB,EAAoB7M,EAAiB+yB,EACrC7xB,GACF,GAAc,UAAVA,EAAmB,CAErB,MAAO,CAAClB,EAAO,QADMoI,WAAWE,KAAKuE,IAIvC,GAAc,SAAV3L,EAAkB,CAIpB,MAAM8xB,EAAOjuB,EAAKkuB,aAAa,CAAC,GAAIF,IAE7BG,EAAYC,GAAenP,IAC9B,CAACtE,EAAGjL,IAAOiL,IAAMjL,EAAK,EAAI,GADIuP,CACDhkB,EAAO,GAAI6M,EAAQmmB,EAAM,QAE1D,MAAO,CAACG,EAAa,OAAQD,GAE/B,MAAM,IAAI31B,MAAM,iCAAiCw1B,QAAgB7xB,IACnE,kCC1BIuD,EAAuD1B,EACvD7B,EAAiBkyB,GACnB,MAAMb,EAAUxtB,EAAK4Z,kBAAkBzd,EAAO6D,EAAK2M,cAAc3O,IAEjE,GAAIqwB,GAA0B,WAAVlyB,EAAoB,CAEtC,IAAIoQ,EAAS,EACb7M,EAAOvG,SAAQwV,IACb,MAAM5X,EAAOiJ,EAAK2M,cAAcgC,EAAM1T,OAErCuyB,EAAuBj2B,IAAIoX,EAAMnF,KAAoB+C,GACtDA,GAAUxV,CAAI,QAEX,CACL,IAAIu3B,EAAY,EAEhB5uB,EAAOvG,SAAQwV,IACb,MAAM4f,EAAwB,WAAVpyB,EAChBgE,EAAa4e,uBAAuBpQ,EAAMnF,MAC1CmF,EAAMnF,KAEV,IAAIglB,EAAO,EAEX,IAAK,IAAIC,EAAM,EAAGA,EAAM9f,EAAM1T,MAAM,KAAMwzB,EAAK,CAC7C,MAAMC,EAASD,EAAMzwB,EAAS,GAAKswB,EACnC,IAAK,IAAIK,EAAM,EAAGA,EAAMhgB,EAAM1T,MAAM,KAAM0zB,EACxCnB,EAAQkB,EAASC,GAAOJ,EAAYC,KAIxCF,GAAa3f,EAAM1T,MAAM,EAAE,IAI/B,OAAOuyB,CACT,0ECnCIoB,EAAyBC,EAA4B1yB,EACrD2yB,EAAmBC,EAAmBC,EAAmB5zB,EACzD6zB,EAAuBC,GACzB,MAAMnB,EAAS31B,EAAO,CAAC02B,EAAWE,GAAY7yB,GAE9C,IAAK,IAAIb,EAAI,EAAGA,EAAIwzB,EAAWxzB,IAAK,CAClC,MAAMgG,EAAQ,GACd,IAAI6tB,EAAe,EACnB,IAAK,IAAI1wB,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAClC,MAAMuF,EAAM4qB,EAAYtzB,EAAIyzB,EAAYtwB,GACxC0wB,GAAgBnrB,EAAM5I,EAAQqD,GAC9B6C,EAAMtJ,KAAKgM,GAEb,GAAImrB,EAAe,GAAKA,GAAgBD,EAAaF,EACnD,MAAM,IAAIx2B,MACN,oBAAoB8I,yBAA6B2tB,KAGvD,IAAK,IAAItC,EAAI,EAAGA,EAAIqC,EAAWrC,IAC7BoB,EAAOjmB,OAAOxM,EAAI0zB,EAAYrC,GAC1BkC,EAAUl3B,OAAOk3B,EAAU/O,WAAWqP,EAAeH,EAAYrC,IAIzE,OAAOoB,CACT,wBCzBIL,EAA0B0B,EAC1BC,GACF,MAAMtB,EAAS31B,EAAOi3B,EAAoB3B,EAAKvxB,OAC/C,IAAK,IAAIb,EAAI,EAAGA,EAAIyyB,EAAOh3B,OAAQuE,EAAG,CACpC,MAEMg0B,EAFSvB,EAAOjO,WAAWxkB,GAEI0B,QAC/BuyB,EAAWD,EAAY,GACvBE,EAAaF,EAAY,GACzBG,EAAeL,EAAWnP,WAAW,CAACsP,EAAUC,IACtDF,EAAY,GAAKF,EAAWtnB,OAAO2nB,GAEnC,MAAMC,EAAgBhC,EAAKzN,WAAWqP,GAElC,GAAKI,GAAiBA,EAAgBhC,EAAK5lB,OAAOlQ,SACpDm2B,EAAOjmB,OAAOxM,GAAKoyB,EAAK5lB,OAAO4nB,IAInC,OAAO3B,CACT,wFCpBIpL,EAAegN,EAAcC,GAC/B,MAAMC,GAAQF,EAAOhN,IAAUiN,EAAM,GAE/B9nB,EAAS9H,EAAKytB,oBAAoBmC,EAAK,WAC7C9nB,EAAO,GAAK6a,EACZ,IAAK,IAAIrnB,EAAI,EAAGA,EAAIwM,EAAOlQ,OAAQ0D,IACjCwM,EAAOxM,GAAKwM,EAAOxM,EAAI,GAAKu0B,EAG9B,OAAO/nB,CACT,8BCVIoX,EAAmB4Q,EAAoB9xB,EACvC7B,GACF,MAAMqN,EAAOxJ,EAAK+N,uBACd5R,EAA0B6D,EAAK2M,cAAc3O,IAEjD,IAAK,IAAI1C,EAAI,EAAGA,EAAIkO,EAAK5R,SAAU0D,EAAG,CACpC,MAAMiR,EAASjR,EAAIw0B,EACnB,IAAI/0B,EAAMmkB,EAAM3S,GAChB,IAAK,IAAI9N,EAAI,EAAGA,EAAIqxB,IAAcrxB,EAAG,CACnC,MAAMib,EAAQwF,EAAM3S,EAAS9N,IACzBmS,OAAOmf,MAAMrW,IACbA,EAAQ3e,KACVA,EAAM2e,GAGVlQ,EAAKlO,GAAKP,EAEZ,OAAOyO,CACT,iECfwB2jB,EAAmB6C,EAAkBC,GAE3D,MAAMC,EACFlwB,EAAKmwB,mBAAmB,EAAsBF,GAClD,OAAOtO,GAAa,GAAIqO,EAAQE,EAAU/C,EAAO8C,EACnD,oCCJID,EAAkBC,EAAkB9C,EACpCiD,GAEF,MAAOpyB,EAAUqyB,GACblwB,EAAamwB,0BAA0BN,EAAQI,GAC7CG,EAAW7R,EAAWuR,EAAQ,SAC9BzC,EAAUxtB,EAAKytB,oBACDztB,EAAK2M,cAAc3O,GAAWuyB,GAC5CT,EAAa9vB,EAAK2M,cAAc0jB,GAEtC,IAAK,IAAI/0B,EAAI,EAAGA,EAAIkyB,EAAQ51B,SAAU0D,EAAG,CACvC,MAAMiR,EAASjR,EAAIw0B,EACnB,IAAIU,EAAO,EACX,IAAK,IAAI/xB,EAAI,EAAGA,EAAIqxB,IAAcrxB,EAChC+xB,GAAQrD,EAAM5gB,EAAS9N,GAEzB+uB,EAAQlyB,GAAKk1B,EAGf,MAAO,CAAChD,UAASxvB,WAAUuyB,WAC7B,4BnBqJIvO,EAAkCyO,EAClCnN,EAA+BC,EAC/BC,EAAkC1B,EAClCC,EACA2O,GACF,GAAkC,IAA9B1O,EAAmBpqB,OACrB,MAAM,IAAIY,MAAM,wCAGlB,GAA2C,IAAvCi4B,EAAyB,GAAG74B,OAC9B,MAAM,IAAIY,MAAM,qCAKlB,GA7LF,SACIspB,EAAqBC,EAAwB4O,GAC/C7O,EAAQ3oB,SAAQ,CAACmI,EAAehG,KAC9B,GAAIgG,EAAQ,GAAKA,GAASqvB,EAAW,CACnC,MAAMC,EACF5wB,EAAK8f,WACGxkB,EAAGymB,EAAanqB,OAAQoI,EAAK0B,eAAeqgB,IAC/CzlB,KAAK,KACd,MAAM,IAAI9D,MACN,WAAWo4B,QAAgBtvB,mBAAuBqvB,SAG5D,CA+KEE,CAAgB/O,EAASC,EADP0O,EAAyB,GAAG,GAAK,GAGb,IAAlClN,EAAuB3rB,OACzB,MAAM,IAAIY,MAAM,+BAElB,MAAMypB,EAAuBsB,EAAuB,IAI9ClB,UAACA,EAASH,YAAEA,EAAWC,UAAEA,GAAaN,GACxCC,EAASC,EAAcC,EAAoBC,GAGzC6O,EA7FR,SAAmBzO,GACjB,MAAM0O,EAA0B,GAChC,IAAK,IAAIz1B,EAAI,EAAGA,EAAI+mB,EAAUzqB,SAAU0D,EAAG,CACzC,MAAM8mB,EAAYC,EAAU/mB,GAAG1D,OACzB0qB,EAAStiB,EAAK4Z,kBAAkB,QAASwI,GAC/C2O,EAAU/4B,KAAKsqB,GAEfD,EAAU/mB,GAAGnC,SAAQ,CAACugB,EAAOjb,IAAc6jB,EAAO7jB,GAAKib,IAGzD,OAAOqX,CACT,CAkF6BC,CAAU3O,GAC/B4O,EAAoB5N,GACtBC,EAAmBC,EAAwBC,EAC3CtB,EAAaC,GAEjB,MAAO,CAAC2O,EAAoBG,EAAkB,GAAIA,EAAkB,GACtE,oCCmPIh2B,EAAmBi2B,EAAuBppB,EAC1C2b,EAAuBW,EAAuBC,EAC9CC,EAA6BC,EAC7BC,EACAE,GACF,OAAO,IAAIR,GACAjpB,EAAOi2B,EAAappB,EAAQ2b,EAAaW,EAAaC,EACtDC,EAAmBC,EAAoBC,EACvCE,GACNvjB,SACP,qBmB1cIwhB,EAAegN,EAAcE,EAC7B1zB,GAKF,GAJsBwmB,IAAUgN,GACIhN,EAAQgN,GAAQE,EAAO,GACvBF,EAAOhN,GAASkN,EAAO,EAIzD,OAAO7vB,EAAKytB,oBAAoB,EAAGtxB,GAGrC,MAAMwnB,EAAc7oB,KAAKoyB,IAAIpyB,KAAKwH,MAAMqtB,EAAOhN,GAASkN,IAClD/nB,EAAS9H,EAAKytB,oBAAoB9J,EAAaxnB,GAEjDwzB,EAAOhN,GAAkB,IAATkN,IAGlBA,GAAQ,GAGV/nB,EAAO,GAAK6a,EACZ,IAAK,IAAIrnB,EAAI,EAAGA,EAAIwM,EAAOlQ,OAAQ0D,IACjCwM,EAAOxM,GAAKwM,EAAOxM,EAAI,GAAKu0B,EAE9B,OAAO/nB,CACT,oCClBIga,EAAmCqP,EACnCl2B,EAAiBisB,EAAoB8H,EAAmBoC,EACxDrC,EAAmB3zB,EAAmBipB,EACtCgN,GACF,MAAMC,EAAe,CAACpK,EAAa8H,EAAWA,GAExCJ,EAAc9M,EAAQha,OACtBypB,EAAcJ,EAAQrpB,OAE5B,GAAmB,IAAfof,EACF,OAAO9uB,EAAO6C,EAAsBk2B,EAAQh1B,OAG9C,MAAM4xB,EAAS31B,EAAOk5B,EAAcH,EAAQh1B,OAChB,iBAAjBkoB,GAEwB,iBAAjBA,EADf0J,EAAOjmB,OAAoBwR,KAAK+K,GAGA,kBAAjBA,GACf0J,EAAOjmB,OAAsBwR,MAAM+K,GAGtC,IAAK,IAAI/oB,EAAI,EAAGA,EAAI81B,EAAY91B,IAAK,CACnC,MAAMgG,EAAQ,GACd,IAAI6tB,EAAe,EACnB,IAAK,IAAI1wB,EAAI,EAAGA,EAAIswB,EAAWtwB,IAAK,CAClC,MAAMuF,EAAM4qB,EAAYtzB,EAAIyzB,EAAYtwB,GACxC6C,EAAMtJ,KAAKgM,GACXmrB,GAAgBnrB,EAAM5I,EAAQqD,GAGhC,GAAI0wB,EAAe,GAAKA,GAAgBjI,EAAa8H,EACnD,MAAM,IAAIx2B,MAAM,oBAAoB8I,yBAA6BrG,KAGnE,IAAK,IAAI0xB,EAAI,EAAGA,EAAIqC,EAAWrC,IACzB0E,EACDtD,EAAOjmB,OAAsBqnB,EAAeH,EAAYrC,IACpD4E,EAA2Bj2B,EAAI0zB,EAAYrC,GAEhDoB,EAAOjmB,OAAOqnB,EAAeH,EAAYrC,GAAsB,IAAjBwE,EAAQ9yB,KAClDkzB,EAAY,GACZA,EAAYj2B,EAAI0zB,EAAYrC,GAKtC,OAAOoB,CACT,oCCpDIvkB,EAAqBgoB,EAAiBz6B,EAAgBkE,EACtDkB,GACF,MAAMs1B,EAAcC,EAAWC,iBAAiB12B,EAAOu2B,EAAOz6B,GACxDa,EAASoI,EAAK2M,cAAc5V,GAC5B66B,EAAW5xB,EAAK0B,eAAezG,GAErC,GAAIw2B,EAAa,CACf,MAAMI,EAAaH,EAAWI,kBAAkBN,EAAOI,GAEvD,MAAc,WAAVz1B,EACMqN,EAAsBxM,MAAM60B,EAAYA,EAAaj6B,GAGvD4R,EAAoB6f,SAASwI,EAAYA,EAAaj6B,GAGhE,MAAM22B,EAAwB,WAAVpyB,EAChBgE,EAAa4e,uBAAuBvV,GACpCA,EAEEuoB,EAAQ35B,EAAO6C,EAAOkB,EAAOoyB,GAC7BR,EAAS31B,EAAOrB,EAAMoF,GAC5B,IAAK,IAAIb,EAAI,EAAGA,EAAIyyB,EAAOh3B,OAAQuE,EAAG,CACpC,MAAM02B,EAASjE,EAAOjO,WAAWxkB,GAC3B22B,EAAQD,EAAO92B,KAAI,CAACg3B,EAAazzB,IAAMyzB,EAAMV,EAAM/yB,KACzDsvB,EAAOx2B,IAAIw6B,EAAMp6B,OAAOs6B,MAAWD,GAGrC,MAAc,WAAV71B,EACKgE,EAAagyB,uBAAuBpE,EAAOjmB,QAE7CimB,EAAOjmB,MAChB,mCCnCIga,EAAqBC,EAAwBqQ,EAC7CtqB,EAAoBsc,EAAuBiO,EAC3ChO,GAEF,MAAMiO,EAAevQ,EAAa,GAC5BwQ,EAAYF,EAAW,GAEvBG,EAA+B,IAAIn3B,MAAMk3B,GACzCE,EAA4B,IAAIp3B,MAAMi3B,GAEtCj0B,EAAO0jB,EAAa,GAE1B,GAAkB,IAAdwQ,EAAiB,CACnB,GAAqB,IAAjBD,EACF,MAAM,IAAI95B,MACN2H,EAAauyB,gDACTJ,IAIV,MAAO,CAFetyB,EAAK4Z,kBAAkBwY,EAAc,GAG1C,CAAC,EAAG/zB,GAFA2B,EAAK4Z,kBAAkBwK,EAAa,GAEfoO,EAAmBC,GAI/D,IAAIE,GAAiB,EACjBC,EAAiB,EACrB,MAAMC,EAAsB,IAAIx3B,MAAMk3B,GAAWjZ,KAAK,GAEtD,IAAK,IAAIhe,EAAI,EAAGA,EAAIg3B,IAAgBh3B,EAAG,CAErC,MAAMmzB,EAAM3M,EAAQxmB,EAAI+C,GACxB,GAAIowB,EAAM,EACR,MAAM,IAAIj2B,MACN2H,EAAa2yB,gDAAgDx3B,EAAGmzB,IAEtE,GAAIA,GAAO8D,EACT,MAAM,IAAI/5B,MACN2H,EAAa4yB,kDACTz3B,EAAGmzB,EAAK8D,MAEhBM,EAAUpE,GACZkE,EAAiBA,GAAmBlE,GAAOmE,EAC3CA,EAAiBnE,EAGnB,IAAIuE,GAAc,EAClB,IAAK,IAAIvE,EAAM,EAAGA,EAAM8D,IAAa9D,EAAK,CAExC,MAAMwE,EAA+B,IAAnBJ,EAAUpE,GAC5B+D,EAAkB/D,GAAOwE,EACzBD,EAAcA,IAAgBC,EAE9BJ,EAAUpE,GAAO3zB,KAAKC,IAAI83B,EAAUpE,GAAM,GAOtCA,EAAM,IACRoE,EAAUpE,IAAQoE,EAAUpE,EAAM,IAItC,GAAIuE,GAAeL,EAAgB,CACjC,MAAMO,EAA4BpR,EAC5BqR,EAA2BrrB,EACjC,IAAK,IAAIxM,EAAI,EAAGA,EAAIg3B,IAAgBh3B,EAClCm3B,EAAgBn3B,GAAKA,EAEvB,MAAO,CACL43B,EAAe,CAACZ,EAAcj0B,GAAO80B,EAAcX,EACnDC,GAEG,CACL,MAAMW,EAAmBP,EAAUN,EAAY,GACzCW,EACFlzB,EAAK4Z,kBAAkBwY,EAAcgB,EAAmB/0B,GAEtD80B,EACFnzB,EAAK4Z,kBAAkBwK,EAAagP,GAClCC,EAAwB,IAAIh4B,MAAMk3B,GAAWjZ,KAAK,GAGxD,IAAK,IAAIhe,EAAI,EAAGA,EAAIg3B,IAAgBh3B,EAAG,CAErC,MAAMmzB,EAAM3M,EAAQxmB,EAAI+C,GAClBkO,EAAS8mB,EAAY5E,GACrB6E,GAAoB,IAAR7E,EAAa,EAAIoE,EAAUpE,EAAM,IAAMliB,EACzD8mB,EAAY5E,KACZ,IAAK,IAAIhwB,EAAI,EAAGA,EAAIJ,IAAQI,EAE1By0B,EAAcI,EAAUj1B,EAAOI,GAAKqjB,EAAQxmB,EAAI+C,EAAOI,GAEzD00B,EAAaG,GAAWxrB,EAAOxM,GAE/Bm3B,EAAgBn3B,GAAKg4B,EAIvB,IAAK,IAAI7E,EAAM,EAAGA,EAAM8D,IAAa9D,EAAK,CAExC,GAAiB,IADA4E,EAAY5E,GACT,CAClB,MAAM8E,EAAyB,IAAR9E,EAAa,EAAIoE,EAAUpE,EAAM,GAIxDyE,EAAcK,EAAgBl1B,EAAO,GAAKowB,EAC1C,IAAK,IAAIE,EAAM,EAAGA,EAAMtwB,IAAQswB,EAC9BuE,EAAcK,EAAgBl1B,EAAOswB,GAAO,EAE9CwE,EAAaI,GAAiBlP,GAGlC,MAAO,CACL6O,EAAe,CAACE,EAAkB/0B,GAAO80B,EAAcX,EACvDC,GAGN,6BCxHIe,EAA0BC,EAA6BC,EACvDC,EACAC,GACF,MAAMC,EAAY7zB,EAAK2M,cAAcgnB,GAC/BG,EAAML,EAAkB,GACxBM,EAAaH,EAAYh8B,OAIzBqK,EAAwB,GAC9B,IAAIF,EAAU,EACViyB,GAAgB,EACpB,IAAK,IAAI74B,EAAI,EAAGA,EAAI44B,IAAc54B,EAAG,CACnC,MAAMpE,EAAO68B,EAAYz4B,GACzB,IAAc,IAAVpE,EAAa,CACf,IAAsB,IAAlBi9B,EACF,MAAM,IAAIx7B,MACN2H,EACK8zB,yDACGD,EAAc74B,IAE5B64B,EAAe74B,EACf8G,EAAYjK,KAAK,OACZ,CACL,GAAIjB,EAAO,EACT,MAAM,IAAIyB,MACN2H,EAAa+zB,8CACT/4B,EAAGpE,IAEbgL,GAAWhL,EACXkL,EAAYjK,KAAKjB,IAGrB,IAAsB,IAAlBi9B,EAAqB,CACvB,GAAIjyB,GAAW,EACb,MAAM,IAAIvJ,MACN2H,EAAag0B,wDAEnB,MAAMC,EAAUt5B,KAAKu5B,MAAMR,EAAY9xB,GACvC,GAAIA,EAAUqyB,IAAYP,EACxB,MAAM,IAAIr7B,MACN2H,EAAam0B,gDACTX,EAAY1xB,IAGtBA,EAAY+xB,GAAgBI,EAG9B,GADmBp0B,EAAK2M,cAAc1K,KACnB4xB,EACjB,MAAM,IAAIr7B,MACN2H,EAAao0B,gDACTZ,EAAY1xB,IAGtB,MAAMuyB,EAAYb,EAAW/7B,OACvB68B,EAAyB,GAC/B,GAAID,EAAY,EAAG,CACjBC,EAAaD,EAAY,GAAK,EAC9B,IAAK,IAAIr5B,EAAIq5B,EAAY,EAAGr5B,GAAK,IAAKA,EACpCs5B,EAAat5B,GAAKs5B,EAAat5B,EAAI,GAAKw4B,EAAWx4B,EAAI,GAI3D,MAAMu5B,EAA0B,GAChC,GAAIX,EAAa,EAAG,CAClBW,EAAcX,EAAa,GAAK,EAChC,IAAK,IAAI54B,EAAI44B,EAAa,EAAG54B,GAAK,IAAKA,EACrCu5B,EAAcv5B,GAAKu5B,EAAcv5B,EAAI,GAAK8G,EAAY9G,EAAI,GAI9D,MAAMw5B,EACF30B,EAAK4Z,kBAAkB8Z,EAAYI,EAAMC,GAC7C,IAAK,IAAIz4B,EAAI,EAAGA,EAAIw4B,IAAOx4B,EAAG,CAC5B,IAAIyM,EAAK,EACT,IAAK,IAAItJ,EAAI,EAAGA,EAAI+1B,IAAa/1B,EAE/BsJ,GAAMyrB,EAAal4B,EAAIk5B,EAAY/1B,GAAKg2B,EAAah2B,GAEvD,IAAK,IAAIA,EAAI,EAAGA,EAAIs1B,IAAct1B,EAEhCk2B,EAAWr5B,EAAIy4B,EAAat1B,GAAK3D,KAAKu5B,MAAMtsB,EAAK2sB,EAAcj2B,IAC/DsJ,GAAM2sB,EAAcj2B,GAGxB,MAAO,CAACk2B,EAAY,CAACb,EAAKC,GAAa9xB,EACzC,sCCtFI0M,EAAmBglB,EAAsBD,EACzC5R,EAAqB8S,EAAwBC,GAAS,EACtDxQ,EAAe,GACjB,MAAMyQ,EAAahT,EAAQlqB,OAGrBm9B,EAAsB,CAACpB,EAAW,GAAIhlB,EAAM/W,OAAS+7B,EAAW,IAChEqB,EAASD,EAAU,GAKnBE,EADFH,EAAa,EAAIF,EAAWE,EAAa,GAAK,EAAI,EAGtD,GAAIG,EAAa,EACf,MAAM,IAAIz8B,MACN2H,EAAa+0B,2DAGnB,MAAMjzB,EAAc0xB,EAAW32B,QAC/BiF,EAAY,GAAKgzB,EAEjB,MAAME,EACFlzB,EAAYmzB,QAAO,CAACrzB,EAAS2X,IAAU3X,EAAU2X,GAAO,GAEtDhe,EAASsE,EAAK4Z,kBAAkB8Z,EAAYyB,GAIlD,GAAmB,IAAfL,EAIF,OAHIG,EAAa,GACfv5B,EAAO4d,KAAK+K,GAEP,CAAC3oB,EAAQuG,GAGlB,GAAIgzB,GAAc,EAChB,MAAM,IAAIz8B,MACN2H,EAAa+0B,2DAGnB,IAAIvS,EAAQ,EAAGja,EAAM,EAEjB2sB,EAAqB,EACrBC,EAAWV,EAAWjS,GAE1B,OAAa,CAEX,IAAI4S,EAAY,EAChB,GAAI7sB,EAAMosB,EAAY,CAEpB,GADAS,EAAYX,EAAWlsB,GACnB4sB,IAAaC,EAAW,GACxB7sB,EACF,SAGF,GAAI4sB,GAAYC,EACd,MAAM,IAAI/8B,MAAM2H,EACXq1B,gEAIT,GAAIF,EAAW,GAAKA,GAAYL,EAC9B,MAAM,IAAIz8B,MACN2H,EAAas1B,yDACTH,EAAUL,IAKhBK,EAAWD,GACb35B,EAAO4d,KAAK+K,EAAcgR,EAAqBL,EAAQM,EAAWN,GAGpE,IAAK,IAAI15B,EAAIqnB,EAAOrnB,EAAIoN,IAAOpN,EAAG,CAChC,MAAMgG,EAAQwgB,EAAQxmB,GACtB,GAAIgG,EAAQ,GAAKA,GAASyzB,EAAU,GAClC,MAAM,IAAIv8B,MACN2H,EAAau1B,uDACTp6B,EAAGwmB,EAAQxmB,GAAIy5B,EAAU,KAEnC,IAAK,IAAIt2B,EAAI,EAAGA,EAAIu2B,EAAQv2B,IAC1B/C,EAAO45B,EAAWN,EAASv2B,IAAMkQ,EAAMrN,EAAQ0zB,EAASv2B,GAI5D,GAAIo2B,EACF,IAAK,IAAIp2B,EAAI,EAAGA,EAAIu2B,EAAQv2B,IAC1B/C,EAAO45B,EAAWN,EAASv2B,IAAMiK,EAAMia,EAQ3C,GAJAA,EAAQja,IACNA,EACF2sB,EAAqBC,EAAW,EAChCA,EAAWC,EACP7sB,EAAMosB,EACR,MASJ,OAJIO,EAAqBJ,GACvBv5B,EAAO4d,KAAK+K,EAAcgR,EAAqBL,EAAQC,EAAaD,GAG/D,CAACt5B,EAAQuG,EAClB,iEC3GIjE,EAAoB0vB,EAAuBtyB,EAC3Co2B,GACF,MAAMzD,EAAS31B,EAAO4F,EAAU0vB,EAAKvxB,OAErC,IAAK,IAAIb,EAAI,EAAGA,EAAIyyB,EAAOh3B,KAAMuE,IAAK,CACpC,MAAMukB,EAAMkO,EAAOjO,WAAWxkB,GAExBq6B,EAAmB,IAAIt6B,MAAMwkB,EAAIjoB,QACvC,IAAK,IAAI6G,EAAI,EAAGA,EAAIk3B,EAAO/9B,OAAQ6G,IACjCk3B,EAAOl3B,GAAKohB,EAAIphB,GAAKrD,EAAQqD,GAAK+yB,EAAM/yB,GAE1CsvB,EAAOx2B,IAAIm2B,EAAK/1B,OAAOg+B,MAAY9V,GAGrC,OAAOkO,CACT,4BpBsLI5qB,EAAoByyB,EAAwB/L,EAC5CC,EAAuBC,EAAiBC,EAAkBC,EAC1DC,GACF,OAAO,IAAIN,GACAC,EAAWC,EAAaC,EAASC,EAAUC,EAC3CC,GACN/oB,QAAQgC,EAAMyyB,EACrB,2BChKIjnB,EAAqBwd,EACrBD,GACF,MAAM2J,EAAYlnB,EAAM/W,OAGlBk+B,EAAuB,GAE7B,IAAI5O,EAAa,EACb6O,EAAgB,EACpB,MAAMjB,EAAuB,IAAIz5B,MAAMw6B,GACvC,IAAK,IAAIv6B,EAAI,EAAGA,EAAIu6B,IAAav6B,EAAG,CAClC,MAAM06B,EAAmBF,EAAOl+B,OAChCo0B,GAAMrd,EAAMrT,GAAI6wB,EAAWD,EAAW4J,GACtC,MAAMG,EAAWH,EAAOl+B,OAASo+B,EACjClB,EAAWx5B,GAAK26B,EAChB/O,GAAc+O,EACdF,EAAgBj7B,KAAKC,IAAIg7B,EAAeE,GAG1C,MAAMnU,EAAU9hB,EAAK4Z,kBAAkB,QAAsB,EAAbsN,GAC1Cpf,EAAuB,IAAIzM,MAAM6rB,GACjCjsB,EAA0B,CAAC46B,EAAWE,GAE5C,IAAIG,EAAI,EACR,IAAK,IAAI56B,EAAI,EAAGA,EAAIu6B,IAAav6B,EAC/B,IAAK,IAAImD,EAAI,EAAGA,EAAIq2B,EAAWx5B,KAAMmD,EAEnCqjB,EAAY,EAAJoU,GAAS56B,EACjBwmB,EAAY,EAAJoU,EAAQ,GAAKz3B,EACrBqJ,EAAOouB,GAAKJ,EAAOI,KACjBA,EAIN,MAAO,CAACpU,EAASha,EAAQ7M,EAC3B,sCoB/EI0T,EAAqBwnB,GACvB,MAAMz6B,EAASsE,EAAK4Z,kBAAkB,QAASjL,EAAM/W,QAErD,IAAK,IAAI0D,EAAI,EAAGA,EAAIqT,EAAM/W,SAAU0D,EAClCI,EAAOJ,GACH0E,EAAKo2B,cAAcznB,EAAMrT,IAAI+6B,OAAOF,GAAYG,qBAGtD,OAAO56B,CACT,+BCJIgyB,EACA6I,GACF,MAAMnX,EAAqB,IAAI/jB,MAAMqyB,EAAKrvB,MAC1C,IAAK,IAAI/C,EAAI,EAAGA,EAAI8jB,EAASxnB,OAAQ0D,IACnC8jB,EAAS9jB,GAAKoyB,EAAKzyB,MAAMK,GAAKi7B,EAAKj7B,GAErC,MAAMkkB,EAASpnB,EAAOgnB,EAAUsO,EAAKvxB,OACrC,IAAK,IAAIb,EAAI,EAAGA,EAAIkkB,EAAO1X,OAAOlQ,SAAU0D,EAAG,CAC7C,MAAMq6B,EAASnW,EAAOM,WAAWxkB,GAE3Bg0B,EAAwB,IAAIj0B,MAAMqyB,EAAKrvB,MAC7C,IAAK,IAAII,EAAI,EAAGA,EAAI6wB,EAAY13B,OAAQ6G,IACtC6wB,EAAY7wB,GAAKk3B,EAAOl3B,GAAKivB,EAAKzyB,MAAMwD,GAG1C,MAAMixB,EAAgBhC,EAAKzN,WAAWqP,GAEtC9P,EAAO1X,OAAOxM,GAAKoyB,EAAK5lB,OAAO4nB,GAEjC,OAAOlQ,CACT,oBnBmDI7iB,EAAeqzB,EAAkBC,EAAyBtD,EAC1D6J,GAGF,MAAMC,EAAUzG,EAAOA,EAAOp4B,OAAS,IAChC8+B,EAAO3/B,GAAQ,CAAC4F,EAAE/E,OAAS6+B,EAASA,GACrCE,EAAc32B,EAAK+N,uBAAuBkiB,EAAQyG,EAAQ/J,GAC1DiK,EAAiB52B,EAAK+N,uBAAuB,QAAS2oB,EAAQ/J,GAEpE,IAAK,IAAIjd,EAAI,EAAGA,EAAIgnB,EAAOhnB,IAAK,CAC9B,MAAMnD,EAASmD,EAAI3Y,EACbyS,EAAO7M,EAAE0sB,SAAS9c,EAAQA,EAASxV,GAEzC,IAAI8/B,EAAoB,IAAIx7B,MAAMmO,EAAK5R,QACvC4R,EAAKrQ,SACD,CAACugB,EAAepY,IAAkBu1B,EAAUv1B,GAAS,CAACoY,QAAOpY,WAE7DqrB,EAAIkK,EAAUj/B,SAChB60B,GAAOoK,EAAWlK,GAClBkK,EAAYA,EAAU75B,MAAM,EAAG2vB,IAG7B6J,GACFK,EAAUC,KAAKvK,IAGjB,MAAMwK,EAAYrnB,EAAIid,EAChBqK,EAAWL,EAAYtN,SAAS0N,EAAWA,EAAYpK,GACvDsK,EAAcL,EAAevN,SAAS0N,EAAWA,EAAYpK,GACnE,IAAK,IAAIrxB,EAAI,EAAGA,EAAIqxB,EAAGrxB,IACrB07B,EAAS17B,GAAKu7B,EAAUv7B,GAAGoe,MAC3Bud,EAAY37B,GAAKu7B,EAAUv7B,GAAGgG,MAKlC,MAAMW,EAAc+tB,EAAOhzB,QAG3B,OAFAiF,EAAYA,EAAYrK,OAAS,GAAK+0B,EAE/B,CACLv0B,EAAO6J,EAA4BguB,EAAQ0G,GAC3Cv+B,EAAO6J,EAA4B,QAAS20B,GAEhD,yBoBtHIzJ,EAAmB6C,EAAkB7zB,EAAiB+6B,EACtD9X,GACF,MAAM+X,EAAQnH,EAAOp4B,OACfwiB,EAAQpa,EAAK2M,cAAcqjB,GAC3B4B,EAAW5xB,EAAK0B,eAAesuB,GAC/BoH,EAAap3B,EAAK0B,eAAe0d,GAEjCI,EAASxf,EAAK+N,uBAChB5R,EAA0B6D,EAAK2M,cAAcyS,IAEjD,IAAK,IAAI9jB,EAAI,EAAGA,EAAI8e,IAAS9e,EAAG,CAC9B,MAAMukB,EAAM7f,EAAK8f,WAAWxkB,EAAG67B,EAAOvF,GAGhC+D,EAAmB,IAAIt6B,MAAMwkB,EAAIjoB,QACvC,IAAK,IAAI0D,EAAI,EAAGA,EAAIq6B,EAAO/9B,OAAQ0D,IACjCq6B,EAAOr6B,GAAKukB,EAAIqX,EAAK57B,IAIvBkkB,EADiBxf,EAAKigB,WAAW0V,EAAQwB,EAAOC,IAC7BjK,EAAM7xB,GAE3B,OAAOkkB,CACT,sBCxBI1X,EAAuBuvB,EAAcp8B,EAAiBkB,GAMxD,MAAMm7B,EAAQt3B,EAAKu3B,eAAeF,EAAMp8B,GAAO,GAyDzCmkB,EAAW,CAAC,EAAGnkB,EAAM,GAAI,GAC/B,IAAK,IAAIK,EAAI,EAAGA,EAAIg8B,EAAOh8B,IACzB8jB,EAAS,IAAMnkB,EAAMK,GAEvB8jB,EAAS,GAAKnkB,EAAMq8B,GACpB,IAAK,IAAIh8B,EAAIg8B,EAAQ,EAAGh8B,EAAIL,EAAMrD,OAAQ0D,IACxC8jB,EAAS,IAAMnkB,EAAMK,GAKvB,MAAMk8B,EAA0C,GAG1C1V,EAAU,IAAIze,WAAWpI,EAAMq8B,IAE/BG,EAAc,IAAIC,EAAatY,EAAUjjB,EAAO2L,GAGhD6vB,EAA0B,GAC1BC,EAA6B,IAAhBxY,EAAS,IAA4B,IAAhBA,EAAS,GACjD,IAAK,IAAI9jB,EAAI,EAAGA,EAAIL,EAAMq8B,GAAQh8B,IAAK,CAErC,IAAIu8B,EACJ,GAAID,EAEFC,EAAU/vB,EAAOxM,GAAGw8B,eACf,CACL,MAAMC,EAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI5Y,EAAS,GAAI4Y,IAC/B,IAAK,IAAI/M,EAAI,EAAGA,EAAI7L,EAAS,GAAI6L,IAC/B8M,EAAW//B,KAAKy/B,EAAY9/B,IAAIqgC,EAAG18B,EAAG2vB,IAG1C4M,EAAUE,EAAWz7B,KAAK,KAI5B,QAAgC8M,IAA5BouB,EAAeK,GACjB/V,EAAQxmB,GAAKk8B,EAAeK,OACvB,CACL,MAAMI,EAAcC,OAAOC,KAAKX,GAAgB5/B,OAChD4/B,EAAeK,GAAWI,EAC1BnW,EAAQxmB,GAAK28B,EACbN,EAAc3/B,KAAKsD,IAOvB,MAAM88B,EAAiBhZ,EAASpiB,QAChCo7B,EAAe,GAAKF,OAAOC,KAAKX,GAAgB5/B,OAChD,MAAMygC,EAAe,IAAIX,EAAaU,EAAgBj8B,GACtDw7B,EAAcx+B,SAAQ,CAACm/B,EAAoBh9B,KACzC,IAAK,IAAI08B,EAAI,EAAGA,EAAI5Y,EAAS,GAAI4Y,IAC/B,IAAK,IAAI/M,EAAI,EAAGA,EAAI7L,EAAS,GAAI6L,IAC/BoN,EAAa9gC,IAAIkgC,EAAY9/B,IAAIqgC,EAAGM,EAAoBrN,GAAI+M,EAAG18B,EAAG2vB,MAOxE,MAAMhpB,EAAchH,EAAM+B,QAG1B,OAFAiF,EAAYq1B,GAASc,EAAe,GAE7B,CACLjF,aAAckF,EAAavwB,OAC3B7F,cACA6f,UAEJ,GC/HA,MACE1B,QAASmY,GACTC,SAAUC,GACVlY,SAAUmY,GACVC,WAAYC,GACZnY,UAAWoY,GACXnY,QAASoY,GACTlY,UAAWmY,GACXjY,UAAWkY,GACXC,aAAcC,GACdC,aAAcC,GACdnY,iBAAkBoY,GAClBrY,YAAasY,GACbnY,cAAeoY,GACfrY,SAAUsY,GACVpY,QAASqY,GACTC,QAASC,GACTrY,YAAasY,GACbnY,YAAaoY,GACblY,aAAcmY,GACdC,QAASC,GACTpY,aAAcqY,GACdC,SAAUC,GACVC,UAAWC,GACX9Q,UAAW+Q,GACXC,YAAaC,GACbC,cAAeC,GACfC,UAAWC,GACXC,iBAAkBC,GAClBC,iBAAkBC,GAClB1O,QAAS2O,GACTC,SAAUC,GACVC,SAAUC,GACVC,cAAeC,GACfC,WAAYC,IACVC,GCtCSC,GAA0B,CACrC5hB,WAAY6hB,EACZ3hB,YAAa,SACbC,WALEwD,GAAgB,CAACC,OAAQ9J,GAAYE,IAAK6J,cAAe8c,MCGhDmB,GAA0B,CACrC9hB,WAAY+hB,EACZ7hB,YAAa,SACbC,WAN2B+D,GACzB,CAACN,OAAQ1M,GAAayB,IAAKkL,cAAeme,GAAQ7d,iBAAiB,WCJ1D8d,GAUX1lC,YAAYsY,GAJZpY,mBAAgB,EAChBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAGLA,KAAKyL,YAAc2M,EAAO,GAC1BpY,KAAKkG,cAAgBkS,EAAO1T,KAAI,CAACuC,EAAGnC,IAAM,IAAIA,MAC9C9E,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACvF,KAAKsgB,cAAe,EAAG,IAC5BtgB,KAAKqY,UAAY,OAGnBrS,cACE,MAAMy/B,EAAqB,GAE3BzlC,KAAKkG,cAAcvD,SAAQ+iC,IACzBD,EAASjkC,KAAK,QAAQkkC,UAAiBA,2BAAkC,IAG3E,MAAMC,EAAY3lC,KAAKkG,cACAxB,KAAIghC,GACI,IAAIA,MAEZ5/B,KAAK,OAc5B,MAZiB,WACbqc,GAAK,2CACiBniB,KAAKsgB,kEACCtgB,KAAKsgB,wIAG3BmlB,EAAS3/B,KAAK,0DACc6/B,8CCpBnC,MAAMC,GAA2B,CACtCriB,WAAYsiB,EACZpiB,YAAa,SACbC,oBAnBmBX,GAEnB,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,EAEpB+iB,EAAU58B,EAChB,GAAuB,IAAnB48B,EAAQ1kC,OACV,OAAOolB,GAAS,CAACtd,OAAQ,CAAC/C,EAAG2/B,EAAQ,IAAK9iB,YAG5C,MAAMrd,EACFmgC,EAAQphC,KAAIwP,GAAKA,EAAEvO,QAAOi5B,QAAO,CAACmH,EAAIC,IAAO9d,EAAW6d,EAAIC,KAC1D5tB,EAAS0tB,EAAQphC,KAAIwP,GAAKA,EAAEzP,QAC5BO,EAAU,IAAIwgC,GAAkBptB,GACtC,OAAO4K,EAAQ5L,iBAAiBpS,EAAS8gC,EAASngC,EACpD,SCjBasgC,GAcXnmC,YAAYq9B,EAAsB0D,EAAcqF,GAThDlmC,mBAA0C,CAAC,GAAI,EAAG,GAClDA,mBAAgB,CAAC,KACjBA,cAAW,uBAIXA,WAAO,EAIL,MAAMmmC,EAAO,CAACtF,GAEd7gC,KAAK4b,GAAoB,QAAfsqB,EAAuB,IAAM,IAGvC,MAAOz6B,EAAaouB,GAChBlwB,EAAamwB,0BAA0BqD,EAAYgJ,GAEvDnmC,KAAKyL,YAAqC,IAAvBA,EAAYrK,OAAe,CAAC,GAAKqK,EACpDzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAM1CjC,EAAK2M,cAAc0jB,GAAe,IAClCrwB,EAAK2M,cAAc1K,GAAe,KACpCzL,KAAKyI,KAAO,QACZzI,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,iBAEhDvF,KAAKyI,KAAO,SAGZzI,KAAKqL,SACDG,GAAgBxL,KAAKyH,eAAgBzH,KAAKyL,YAAa,CAAC,EAAG,EAAG,KAGpEzL,KAAKm9B,WAAaA,EAClBn9B,KAAKqY,UAAY,aAAarY,KAAK4b,MAAM5b,KAAKyI,OAGhDzC,cACE,MAAMogC,EAAuB,IACI,IAA3BpmC,KAAKm9B,WAAW/7B,OACX,kBAEA,mBAAmB0I,GAAa9J,KAAKm9B,WAAW/7B,OAAS,KAI9DilC,EAAoB,KACxB,IAAIl+B,EAAU,GACd,GAAgC,IAA5BnI,KAAKyL,YAAYrK,OACY,IAA3BpB,KAAKm9B,WAAW/7B,SAClB+G,GAAW,sBAGb,IAAK,IAAIrD,EAAI,EAAGA,EAAI9E,KAAKyL,YAAYrK,OAAQ0D,IAC3CqD,GAAW,gBAAgB2B,GAAahF,MAG5C,OAAOqD,CAAO,EAGhB,GAAkB,WAAdnI,KAAKyI,KAAmB,CAoD1B,MA/CiB,yGAJW,oDACezI,KAAKuF,cAAc,uDACpBvF,KAAKuF,cAAc,yBAS3D4c,GAAK,kGAEgBikB,oUAOIC,yDACcrmC,KAAK4b,glBAexB5b,KAAK4b,icAmC3B,MAlBiB,WACfuG,GAAK,2KAIoBkkB,yCACFD,8FAEIC,sCACPrmC,KAAK4b,uMCtIpB0qB,GASXxmC,YAAY8hB,EAAkB2kB,GAR9BvmC,mBAAgB,CAAC,KAMjBA,mBAA0C,CAAC,GAAI,GAAI,GAGjD,MAAMyL,EAAwB,IAAI5G,MAAM+c,EAAOxgB,QAC/C,IAAK,IAAI0D,EAAI,EAAGA,EAAI2G,EAAYrK,OAAQ0D,IACtC2G,EAAY3G,GAAK8c,EAAO2kB,EAAOzhC,IAEjC9E,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB,CAACtB,EAAG,CAAC,GAAIuB,EAAG,CAAC,IACnC1H,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAAe,CAAC,EAAG,EAAG,IAEtEvF,KAAKqY,UAAY,kBAGnBrS,cAyBE,MAxBiB,4BACIhG,KAAKuF,cAAc,qDACGvF,KAAKuF,cAAc,GAAK,OAC/DvF,KAAKuF,cAAc,q2BC1BdihC,GAWX1mC,YAAY8hB,EAAkB2kB,GAV9BvmC,mBAAgB,CAAC,KAKjBA,mBAAgB,EAChBA,mBAA0C,CAAC,GAAI,EAAG,GAElDA,WAAO,EAGL,MAAMyL,EAAwB,IAAI5G,MAAM+c,EAAOxgB,QAC/C,IAAK,IAAI0D,EAAI,EAAGA,EAAI2G,EAAYrK,OAAQ0D,IACtC2G,EAAY3G,GAAK8c,EAAO2kB,EAAOzhC,IAEjC9E,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACvF,KAAKsgB,cAAe,EAAG,IAE5BtgB,KAAKumC,OAASA,EACdvmC,KAAKqY,UAAY,aAAakuB,IAGhCvgC,cACE,MAAML,EAAQU,GAAkBrG,KAAKyL,YAAYrK,QAC3CqlC,EAmBV,SAA2BF,GACzB,MAAM1+B,EAAO0+B,EAAOnlC,OACpB,GAAIyG,EAAO,EACT,MAAM7F,MAAM,sBAAsB6F,0BAEpC,MAAM6+B,EAAiB,IAAI7hC,MAAMgD,GACjC,IAAK,IAAI/C,EAAI,EAAGA,EAAIyhC,EAAOnlC,OAAQ0D,IACjC4hC,EAAeH,EAAOzhC,IAAM,SAASgF,GAAahF,KAGpD,OAAO4hC,EAAe5gC,MACxB,CA9BqB6gC,CAAkB3mC,KAAKumC,QAexC,MAbiB,WACbpkB,GAAK,0CACgBniB,KAAKsgB,kEACEtgB,KAAKsgB,sLAIjCtgB,KAAKyL,YAAYrK,2BACTuE,KAAS8gC,2ECjCTxlB,GAAU8B,GAKxB,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNw3B,KAACA,GAAQzd,EACToE,EAAgBrE,EAEhB2d,EAAQx6B,EAAE1B,MAAMrD,OAChBwnB,EAAqB,IAAI/jB,MAAM87B,GACrC,IAAK,IAAI77B,EAAI,EAAGA,EAAI8jB,EAASxnB,OAAQ0D,IACnC8jB,EAAS9jB,GAAKqB,EAAE1B,MAAMi8B,EAAK57B,IAE7B,GAAIke,EAAQ3I,mBAAmB,CAAClU,IAAK,CACnC,MACMmL,EADQ+V,EAAc5Y,UAAUtN,IAAIgF,EAAE6J,QACvBsB,OACfkW,EAAYof,GAAat1B,EAAQnL,EAAE1B,MAAO0B,EAAER,MAAO+6B,EAAM9X,GAC/D,OAAO5F,EAAQnP,eAAe+U,EAAUziB,EAAER,MAAO6hB,GAEnD,GAAuB,IAAnBrhB,EAAE1B,MAAMrD,QAAgBoI,EAAKC,YAAYi3B,EAAM,CAAC,EAAG,IAAK,CAC1D,MAAM17B,EAAU,IAAIshC,GAAuBngC,EAAE1B,MAAOi8B,GACpD,OAAOrZ,EAAcjQ,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,OAExD,MAAMX,EAAU,IAAIwhC,GAAiBrgC,EAAE1B,MAAOi8B,GAC9C,OAAOrZ,EAAcjQ,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MACxD,CAEO,MAAMkhC,GAAgC,CAC3CtjB,WAAYujB,EACZrjB,YAAa,SACbC,WAAYzC,ICRP,MAAM8lB,GAA6B,CACxCxjB,WAAYyjB,EACZvjB,YAAa,SACbC,oBA3BEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN23B,KAACA,GAAQ5d,EAEf,IAAIkjB,EAAO38B,EAAKu3B,eAAeF,EAAM16B,EAAE1B,OACvC,MAAMwiC,EAAet9B,EAAau9B,mBAAmBf,EAAMhgC,EAAE1B,MAAMrD,QACnE,IAAI+lC,EAAKhhC,EACT,MAAMihC,EAA0B,GACZ,MAAhBH,IACFE,EAAKlmB,GAAU,CAAC/X,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAACyd,KAAMuG,KACpDG,EAAwB5lC,KAAK2lC,GAC7BhB,EAAOx8B,EAAa09B,iBAAiBlB,EAAK/kC,OAAQ+lC,EAAG1iC,MAAMrD,SAG7DuI,EAAa29B,2BAA2B,SAAU,CAACnB,EAAK,IAAKgB,EAAG1iC,MAAMrD,QACtE,MAAM4D,EAAU,IAAIihC,GAAiBkB,EAAG1iC,MAAO0hC,EAAK,GAAI,OAClD9iB,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAACyN,OAAOmtB,qBAC/ChiB,EAAMvC,EAAQ5L,iBAAiBpS,EAAS,CAACmiC,GAAK,QAAS9jB,GAE7D,OADA+jB,EAAwBzkC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UACpDuV,CACT,GCEO,MAAMiiB,GAA6B,CACxCjkB,WAAYkkB,EACZhkB,YAAa,SACbC,oBA3BEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN23B,KAACA,GAAQ5d,EAEf,IAAIkjB,EAAO38B,EAAKu3B,eAAeF,EAAM16B,EAAE1B,OACvC,MAAMwiC,EAAet9B,EAAau9B,mBAAmBf,EAAMhgC,EAAE1B,MAAMrD,QACnE,IAAI+lC,EAAKhhC,EACT,MAAMihC,EAA0B,GACZ,MAAhBH,IACFE,EAAKlmB,GAAU,CAAC/X,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAACyd,KAAMuG,KACpDG,EAAwB5lC,KAAK2lC,GAC7BhB,EAAOx8B,EAAa09B,iBAAiBlB,EAAK/kC,OAAQ+lC,EAAG1iC,MAAMrD,SAG7DuI,EAAa29B,2BAA2B,SAAU,CAACnB,EAAK,IAAKgB,EAAG1iC,MAAMrD,QACtE,MAAM4D,EAAU,IAAIihC,GAAiBkB,EAAG1iC,MAAO0hC,EAAK,GAAI,OAClD9iB,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAACyN,OAAOstB,qBAC/CniB,EAAMvC,EAAQ5L,iBAAiBpS,EAAS,CAACmiC,GAAK,QAAS9jB,GAE7D,OADA+jB,EAAwBzkC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UACpDuV,CACT,GCxBaoiB,GAA4B,CACvCpkB,WAAYqkB,EACZnkB,YAAa,SACbC,WALmB+D,GAAiB,CAACN,OAAQ1M,GAAa0B,eCA/C0rB,GAcX/nC,YAAYgoC,EAAmCC,GAT/C/nC,mBAAgB,CAAC,KACjBA,cACI,2GAGJA,mBAA0C,CAAC,IAAK,EAAG,GAEnDA,WAAO,EAGLA,KAAKyL,YAAcq8B,EAAStgC,SAE5BxH,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAE9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKqY,UAAY,UAAU0vB,IAC3B/nC,KAAK+nC,SAAWA,EAGlB/hC,cACE,IAAIgiC,EAAgB,yCACE,QAAlBhoC,KAAK+nC,WACPC,EAAgB,2DAGlB,IAAIC,EAAc,cACI,QAAlBjoC,KAAK+nC,WACPE,EAAc,uBAsChB,MAnCiB,WACb9lB,GAAK,oUASa,QAAlBniB,KAAK+nC,SAAqB,MAAQ,klBAiB1BC,sEAIoBC,uCCpEvBC,GAUXpoC,YAAYgoC,GALZ9nC,mBAAgB,CAAC,KACjBA,cAAW,sBACXA,mBAA0C,CAAC,IAAK,EAAG,GACnDA,WAAO,EAGLA,KAAKyL,YAAcq8B,EAAStgC,SAC5BxH,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAE9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKqY,UAAY,8BAGnBrS,cAiBE,MAhBiB,WACbmc,GAAK,ubCtBAgmB,GAYXroC,YACIsoC,EACAlC,GATJlmC,mBAA0C,CAAC,GAAI,EAAG,GAClDA,mBAAgB,CAAC,KACjBA,cAAW,oBAGXA,WAAO,EAKLA,KAAKm9B,WAAa,CAACiL,EAAW/I,UAAW+I,EAAWC,QACpD,MAAO58B,GACH9B,EAAamwB,0BAA0B95B,KAAKm9B,WAAY,CAAC,IAC7Dn9B,KAAKyL,YAAqC,IAAvBA,EAAYrK,OAAe,CAAC,GAAKqK,EAEpDzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAG9CzL,KAAKqL,SACDG,GAAgBxL,KAAKyH,eAAgBzH,KAAKyL,YAAa,CAAC,EAAG,EAAG,IAElEzL,KAAKkmC,WAAaA,EAClBlmC,KAAKqY,UAAY,UAAU6tB,IAG7BlgC,cACE,IAAIsiC,EAAW,GACXC,EAAY,MACQ,QAApBvoC,KAAKkmC,YAA4C,QAApBlmC,KAAKkmC,YACpCoC,EAAW,+HAIa,QAApBtoC,KAAKkmC,WAAuB,IAAM,yDAEtCqC,EAAY,kBACiB,QAApBvoC,KAAKkmC,YAA4C,SAApBlmC,KAAKkmC,WAC3CoC,EAAW,uCACkB,SAApBtoC,KAAKkmC,aACdoC,EAAW,uCACXC,EAAY,OAGd,MAAMC,EAAoC,SAApBxoC,KAAKkmC,WAEvB,uEACA,4CAoDJ,MA9CiB,4GAJW,sDACmBlmC,KAAKuF,cAAc,yJAYlC,IAA5BvF,KAAKyL,YAAYrK,OACb,eACA,wFAGH+gB,GAAK,gJAGaomB,kTAMdD,2bAWCA,gOAQFE,0CC5FI5J,GACZz4B,EAAe06B,EAAuB4H,EACtCvC,EAAyBljB,GAC3B,MAAM2d,EAAQx6B,EAAE1B,MAAMrD,OAChBsnC,EAAY,GAEZC,EAAWn/B,EAAKu3B,eAAeF,EAAM16B,EAAE1B,OAC7C,IAAI0hC,EAAOwC,EACX,MAAM1B,EAAet9B,EAAau9B,mBAAmBf,EAAMxF,GAE3D,IAAIxoB,EAAQhS,EACQ,MAAhB8gC,IACF9uB,EAAQ8I,GAAU,CAAC/X,OAAQ,CAAC/C,KAAI8c,MAAO,CAACyd,KAAMuG,GAAejkB,YAC7DmjB,EAAOx8B,EAAa09B,iBAAiBlB,EAAK/kC,OAAQu/B,GAClD+H,EAAUlnC,KAAK2W,IAGjBxO,EAAa29B,2BAA2BpB,EAAYC,EAAMxF,GAE1D,MAAOiI,EAAgB/O,GACnBlwB,EAAamwB,0BAA0B3hB,EAAM1T,MAAO0hC,GACxD,IAMIt9B,EANAggC,EAAcD,EAOlB,GANIH,IAEFI,EAAcl/B,EAAam/B,qBAAqBF,EAAgBD,IAI9C,QAAfzC,GAAuC,SAAfA,IACzBljB,EAAQ3I,mBAAmB,CAAClC,IAiBzB,CACL,MAAMkwB,EAAS7+B,EAAK2M,cAAc0jB,GAI5BuO,EAAa,CAACW,WAAYV,EAAQA,SAAQhJ,UAHlC71B,EAAK2M,cAAcgC,EAAM1T,OACb4jC,EAEiCW,QAAS,GAC9DrjC,EAAuB,SAAfugC,EAAwB,UAAY+C,EAAW9iC,EAAER,OACzD0d,EAAc,CAClB,CAAC5a,KAAM,QAASkE,KAAM,CAAC07B,KAEnBrjC,EAAU,IAAImjC,GAAcC,EAAYlC,GACxCgD,EACFlmB,EAAQ5L,iBAAiBpS,EAAS,CAACmT,GAAQxS,EAAO0d,GACtDqlB,EAAUlnC,KAAK0nC,GAEfrgC,EAAM8a,GAAQ,CAACza,OAAQ,CAAC/C,EAAG+iC,GAAUjmB,MAAO,CAACxe,MAAOokC,GAAc7lB,gBAhC3B,CACvC,MAAM2T,EAAQ3T,EAAQvU,UAAUtN,IAAIgX,EAAMnI,QAAQsB,OAClD,OAAQ40B,GACN,IAAK,MACH,MAAM1e,EAAY2b,GACdxM,EAAOntB,EAAK2M,cAAc0jB,GAAcgP,EAAa1iC,EAAER,OAC3DkD,EAAMma,EAAQnP,eAAeg1B,EAAa1iC,EAAER,MAAO6hB,GACnD,MACF,IAAK,OACH,MAAMwP,QAACA,EAAOxvB,SAAEA,EAAQuyB,SAAEA,GACtB4J,GAAYxrB,EAAM1T,MAAO0T,EAAMxS,MAAOgxB,EAAOwP,GACjDt9B,EAAMma,EAAQnP,eAAerM,EAAUuyB,EAAU/C,GACjD,MACF,QACE,MAAM,IAAIh1B,MACN,GAAGkkC,+CAsBb,OAFAwC,EAAU/lC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UAEtCnH,CACT,UCzEgBtE,GACZwe,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNigC,iBAACA,EAAgBV,SAAEA,GAAYxlB,EAErC,OAAO2b,GAAOz4B,EAAGgjC,EAAkBV,EAAU,MAAOzlB,EACtD,CAEO,MAAMomB,GAA0B,CACrC7lB,WAAY8lB,EACZ5lB,YAAa,SACbC,WAAYnf,aCbE+kC,GACZvmB,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNu/B,SAACA,EAAQ5H,KAAEA,GAAQ5d,EAEzB,OAAO2b,GAAOz4B,EAAG06B,EAAM4H,EAAU,OAAQzlB,EAC3C,CAEO,MAAMumB,GAA2B,CACtChmB,WAAYimB,EACZ/lB,YAAa,SACbC,WAAY4lB,aCPEG,GACZtjC,EAAe2hC,EAAmCC,EAClD/kB,GACF,GAA6B,IAAzB8kB,EAAS4B,aAA+C,IAA1B5B,EAAS6B,cACvCngC,EAAKC,YAAYq+B,EAAS8B,QAAS9B,EAAStgC,UAC9C,OAAOgf,GAAS,CAACtd,OAAQ,CAAC/C,KAAI6c,YAGhC,GAAI8kB,EAAS4B,cAAgB5B,EAAS+B,SAClC/B,EAAS6B,eAAiB7B,EAASgC,UAAmC,IAAvBhC,EAASzI,WAC9B,UAA1ByI,EAASiC,QAAQthC,KAAkB,CACrC,MAAMrH,EAAS+E,EAAE1B,MAAMrD,OACjB4oC,EAAWrmB,GAAQ,CACvBza,OAAQ,CAAC/C,KACT6c,UACAC,MAAO,CACLxe,MAAO,CACL0B,EAAE1B,MAAMrD,EAAS,GAAK+E,EAAE1B,MAAMrD,EAAS,GACvC+E,EAAE1B,MAAMrD,EAAS,OAIvB,IAAI6oC,EACa,QAAblC,EACFkC,EAAUX,GACN,CAACpgC,OAAQ,CAAC/C,EAAG6jC,GAAWhnB,UAASC,MAAO,CAAC4d,KAAM,EAAG4H,UAAU,MAEhEj/B,EAAK4B,OAAoB,QAAb28B,GAAoB,IAAM,qBAAqBA,MAC3DkC,EAAU1lC,GAAI,CACZ2E,OAAQ,CAAC/C,EAAG6jC,GACZhnB,UACAC,MAAO,CAACkmB,iBAAkB,EAAGV,UAAU,MAI3C,MAAMzf,EAASrF,GACX,CAACza,OAAQ,CAAC/C,EAAG8jC,GAAUjnB,UAASC,MAAO,CAACxe,MAAOqjC,EAAStgC,YAG5D,OAFAwb,EAAQjT,YAAYi6B,EAASh6B,QAC7BgT,EAAQjT,YAAYk6B,EAAQj6B,QACrBgZ,EAGT,IAAIhkB,EACJ,MAAMkD,EACF,CAAC,CAACO,KAAM,QAASkE,KAAM,CAACm7B,EAASoC,aAAcpC,EAASqC,eAsB5D,OArB8B,IAA1BrC,EAAS6B,cAA+C,IAAzB7B,EAAS4B,YAC1C1kC,EAAU,IAAIkjC,GAAmCJ,IAEhC,QAAbC,EACF/iC,EAAU,IAAI6iC,GAAcC,EAAU,QAEtCt+B,EAAK4B,OAAoB,QAAb28B,GAAoB,IAAM,qBAAqBA,MAC3D/iC,EAAU,IAAI6iC,GAAcC,EAAU,QAGxC5/B,EAAW1G,KACP,CAACiH,KAAM,QAASkE,KAAM,CAACm7B,EAASiC,QAAQK,IAAKtC,EAASiC,QAAQ3T,OAAQ,CACpE3tB,KAAM,QACNkE,KAAM,CAACm7B,EAASuC,eAAgBvC,EAASwC,gBAE3C,CAAC7hC,KAAM,QAASkE,KAAM,CAACm7B,EAASgC,SAAUhC,EAAS+B,UAAW,CAC5DphC,KAAM,QACNkE,KAAM,CAACm7B,EAASyC,sBAAuBzC,EAAS0C,yBAIjDxnB,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAOuC,EACzD,CC5DO,MAAMuiC,GAA8B,CACzClnB,WAAYmnB,EACZjnB,YAAa,SACbC,oBAhBEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNyhC,WAACA,EAAU/lC,QAAEA,EAAOgmC,IAAEA,EAAGC,gBAAEA,GAAmB5nB,EAMpD,OAAOwmB,GAAStjC,EAJCwD,EAAamhC,kBAC1B3kC,EAAE1B,MAA2CkmC,EAAY/lC,EAF3C,EAGHgmC,EAAKC,GAES,MAAO7nB,EACtC,GCCO,MAAM+nB,GAAkC,CAC7CxnB,WAAYynB,EACZvnB,YAAa,SACbC,oBAf0BX,GAK1B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BoB,EAACA,EAACjL,EAAEA,GAAKhQ,GACTiD,WAACA,EAAU2T,WAAEA,GAAcmD,EAEjC,OAAOiB,GAAgB,CAACC,IAAGjL,IAAG/M,aAAY2T,aAAYkD,WACxD,SCZaioB,GAaXnrC,YAAYqsB,EAAiB+e,GAZ7BlrC,mBAAgB,CAAC,UAOjBA,mBAAgB,EAChBA,mBAA0C,CAAC,GAAI,EAAG,GAElDA,WAAO,EAGLA,KAAKyL,YAAcy/B,EACnBlrC,KAAK6H,KAAOqjC,EAAS9pC,OACrBpB,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACvF,KAAKsgB,cAAe,EAAG,IAE5BtgB,KAAKmsB,MAAQA,EACbnsB,KAAK2G,SAAW,WAAWN,GAAkB8lB,EAAM/qB,YACnDpB,KAAKqY,UAAY,QAGnBrS,cACE,MAAML,EAAQU,GAAkBrG,KAAK6H,MAC/BsjC,EA6BV,SAAmBtjC,GACjB,GAAa,IAATA,EACF,MAAO,YACF,GAAIA,GAAQ,EACjB,OAAOsD,GAAO3E,MAAM,EAAGqB,GAAMnD,KAAI0mC,GAAS,aAAaA,MAAStlC,KAAK,KAErE,MAAM9D,MAAM,oBAAoB6F,yBAEpC,CArCyBwjC,CAAUrrC,KAAK6H,MACpC,IAAIyjC,EAEFA,EADwB,IAAtBtrC,KAAKmsB,MAAM/qB,OACFpB,KAAKyL,YAAY/G,KAAI,CAACuC,EAAGnC,IAC3B,yCAGE9E,KAAKyL,YAAY/G,KAAI,CAACuC,EAAGnC,IAC3B,aAAaqG,GAAOrG,uBACvBgF,GAAahF,eAAeqG,GAAOrG,QAc3C,MAViB,WACbqd,GAAK,+EAEexc,oEAEhB2lC,EAASxlC,KAAK,sDACoBqlC,kCAQ9C,MAAMhgC,GAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,cCpDzB3E,GACZuc,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN8xB,MAACA,EAAKz6B,KAAEA,GAAQ0iB,GAEfsoB,EAAQC,GAAStQ,EAAWuQ,iBAAiBtlC,EAAG60B,EAAOz6B,GAG9D,GAFA26B,EAAWwQ,kBAAkBvlC,EAAGolC,EAAQC,GAEpCxoB,EAAQ3I,mBAAmB,CAAClU,KAAmB,WAAZA,EAAER,MAAoB,CAC3D,MAAMgmC,EAAc3oB,EAAQvU,UAAUtN,IAAIgF,EAAE6J,QACtCwX,EAAY4c,GACduH,EAAYr6B,OAAsBi6B,EAAQC,EAAOrlC,EAAE1B,MAAO0B,EAAER,OAChE,OAAOqd,EAAQnP,eAAe23B,EAAOrlC,EAAER,MAAO6hB,GAGhD,GAAkC,IAA9Bhe,EAAK2M,cAAcq1B,GACrB,OAAOxoB,EAAQnP,eAAe23B,EAAOrlC,EAAER,MAAO,IAIhD,MAAMX,EAAU,IAAIimC,GAAaM,EAAQC,GACnCnoB,EAAc,CAAC,CAAC5a,KAAM,QAASkE,KAAM4+B,IAC3C,OAAOvoB,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAO0d,EACzD,CAEO,MAAMuoB,GAA4B,CACvCroB,WAAYsoB,EACZpoB,YAAa,SACbC,WAAYld,ICsBDslC,GAAqC,CAChDvoB,WAAYwoB,EACZtoB,YAAa,SACbC,WArD6BX,IAK7B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN8iC,WAACA,EAAUC,MAAEA,GAAShpB,EAE5BzZ,EAAK4B,OACDjF,EAAE1B,MAAMrD,QAAU,GAClB,IAAM,0EAEV,MAAM44B,EAAOgS,EAAWpN,QAAO,CAACza,EAAGjL,IAAMiL,EAAIjL,IAEvCgzB,EAAWviC,EAAawiC,YAAYhmC,EAAE1B,MAAOunC,EAAYhS,GACzDoS,EAAWziC,EAAa0iC,YAAYH,EAAS9qC,OAAQ4qC,EAAW5qC,QAChEkrC,EACF3iC,EAAa4iC,oBAAoBpmC,EAAE1B,MAAOunC,EAAYhS,GACpDwS,EACF7iC,EAAa8iC,oBAAoBR,EAAOD,EAAW5qC,QACjDo3B,EACF7uB,EAAa+iC,aAAaJ,EAAkBL,EAAOD,EAAW5qC,QAE5DsnC,EAAY,GAEZiE,EACFhpB,GAAQ,CAACza,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAACxe,MAAOynC,KAC5CU,EAAyB3rB,GAC3B,CAAC/X,OAAQ,CAAC/C,EAAGwmC,GAAuB3pB,UAASC,MAAO,CAACyd,KAAM0L,KACzDS,EAAwBlpB,GAAQ,CACpCza,OAAQ,CAAC/C,EAAGymC,GACZ5pB,UACAC,MAAO,CAACxe,MAAO6nC,KAEXQ,EAAStmC,GAAM,CACnB0C,OAAQ,CAAC/C,EAAG0mC,GACZ7pB,UACAC,MAAO,CAAC+X,MAAOwR,EAAkBjsC,KAAMi4B,KASzC,OANAkQ,EAAUlnC,KAAKmrC,GACfjE,EAAUlnC,KAAKorC,GACflE,EAAUlnC,KAAKqrC,GAEfnE,EAAU/lC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UAEtC88B,CAAM,GCjDFC,GAAWtlB,GAAiB,CACvCN,OAAQ1M,GAAamC,UACrBjX,MAAO,OACPyhB,cAAe4lB,KAGJC,GAA+B,CAC1C1pB,WAAY2pB,EACZzpB,YAAa,SACbC,WAAYqpB,aCVEv8B,GAAKuS,GAEnB,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpB5K,MAACA,GAASjP,EAGhB,OAAOsd,GAAS,CAACtd,OAAQ,CAAC/C,EAFR6c,EAAQvU,UAAUtN,IAAIgX,EAAMnI,QAEPO,mBAAmBC,MAAOwS,WACnE,CAEO,MAAMmqB,GAA2B,CACtC5pB,WAAY6pB,EACZ3pB,YAAa,SACbC,WAAYlT,IC6DP,MAAM68B,GAA2B,CACtC9pB,WAAY+pB,EACZ7pB,YAAa,SACbC,oBArEc6pB,EACZxqB,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNvD,MAACA,GAASsd,EAGhB,GAAc,cAAVtd,EAAuB,CACzB,GAAgB,cAAZQ,EAAER,MACJ,OAAO6gB,GAAS,CAACtd,OAAQ,CAAC/C,KAAI6c,YAIhC,MAAMwqB,EAAcC,EAAGC,MAAMvnC,EAAE1B,OACzBkpC,EAASJ,EAAK,CAACrkC,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAACtd,MAAO,aAEpDqjB,EACFrC,GAAQ,CAACzd,OAAQ,CAACsH,KAAMm9B,EAAQl9B,KAAM+8B,GAAcxqB,YAKxD,OAHAwqB,EAAY9qC,UACZsgB,EAAQjT,YAAY49B,EAAO39B,QAEpBgZ,EAIT,GAAgB,cAAZ7iB,EAAER,MAAuB,CAC3B,MAAMioC,EAAWp9B,GAAK,CAACtH,OAAQ,CAACiP,MAAOhS,GAAI6c,YACrCgG,EAASukB,EAAK,CAACrkC,OAAQ,CAAC/C,EAAGynC,GAAW5qB,UAASC,MAAO,CAACtd,WAE7D,OADAqd,EAAQjT,YAAY69B,EAAS59B,QACtBgZ,EAGT,IAAKxf,EAAKqkC,gBAAgB1nC,EAAER,MAAOA,GAAQ,CAGzC,MAAMqjB,EAASxC,GAAS,CAACtd,OAAQ,CAAC/C,KAAI6c,YACtC,MAAO,CAAChT,OAAQgZ,EAAOhZ,OAAQvL,MAAOukB,EAAOvkB,MAAOkB,SAGtD,GAAIqd,EAAQ3I,mBAAmB,CAAClU,IAAK,CACnC,MAAMmL,EAAS0R,EAAQvU,UAAUtN,IAAIgF,EAAE6J,QAAQsB,QACxCsmB,EAAakW,EAAYnW,GAC5BsK,GAAY3wB,EAAQnL,EAAE1B,MAAO0B,EAAER,MAAOA,GAC1C,OAAOqd,EAAQnP,eAAe+jB,EAAakW,EAAYnW,GAGzD,GAAc,UAAVhyB,EACF,gBCxDgBwS,EAAmB6K,GACrC,MAAMhe,EAAU,IAAIiiB,GAAe9O,EAAM1T,MAAO4Y,GAAY0B,QACtD7Z,EAAS8d,EAAQ5L,iBAAiBpS,EAAS,CAACmT,GAAQ,SAC1D,MAAO,CAACnI,OAAQ9K,EAAO8K,OAAQvL,MAAOS,EAAOT,MAAOkB,MAAOT,EAAOS,MACpE,CDoDWooC,CAAI5nC,EAAG6c,GAGhB,GAAc,SAAVrd,EAAkB,CACpB,MAAMqoC,EAAkBhrB,EAAQnP,eAC5B,GAAI,OAAQrK,EAAK+N,uBAAuB,OAAQ,IAI9CyR,EAAS+jB,GAAS,CAAC7jC,OAFU,CAACib,EAAGhe,EAAG+S,EAAG80B,GAEEhrB,YAE/C,OADAA,EAAQjT,YAAYi+B,EAAgBh+B,QAC7BgZ,EAGT,MAAM,IAAIhnB,MAAM,iCAAiCmE,EAAER,YAAYA,IACjE,GEpEasoC,GAA2B,CACtC1qB,WAAY2qB,EACZzqB,YAAa,SACbC,WALEwD,GAAgB,CAACC,OAAQ9J,GAAYK,KAAM0J,cAAe8a,YCHjDiM,GAYXruC,YAAY2L,GATZzL,mBAAgB,CAAC,KACjBA,cAAW,8BAGXA,mBAAgB,EAChBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,aAAS,EACTA,WAAO,EAGLA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACvF,KAAKsgB,cAAe,EAAG,IAC5BtgB,KAAKqY,UAAY,WAGnBrS,cAkBE,MAjBiB,WACbmc,GAAK,qeCvBAisB,GAYXtuC,YAAY2L,GATZzL,mBAAgB,CAAC,KACjBA,cAAW,8BAGXA,mBAA0C,CAAC,GAAI,EAAG,GAGlDA,WAAO,EAGLA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKqY,UAAY,OAGnBrS,cAaE,MAZiB,WACbmc,GAAK,gUCGN,MAAMksB,GAAkC,CAC7C9qB,WAAY+qB,EACZ7qB,YAAa,SACbC,oBAzB0BX,GAK1B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNqlC,aAACA,EAAYC,aAAEA,GAAgBvrB,EAErC,IAAIje,EACJ,MAAMqe,EAAc,CAClB,CAAC5a,KAAM,UAAWkE,KAAM,CAAC4hC,IACzB,CAAC9lC,KAAM,UAAWkE,KAAM,CAAC6hC,KAO3B,OAJExpC,EADEwE,EAAK2M,cAAchQ,EAAE1B,OAAS,GAAM,EAC5B,IAAI0pC,GAAgBhoC,EAAE1B,OAEtB,IAAI2pC,GAAYjoC,EAAE1B,OAEvBue,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAO0d,EACzD,SCvBaorB,GAYX3uC,YAAYsY,GANZpY,cAAW,GACXA,mBAAgB,EAChBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAILA,KAAKyL,YACD9B,EAAa+kC,gBAAgBt2B,EAAQ,GACzCpY,KAAKkG,cAAgBkS,EAAO1T,KAAI,CAACuC,EAAGnC,IAAM,IAAIA,MAC9C9E,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACvF,KAAKsgB,cAAe,EAAG,IAE5BtgB,KAAK2uC,aAAev2B,EAAOhX,OAAS,EACpC,IAAK,IAAI0D,EAAI,EAAGA,EAAI9E,KAAK2uC,aAAc7pC,IACrC9E,KAAK2G,UAAY,SAAS7B,WAE5B9E,KAAKqY,UAAY,SAGnBrS,cACE,MAAMy/B,EAAqB,GAC3B,GAAIzlC,KAAK2uC,aAAe,EAAG,CACzBlJ,EAASjkC,KACL,uFACJ,IAAK,IAAIsD,EAAI,EAAGA,EAAI9E,KAAK2uC,aAAc7pC,IACrC2gC,EAASjkC,KACL,gCAAgC,CAACsD,kDAE7BA,6BAA6BA,EAAI,UAE3C,MAAM8pC,EAAY5uC,KAAK2uC,aACjBE,EAAiB7uC,KAAK2uC,aAAe,EAC3ClJ,EAASjkC,KAAK,oDACVotC,6BAAqCC,eAEzCpJ,EAASjkC,KAAK,yDAiBhB,MAdiB,WACb2gB,GAAK,0CACgBniB,KAAKsgB,kEACEtgB,KAAKsgB,yMAM3BmlB,EAAS3/B,KAAK,iECvDZ2K,GAAKsS,GAEnB,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpB5K,MAACA,GAASjP,EAGhB,OAAOsd,GAAS,CAACtd,OAAQ,CAAC/C,EAFR6c,EAAQvU,UAAUtN,IAAIgX,EAAMnI,QAEPO,mBAAmBE,MAAOuS,WACnE,CAEO,MAAM8rB,GAA2B,CACtCvrB,WAAYwrB,EACZtrB,YAAa,SACbC,WAAYjT,aCNE0xB,GACZj5B,EAAsB23B,EAAc7d,GACtC,MAAMrd,EAAQuD,EAAO,GAAGvD,MACxB,GAAc,cAAVA,EAAuB,CACzB,MAAMqpC,EAAQ9lC,EAAOxE,KAAKwP,GAAM1D,GAAK,CAACtH,OAAQ,CAACiP,MAAOjE,GAAI8O,cACpDisB,EAAQ/lC,EAAOxE,KAAKwP,GAAMzD,GAAK,CAACvH,OAAQ,CAACiP,MAAOjE,GAAI8O,cAEpDksB,EAAe/M,GAAW6M,EAAOnO,EAAM7d,GACvCmsB,EAAehN,GAAW8M,EAAOpO,EAAM7d,GAEvCgG,EACFrC,GAAQ,CAACzd,OAAQ,CAACsH,KAAM0+B,EAAcz+B,KAAM0+B,GAAensB,YAO/D,OALAgsB,EAAMrsC,SAAQysC,GAAKpsB,EAAQjT,YAAYq/B,EAAEp/B,UACzCi/B,EAAMtsC,SAAQmC,GAAKke,EAAQjT,YAAYjL,EAAEkL,UACzCgT,EAAQjT,YAAYm/B,EAAal/B,QACjCgT,EAAQjT,YAAYo/B,EAAan/B,QAE1BgZ,EAGT,IAAIqmB,EAAWrsB,EAAQ3I,mBAAmBnR,GAY1C,GAJc,WAAVvD,IACF0pC,GAAW,GAGTA,EAAU,CAQZ,MAAMC,EAAYpmC,EAAOxE,KAAIwP,IAC3B,MAAMq7B,EAAY/lC,EAAK2M,cAAcjC,EAAEzP,MAAM+B,MAAMq6B,IAEnD,OAAOld,GAAQ,CAACza,OAAQ,CAAC/C,EAAG+N,GAAI8O,UAASC,MAAO,CAACxe,MADnC,EAAE,EAAG8qC,KACsC,IAGrDC,EAAkBF,EAAU5qC,KAAIwP,IAC7B,CAAClB,KAAMgQ,EAAQjQ,SAASmB,EAAElE,QAASvL,MAAOyP,EAAEzP,UAI/C+C,EACFmC,EAAa+kC,gBAAgBY,EAAU5qC,KAAIwP,GAAKA,EAAEzP,QAAQ,GACxDozB,EAAyC,IAA1ByX,EAAU,GAAG7qC,MAAM,GAClCuyB,EACFoL,GAAcoN,EAAiBhoC,EAAU7B,EAAOkyB,GAE9C4X,EACF9lC,EAAa+kC,gBAAgBxlC,EAAOxE,KAAIwP,GAAKA,EAAEzP,QAAQo8B,GAErD6O,EAAU1sB,EAAQnP,eAAe47B,EAAe9pC,EAAOqxB,GAI7D,OAFAsY,EAAU3sC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UAEtC0/B,EAKT,MAAMC,EAAc3sB,EAAQ5iB,OAAOqX,OAAOm4B,gCAAkC,EAC5E,GAAI1mC,EAAO9H,OAASuuC,EAAa,CAC/B,MAAME,EAAgB,GACtB,IAAK,IAAI/qC,EAAI,EAAGA,EAAIoE,EAAO9H,OAAQ0D,GAAK6qC,EAAa,CACnD,MAAMG,EAAW5mC,EAAO1C,MAAM1B,EAAGA,EAAI6qC,GACrCE,EAAcruC,KAAK2gC,GAAW2N,EAAUjP,EAAM7d,IAEhD,MAAMgG,EAASmZ,GAAW0N,EAAehP,EAAM7d,GAE/C,IAAK,MAAMle,KAAK+qC,EACd7sB,EAAQjT,YAAYjL,EAAEkL,QAGxB,OAAOgZ,EAGT,MAAMsmB,UAACA,EAAS9nC,SAAEA,GAyBpB,SACI0B,EAAsB23B,EAAc7d,GACtC,MAAMxb,EAAWmC,EAAa+kC,gBAAgBxlC,EAAOxE,KAAIwP,GAAKA,EAAEzP,QAAQo8B,GAYxE,MAAO,CAACyO,UAXUpmC,EAAOxE,KAAIwP,GAAKyP,GAAQ,CACXza,OAAQ,CAAC/C,EAAG+N,GACZ8O,UACAC,MAAO,CACLxe,MAAO,CACL+E,EAAK2M,cAAcjC,EAAEzP,MAAM+B,MAAM,EAAGq6B,IACpCr3B,EAAK2M,cAAcjC,EAAEzP,MAAM+B,MAAMq6B,UAKjDr5B,WACrB,CAxCgCuoC,CAAiB7mC,EAAQ23B,EAAM7d,GACvD5K,EAAS,EAAY1T,KAAIwP,GAAKA,EAAEzP,QAChCO,EAAU,IAAIypC,GAAcr2B,GAE5BiL,EAAqD,GACrDzM,EAAoB,IAAI/R,MAAMuT,EAAOhX,OAAS,GACpD,GAAIwV,EAAQxV,OAAS,EAAG,CACtBwV,EAAQ,GAAKwB,EAAO,GAAG,GACvBiL,EAAY7hB,KAAK,CAACiH,KAAM,QAASkE,KAAM,CAACiK,EAAQ,MAChD,IAAK,IAAI9R,EAAI,EAAGA,EAAI8R,EAAQxV,OAAQ0D,IAClC8R,EAAQ9R,GAAK8R,EAAQ9R,EAAI,GAAKsT,EAAOtT,GAAG,GACxCue,EAAY7hB,KAAK,CAACiH,KAAM,QAASkE,KAAM,CAACiK,EAAQ9R,MAIpD,MAAM+D,EAAMma,EAAQ5L,iBAChBpS,EAASsqC,EAAWA,EAAU,GAAG3pC,MAAO0d,GAC5CisB,EAAU3sC,SAAQysC,GAAKpsB,EAAQjT,YAAYq/B,EAAEp/B,UAE7C,MAAMggC,EACFrsB,GAAQ,CAACza,OAAQ,CAAC/C,EAAG0C,GAAMma,UAASC,MAAO,CAACxe,MAAO+C,KAEvD,OADAwb,EAAQjT,YAAYlH,EAAImH,QACjBggC,CACT,UCjHgB/3B,GACZ8K,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B8d,KAACA,GAAQ5d,EAET6d,EAAQt3B,EAAKu3B,eAAeF,EAAM33B,EAAO,GAAGzE,OAAO,GAEnD2T,EAASlP,EAAOxE,KAAIwP,GAAKA,EAAEzP,QACjCkF,EAAasmC,uBAAuB73B,EAAQ0oB,GAE5C,MAAMt5B,EACFmC,EAAa+kC,gBAAgBxlC,EAAOxE,KAAIwP,GAAKA,EAAEzP,QAAQq8B,GAC3D,GAAqC,IAAjCt3B,EAAK2M,cAAc3O,GACrB,OAAOwb,EAAQnP,eAAerM,EAAU0B,EAAO,GAAGvD,MAAO,IAI3D,MAAMuqC,EAAUhnC,EAAO8L,QAAOd,GAAK1K,EAAK2M,cAAcjC,EAAEzP,OAAS,IACjE,OAAuB,IAAnByrC,EAAQ9uC,OACHolB,GAAS,CAACtd,OAAQ,CAAC/C,EAAG+pC,EAAQ,IAAKltB,YAGrCmf,GAAW+N,EAASpP,EAAO9d,EACpC,CAEO,MAAMmtB,GAA6B,CACxC5sB,WAAY6sB,EACZ3sB,YAAa,SACbC,WAAYzL,UCsGDo4B,GAyBXvwC,YACIgoC,EAAmC97B,EAAmBE,EACtDD,EAAkB+V,GAAU,EAC5B7C,EAAsC,KACtCC,GAA4B,EAAOkC,GAA4B,GAxBnEthB,mBAAgB,CAAC,IAAK,KAEtBA,cACI,uIAsBFA,KAAKyL,YAAcq8B,EAAStgC,SAC5BxH,KAAKswC,eAAyC,iBAAxBxI,EAASyI,WAC/BvwC,KAAK4F,SACEkiC,EAAS0I,WAAa,GAAM,GAAK1I,EAAS0I,WAAa,GAAM,IAC9DxwC,KAAKswC,gBACLxI,EAAS2I,SAAW,GAAM,IAAMzwC,KAAKswC,iBACvCxI,EAAS4I,YAAc,GAAM,EACjC1wC,KAAKyH,eAAiBzH,KAAKswC,eAAiB,CAACnqC,EAAG,CAAC,GAAIuB,EAAG,CAAC,EAAG,GAAIC,EAAG,CAAC,IACxB,CAACxB,EAAG,CAAC,EAAG,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,IACpE3H,KAAKuF,cAAgB6G,GACjBpM,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAK4F,QAChD5F,KAAK0L,kBAAoBa,GACrBvM,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAK4F,QAEhD5F,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5CvF,KAAK0L,mBAEL1L,KAAK4F,QACH5F,KAAKswC,gBAAkBxI,EAAS0I,WAAa,GAAM,GACrDxwC,KAAK+gB,iBAAmB,EACxB/gB,KAAKsH,cAAgB,CAAC,MAAO,eAE7BtH,KAAK+gB,iBAAmB,EACxB/gB,KAAKsH,cAAgB,CAAC,YAAa,cAGjC0a,IACFhiB,KAAKkG,cAAc1E,KAAK,QACxBxB,KAAKsH,cAAc9F,KAAK,cAGtB4d,IACFpf,KAAKkG,cAAc1E,KAAK,0BACxBxB,KAAKsH,cAAc9F,KAAK,gBAG1BxB,KAAK+gB,iBAAmB/gB,KAAK0L,kBAAkB,GAC3CsW,GACFhiB,KAAKkG,cAAc1E,KAAK,QAGtB4d,GACFpf,KAAKkG,cAAc1E,KAAK,2BAI5BxB,KAAKshB,0BAA4BA,EACjCthB,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKof,0BAA4BA,EAEjCpf,KAAK2gB,WAAa3gB,KAAKuF,cAAc,GAAKvF,KAAK0L,kBAAkB,GACjE1L,KAAK4gB,WAAa5gB,KAAKuF,cAAc,GAAKvF,KAAK0L,kBAAkB,GACjE1L,KAAKugB,UAAYjc,KAAKC,IAClBvE,KAAKuF,cAAc,GAAKvF,KAAK+gB,iBAAkB/gB,KAAKuF,cAAc,IAEtEvF,KAAK+f,UAAY/T,EAAYhM,KAAK2gB,YAAe,EACjD3gB,KAAKggB,UAAY9T,EAAYlM,KAAK4gB,YAAe,EACjD5gB,KAAKigB,SAAWhU,EAAWjM,KAAKugB,WAAc,EAE9CvgB,KAAKqY,UAAY,YAAYrY,KAAK0L,qBAAqB1L,KAAKmf,eACxDnf,KAAK+f,aAAa/f,KAAKggB,aAAahgB,KAAKigB,YAAYjgB,KAAK4F,UAC1D5F,KAAK+gB,oBAAoB/gB,KAAKswC,kBAC9BtwC,KAAKshB,4BAGXtb,cACE,MAAM2qC,EAAe3wC,KAAK4F,OACtBya,GACIrgB,KAAK0L,kBAAmB1L,KAAKuF,eAAgBvF,KAAKswC,eAClDtwC,KAAKugB,WACTc,GACIrhB,KAAK0L,kBAAmB1L,KAAKuF,eAAgBvF,KAAKswC,eAClDtwC,KAAKugB,WAAW,EAAO,KAAMvgB,KAAKshB,2BACpCsvB,EACF5wC,KAAK4F,OAAS,CAAC5F,KAAK+gB,iBAAkB,EAAG,GAAK,CAAC,EAAG,EAAG,GASzD,MARiB,SA9OrB,SACIuvB,EAAyBvwB,EAAoBC,EAC7CC,EAAmB+B,GAAU,EAC7B7C,EAAsC,KACtCC,GAA4B,EAAOyxB,EAAoB,EACvDC,EAAoB,EAAG/vB,EAAmB,GAC5C,MAwBMgwB,EAAgBT,EAAiB,iEAGA,iEAIjCU,EAAkBV,EAAiB,2HAOA,2HAQnCW,EAASX,EAAiB,qBAAuB,qBACjDY,EAASZ,EAAiB,qBAAuB,qBACjDrY,EAAMqY,EAAiB,MAAQ,MAC/BnY,EAAMmY,EAAiB,MAAQ,MAC/Ba,EAAe,sEAGjBb,EAAiB,uBAAyB,+CAC3BrY,qCACAA,qCAEFE,gEACAA,2PAGDA,wCACInZ,GAAY6xB,6JAGFI,4BAAiCC,iBACvDH,kFAlEY,CAAChwB,IACnB,OAAQA,GACN,KAAK,EACH,MAAO,uBACT,KAAK,EACH,MAAO,gEACT,KAAK,EACH,MAAO,2BACT,QACE,MAAM,IAAI/e,MACN,oBAAoB+e,yBA0DtBqwB,CAAYP,qCAIdQ,EAAUf,EAAkBvwB,GAAaE,EAAW,6BAClC4wB,aAClBM,IACoD,6BAClCN,iFAEhBM,4BAEKnyB,GAAY6xB,WACS5wB,GAAYD,EAAY,6BAClC6wB,aAClBM,IACoD,6BAClCN,iFAEhBM,4BAEKnyB,GAAY6xB,WAEnBS,EAAU,GA9EI,CAACvwB,IACnB,OAAQA,GACN,KAAK,EACH,MAAO,8CACT,KAAK,EACH,MAAO,kDACT,QACE,MAAM,IAAI/e,MACN,oBAAoB+e,yBAsEXwwB,CAAYT,KAEzBU,EAAUxyB,GAAY+B,GACtB0wB,EAAyBzyB,GAAjBsxB,EAA6BO,EACAC,GACrCY,EAAyB1yB,GAAjBsxB,EAA6BQ,EACAD,GAyB3C,MAxBiB,WAEb3xB,GACIC,EAAYC,EAAgD,IAArB2B,EAAwB,gEACd0wB,gBACjDnB,EAAiBe,EAAUC,0EAGsBI,gBACjDpB,EAAiBgB,EAAUD,iFAG6BG,mCACtCzwB,0IAKtBuvB,EAAiB,uBAAyB,oCACtCU,cACAvxB,GAAsBuC,EAAS7C,uGAKzC,CA+GQwyB,CACI3xC,KAAKswC,eAAgBtwC,KAAK+f,UAAW/f,KAAKggB,UAAWhgB,KAAKigB,SAC1DjgB,KAAKgiB,QAAShiB,KAAKmf,WAAYnf,KAAKof,0BACpCwxB,EAAa,GAAIA,EAAa,GAAIA,EAAa,YACrDD,eCrPOiB,GAcX9xC,YACIgoC,EAAmC9lB,GAAU,EAC7C7C,EAAsC,KACtCC,GAA4B,GAZhCpf,mBAAgB,CAAC,IAAK,KACtBA,cACI,iFACJA,mBAA0C,CAAC,EAAG,EAAG,GAU/CA,KAAKyL,YAAcq8B,EAAStgC,SAC5BxH,KAAKswC,eAAyC,iBAAxBxI,EAASyI,WAC/BvwC,KAAKyH,eAAiBzH,KAAKswC,eAAiB,CAACnqC,EAAG,CAAC,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,EAAG,IACxB,CAACxB,EAAG,CAAC,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,EAAG,IACpE3H,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKof,0BAA4BA,EAE7B4C,GACFhiB,KAAKkG,cAAc1E,KAAK,QAGtB4d,GACFpf,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAKqY,UAAY,eAAerY,KAAKmf,cAAcnf,KAAKswC,iBAG1DtqC,cAwDE,MAvDiB,YAEbkZ,GACIlf,KAAKmf,WAAYnf,KAAKof,2BAA2B,EAAO,gvBAmB5Dpf,KAAKswC,eAAiB,oCACA,iJAGjB7wB,GAAsBzf,KAAKgiB,QAAShiB,KAAKmf,2HAI7CgD,GAAK,oHAGcniB,KAAKswC,eAAiB,aAAe,uCACzCtwC,KAAKswC,eAAiB,aAAe,uCACrCtwC,KAAKswC,eAAiB,aAAe,icAOrDtwC,KAAKswC,eAAiB,sBACA,oEAEtBtwC,KAAKswC,eAAiB,gDACA,kRCjE9B,SAASuB,GACLptC,EAAiB6rC,GACnB,MAAMlvC,EAASqD,EAAMrD,OACrB,OAAIA,GAAU,EACLkvC,EACH,IACK7rC,EAAM+B,MAAM,GAAI,GACnB/B,EAAMrD,EAAS,GAAKqD,EAAMrD,EAAS,GACnCqD,EAAMrD,EAAS,IAEjB,IACKqD,EAAM+B,MAAM,GAAI,GAAgB/B,EAAMrD,EAAS,GAClDqD,EAAMrD,EAAS,GAAKqD,EAAMrD,EAAS,KAE/BkvC,GAA6B,IAAXlvC,GAAgBqD,EAAM,GAAK,EAChD,CAACA,EAAM,GAAI,GAEX,IAEX,UA4GgBqtC,IAAW3rC,EACzBA,EAAC6O,OACDA,EAAM8yB,SACNA,EAAQ9kB,QACRA,EAAOnB,KACPA,EAAO,KAAIC,uBACXA,EAAyB,KAAIsC,eAC7BA,EAAiB,EAACjF,WAClBA,EAAa,OAEb,MAAMO,EAAkB,MAARmC,EACVzC,EAAsD,MAA1B0C,EAC5BwuB,EAAyC,iBAAxBxI,EAASyI,WAC1BwB,EAAWzB,GACbxI,EAAS6B,eAAiB7B,EAASgC,UACnChC,EAAS4B,cAAgB5B,EAAS+B,SACR,UAA1B/B,EAASiC,QAAQthC,KACfupC,EAAiBryC,IAAMoP,QAAQ,iCAErC,IAAKijC,IACAD,GAC2B,IAA1BjK,EAAS6B,cAA+C,IAAzB7B,EAAS4B,aACZ,IAA5B5B,EAASuC,gBAAmD,IAA3BvC,EAASwC,eAChB,IAA1BxC,EAASoC,cAA+C,IAAzBpC,EAASqC,cACb,SAA1BrC,EAASiC,QAAQthC,MACS,UAA1Bq/B,EAASiC,QAAQthC,OACtB,OAjIJ,UAAwBtC,EACtBA,EAAC6O,OACDA,EAAM8yB,SACNA,EAAQ9kB,QACRA,EAAOnB,KACPA,EAAO,KAAIC,uBACXA,EAAyB,KAAIsC,eAC7BA,EAAiB,EAACjF,WAClBA,EAAa,OAEb,MAAMmxB,EAAyC,iBAAxBxI,EAASyI,WAC1BpkC,GAAamkC,EAObjrB,EAA8B,GACpC,IAAI4sB,EACAC,EAEJ,GARiB5B,GACbxI,EAAS6B,eAAiB7B,EAASgC,UACnChC,EAAS4B,cAAgB5B,EAAS+B,SACR,UAA1B/B,EAASiC,QAAQthC,KAKP,CACZ,MAAM0pC,EACFrK,EAASgC,SAAWhC,EAAS+B,QAAU/B,EAAS0I,WACpDyB,EAAYtuB,GAAQ,CAClBza,OAAQ,CAAC/C,KACT6c,UACAC,MAAO,CAACxe,MAAO,CAAC,EAAGqjC,EAASzI,UAAW8S,MAEzCD,EAAiBvuB,GAAQ,CACvBza,OAAQ,CAAC/C,EAAG6O,GACZgO,UACAC,MAAO,CAACxe,MAAO,CAAC,EAAG0tC,EAAWrK,EAAS4I,qBAGzCuB,EAAYtuB,GAAQ,CAClBza,OAAQ,CAAC/C,KACT6c,UACAC,MAAO,CACLxe,MAAO6rC,EACH,CACExI,EAASzI,UAAWyI,EAASgC,SAAWhC,EAAS+B,QACjD/B,EAAS0I,YAEX,CACE1I,EAASzI,UAAWyI,EAAS0I,WAC7B1I,EAASgC,SAAWhC,EAAS+B,YAIvCqI,EAAiBvuB,GAAQ,CACvBza,OAAQ,CAAC/C,EAAG6O,GACZgO,UACAC,MAAO,CAACxe,MAAO,CAAC,EAAGqjC,EAAS0I,WAAY1I,EAAS4I,gBAMrD,GAHArrB,EAAc7jB,KAAKywC,GACnB5sB,EAAc7jB,KAAK0wC,GAEW,MAA1BpwB,EAAgC,CAClC,MAAMsb,EACFyU,GAAuB/vB,EAAuBrd,MAAO6rC,GACtC,MAAflT,IACFtb,EAAyB6B,GAAQ,CAC/Bza,OAAQ,CAAC/C,EAAG2b,GACZkB,UACAC,MAAO,CAACxe,MAAO24B,KAEjB/X,EAAc7jB,KAAKsgB,IAIvB,GAAY,MAARD,EAAc,CAChB,MAAMub,EAAcyU,GAAuBhwB,EAAKpd,MAAO6rC,GACpC,MAAflT,IACFvb,EAAO8B,GAAQ,CAACza,OAAQ,CAAC/C,EAAG0b,GAAOmB,UAASC,MAAO,CAACxe,MAAO24B,KAC3D/X,EAAc7jB,KAAKqgB,IAIvB,MAAMmH,EAAS9E,GAAgB,CAC7BC,EAAGmsB,EAAiB2B,EAAYC,EAChCh5B,EAAGo3B,EAAiB4B,EAAiBD,EACrC9lC,aACA2T,YAzEiB,EA0EjBkD,UACAnB,OACA1C,aACA2C,yBACAsC,mBAEImB,EAAM5B,GACR,CAACza,OAAQ,CAAC/C,EAAG6iB,GAAShG,UAASC,MAAO,CAACxe,MAAOqjC,EAAStgC,YAC3D6d,EAAc7jB,KAAKwnB,GAEnB,IAAK,MAAMlkB,KAAKugB,EACdrC,EAAQjT,YAAYjL,EAAEkL,QAGxB,OAAOuV,CACT,CA4BW6sB,CAAe,CACpBjsC,IACA6O,SACA8yB,WACA9kB,UACAnB,OACA1C,aACA2C,yBACAsC,mBAIJ,IAAIpf,EACJ,MAAM+kC,EAAU,CAACjC,EAASiC,QAAQK,IAAKtC,EAASiC,QAAQ3T,MAClDluB,EAAa,CACjB,CAACO,KAAM,QAASkE,KAAM,CAACm7B,EAAS6B,aAAc7B,EAAS4B,cACvD,CAACjhC,KAAM,QAASkE,KAAM,IAAIo9B,IAC1B,CAACthC,KAAM,QAASkE,KAAM,CAACm7B,EAASoC,aAAcpC,EAASqC,cACvD,CAAC1hC,KAAM,QAASkE,KAAM,CAACm7B,EAASuC,eAAgBvC,EAASwC,iBAE3D,GAAI0H,EACFhtC,EAAU,IAAI4sC,GACV9J,EAAUpoB,EAASP,EAAYC,OAC9B,CACL,MAAMpT,EAAYskC,EAAiBxI,EAASuK,UAAYvK,EAAS2I,SAC9B3I,EAAS4I,YACtCxkC,EAAYokC,EAAiBxI,EAAS4I,YACT5I,EAASuK,UAAYvK,EAAS2I,SAC3DxkC,EACF67B,EAAS6B,aAAe7B,EAAS4B,YAAc5B,EAAS0I,WAC5DtoC,EAAW1G,KACP,CAACiH,KAAM,QAASkE,KAAM,CAACX,IAAa,CAACvD,KAAM,QAASkE,KAAM,CAACT,IAC3D,CAACzD,KAAM,QAASkE,KAAM,CAACV,KAG3B,MAAMqV,EAA4B0B,EAAQjjB,YAAYG,UACtD8E,EAAU,IAAIqrC,GACVvI,EAAU97B,EAAWE,EAAWD,EAAUyT,EAASP,EACnDC,EAA2BkC,GAGjC,MAAM+D,EAA8B,GAC9BitB,EAAyB,CAACnsC,EAAG6O,GAC/B0K,IACG4wB,GAAwC,IAAtBzuB,EAAKpd,MAAMrD,SAChCygB,EAAO8B,GACH,CAACza,OAAQ,CAAC/C,EAAG0b,GAAOmB,UAASC,MAAO,CAACxe,MAAO,CAACod,EAAKpd,MAAM,GAAI,EAAG,MACnE4gB,EAAc7jB,KAAKqgB,IAErBywB,EAAS9wC,KAAKqgB,IAEZzC,IACGkxB,GAA0D,IAAxCxuB,EAAuBrd,MAAMrD,SAClD0gB,EAAyB6B,GAAQ,CAC/Bza,OAAQ,CAAC/C,EAAG2b,GACZkB,UACAC,MAAO,CAACxe,MAAO,CAACqd,EAAuBrd,MAAM,GAAI,EAAG,MAEtD4gB,EAAc7jB,KAAKsgB,IAErBwwB,EAAS9wC,KAAKsgB,IAEG,cAAf3C,IACFjX,EAAW1G,KAAK,CAACiH,KAAM,UAAWkE,KAAM,CAACyX,KACzCpf,EAAQ2B,UAAY,iBAEtB,MAAM4e,EAAMvC,EAAQ5L,iBAAiBpS,EAASstC,EAAUnsC,EAAER,MAAOuC,GACjE,IAAK,MAAMpD,KAAKugB,EACdrC,EAAQjT,YAAYjL,EAAEkL,QAExB,OAAOuV,CACT,CCxOO,MAAMgtB,GAA6B,CACxChvB,WAAYivB,EACZ/uB,YAAa,SACbC,oBAfEX,GACF,MAAM7Z,OAACA,EAAM+Z,MAAEA,EAAKD,QAAEA,GAAWD,GAC3B5c,EAACA,EAAC6O,OAAEA,GAAU9L,GACdtE,QAACA,EAAOgmC,IAAEA,EAAG2F,WAAEA,EAAUkC,UAAEA,EAAS5H,gBAAEA,GAAmB5nB,EACzDyvB,EAAc/oC,EAAagpC,wBAAwBpC,GAKzD,OAAOuB,GAAW,CAAC3rC,IAAG6O,SAAQ8yB,SAJbn+B,EAAaipC,kBAC1BzsC,EAAE1B,MACFuQ,EAAOvQ,MAA2CG,EAAS6tC,EAAW7H,EACtEC,GAAiB,EAAuB6H,GACJ1vB,WAC1C,SC+Ea6vB,GAaX/yC,YAAYgoC,GARZ9nC,mBAAgB,CAAC,IAAK,KAEtBA,cACI,2IAMFA,KAAKyL,YAAcq8B,EAAS8B,QAE5BpgC,EAAK4B,OACuB,iBAAxB08B,EAASyI,YACT,IAAM,gCACVvwC,KAAK4F,OACDkiC,EAAS0I,WAAa,GAAM,GAAK1I,EAAS4I,YAAc,GAAM,EAClE1wC,KAAKyH,eAAiB,CAACtB,EAAG,CAAC,GAAIuB,EAAG,CAAC,EAAG,GAAIC,EAAG,CAAC,IAC9C3H,KAAKuF,cAAgB6G,GACjBpM,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAK4F,QAChD5F,KAAK0L,kBAAoBa,GACrBvM,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAK4F,QAEhD5F,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5CvF,KAAK0L,mBAEL1L,KAAK4F,SACP5F,KAAKsH,cAAgB,CAAC,YAAa,QAGrCtH,KAAKqY,UACD,oBAAoBrY,KAAK4F,UAAU5F,KAAK0L,oBAG9C1F,cACE,MAAM2qC,EAAe3wC,KAAK4F,OACtBya,GAA2BrgB,KAAK0L,kBAAmB1L,KAAKuF,eACxD8b,GAAuBrhB,KAAK0L,kBAAmB1L,KAAKuF,eAKxD,MAJiB,SArIrB,SAAsCwb,EAAmB,GACvD,MA2CMb,EAAU,kkBAbDlB,GAAY+B,qHAGZ/B,GAAY+B,qNAQvBA,8BAKS/B,GAAY+B,WAwCzB,MAtCiB,0DAEb/B,GAAY+B,+BACMA,WAClBb,kEAIAlB,GAAY+B,+BACMA,wcAzDF,CAACA,IACnB,OAAQA,GACN,KAAK,EACH,MAAO,0DACT,KAAK,EACH,MAAO,ujBAUT,QACE,MAAM,IAAI/e,MACN,oBAAoB+e,yBAiDxBwwB,CAAYxwB,yBAEP/B,GAAY+B,mFAInB/B,GAAY+B,gCACMA,kDAElBA,EAAmB,+QAQnBA,yBAIN,CA8CM+xB,CAA6B9yC,KAAK4F,OAAS,EAAI,WAC/C+qC,iBCzIOoC,GAYXjzC,YAAYgoC,GAXZ9nC,mBAAgB,CAAC,KAAM,KACvBA,cACI,yFAKJA,mBAA0C,CAAC,GAAI,EAAG,GAElDA,WAAO,EAGLA,KAAKyL,YAAcq8B,EAAS8B,QAC5B5pC,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKswC,eAAyC,iBAAxBxI,EAASyI,WAC/BvwC,KAAKqY,UAAY,kBAAkBrY,KAAKswC,iBAG1CtqC,cACE,MAAMgtC,EAAShzC,KAAKswC,eAAiB,EAAI,EACnC2C,EAASjzC,KAAKswC,eAAiB,EAAI,EACnC4C,EAAalzC,KAAKswC,eAAiB,EAAI,EAC7C,MAAO,SACLnuB,GAAK,2JAIe+wB,kDAEgBF,cAClCC,woCA0BYjzC,KAAKswC,kgBCJlB,MAAM6C,GAA0C,CACrD5vB,WAAY6vB,EACZ3vB,YAAa,SACbC,oBAxDkCX,GAKlC,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BswB,GAACA,EAAEr+B,OAAEA,GAAU9L,GACfi0B,WAACA,EAAUv4B,QAAEA,EAAOgmC,IAAEA,EAAG2F,WAAEA,EAAU1F,gBAAEA,GAAmB5nB,EAE1DyvB,EAAc/oC,EAAagpC,wBAAwBpC,GACnDzI,EAAWn+B,EAAaipC,kBAC1BzV,EAAYnoB,EAAOvQ,MAA2CG,EAC9D,EAAmBgmC,EAAKC,GAAiB,EAAO6H,GAE9CxqC,EAAa,CACjB,CAACO,KAAM,QAASkE,KAAM,CAACm7B,EAAS6B,aAAc7B,EAAS4B,cACvD,CACEjhC,KAAM,QACNkE,KAAM,CACJm7B,EAAS6B,aAAe,EAAI7B,EAASiC,QAAQK,IAC7CtC,EAAS4B,YAAc,EAAI5B,EAASiC,QAAQ3T,OAGhD,CAAC3tB,KAAM,QAASkE,KAAM,CAACm7B,EAASoC,aAAcpC,EAASqC,cACvD,CACE1hC,KAAM,QACNkE,KAAM,CACJm7B,EAASzI,UAAWyI,EAASuK,UAAWvK,EAAS2I,SACjD3I,EAAS4I,eAIf,IAAI1rC,EAGJ,GAAIrF,IAAMoP,QAAQ,sCACd+4B,EAAS6B,cAAgB,GAAK7B,EAAS4B,aAAe,GAClD5B,EAAS4I,aAAe,IAA8B,IAAxB5I,EAAS0I,WAC7CxrC,EAAU,IAAI+tC,GAAsBjL,OAC/B,CACL9iC,EAAU,IAAI6tC,GAAwB/K,GACtC,MAAM97B,EAAY87B,EAASgC,SAAWhC,EAAS+B,QACzC39B,EAAY47B,EAAS0I,WACrBvkC,EACF67B,EAAS6B,aAAe7B,EAAS4B,YAAc5B,EAAS4I,YAC5DxoC,EAAW1G,KACP,CAACiH,KAAM,SAAUkE,KAAM,CAACX,IACxB,CAACvD,KAAM,SAAUkE,KAAM,CAACT,IACxB,CAACzD,KAAM,SAAUkE,KAAM,CAACV,KAE9B,OAAO+W,EAAQ5L,iBAAiBpS,EAAS,CAACquC,EAAIr+B,GAAS,UAAW9M,EACpE,GCjDaorC,GAA0B,CACrC/vB,WAAYgwB,EACZ9vB,YAAa,SACbC,WALiBwD,GAAgB,CAACC,OAAQ9J,GAAYG,OCE3Cg2B,GAA2B,CACtCjwB,WAAYkwB,EACZhwB,YAAa,SACbC,WALkBwD,GAAgB,CAACC,OAAQ9J,GAAYI,cCH5Ci2B,GAaX5zC,YACI6zC,EAAkBC,EAA4BC,EAC9CC,GAVJ9zC,mBAAgB,CAAC,QAAS,QAAS,UACnCA,cAAW,4BACXA,mBAA0C,CAAC,GAAI,EAAG,GAIlDA,WAAO,EAKL,MAAO+zC,GAAcH,EACrB5zC,KAAKyL,YAAc,CAACsoC,EAAUF,EAAS,GAAIA,EAAS,GAAIF,GACxD3zC,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKg0C,SAAsB,aAAXF,EAAwB,EAAI,EAC5C9zC,KAAKi0C,sBAAwBj0C,KAAKyL,YAAY,GAAK,EACnDzL,KAAKk0C,qBAAuBl0C,KAAKyL,YAAY,GAAK,EAClDzL,KAAKqY,UAAY,iBAAiBrY,KAAKg0C,YACnCh0C,KAAKi0C,yBAAyBj0C,KAAKk0C,uBAGzCluC,cACE,MAAOmuC,EAAkBC,GACrB,CAAC,kCAAmC,oCAEjCC,EAAaC,EAAaC,GAAOv0C,KAAKi0C,sBACzC,CACE,IAAIE,qCACJ,yBACA,MAAMA,6BAER,CACE,MACA,MACA,mBAAmBA,MAElBK,EAAYC,EAAYC,GAAO10C,KAAKk0C,qBACvC,CACE,IAAIE,qCACJ,wBACA,MAAMA,4BAER,CACE,MACA,MACA,mBAAmBA,KA+DzB,MAzDiB,SACfjyB,GAAK,mIAGsBkyB,sCACDG,6dAeHF,iCACDG,0BACPF,wCACcJ,4HAIdO,wCACcN,2KAKtBp0C,KAAKg0C,uqCC1FX,MAgBMW,GAAoC,CAC/CpxB,WAAYqxB,EACZnxB,YAAa,SACbC,WAnB4BX,IAK5B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B8xB,MAACA,EAAKC,MAAEA,EAAKC,OAAEA,GAAU7rC,GACzB2qC,SAACA,EAAQC,OAAEA,EAAMkB,mBAAEA,GAAsB/xB,EAEzCje,EAAU,IAAI0uC,GAChBmB,EAAMpwC,MAAM,GAAIqwC,EAAMrwC,MAA2BovC,EAAUC,GACzDzwB,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAACqoC,KAC9C,OAAOhyB,EAAQ5L,iBACXpS,EAAS,CAAC6vC,EAAOC,EAAOC,GAAS,UAAW1xB,EAAY,GCf9D,IAAY4xB,IAAZ,SAAYA,GACVA,WACAA,SACD,CAHD,CAAYA,KAAAA,cAKCC,GAcXp1C,YACI8b,EAAenX,EAAiB0wC,EAAoBC,GAVxDp1C,mBAAgB,CAAC,KAGjBA,cAAW,eACXA,WAAO,EAQLA,KAAKuF,cAAgB,CADE,IACe,EAAG,GACzCvF,KAAKyL,YAAchH,EACnBzE,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKm1C,UAAYA,EACjBn1C,KAAKo1C,QAAUA,EACfp1C,KAAK4b,GAAKA,EACV5b,KAAKqY,UAAY,OAAOrY,KAAK4b,MAAM5b,KAAKm1C,aAAan1C,KAAKo1C,UAG5DpvC,cACE,MAAM6B,EAAO7H,KAAKyL,YAAYrK,OACxBi0C,EAAUr1C,KAAK4b,KAAOq5B,GAAUK,KAAO,MAAQ,MAC/CC,EAAMv1C,KAAKm1C,UAAYE,EACA,QAAQhK,GAAUxjC,EAAM,SAAU7H,KAAK4b,OAC9Dxa,EAASpB,KAAKyL,YAAYzL,KAAKyL,YAAYrK,OAAS,GAC1D,IAAIo0C,EAAY,GACZC,EAAY,GAWhB,OAPIz1C,KAAKm1C,WACPK,EAAYx1C,KAAKo1C,QAAU,WAAUh0C,EAAS,GAAM,WACpDq0C,EAAYz1C,KAAKo1C,QAAU,UAAY,YAEvCI,EAAYx1C,KAAKo1C,QAAU,gBAAgBh0C,IAAW,cACtDq0C,EAAaz1C,KAAKo1C,QAAU,aAAe,cAEtC,WACHjzB,GAAK,2HAIQuzB,GAAc7tC,EAAM,SAAU7H,KAAK4b,4BACnC25B,wEAENC,8BACQC,kBACVC,GAAc7tC,EAAM,SAAU7H,KAAK4b,8BAC/B5b,KAAK4b,YAAYyvB,GAAUxjC,EAAM,SAAU7H,KAAK4b,sFASjE,SAASyvB,GAAUxjC,EAAckB,EAAc6S,GAC7C,GAAa,IAAT/T,EACF,MAAO,GAAGkB,IACL,GAAa,IAATlB,EACT,MAAO,GAAGkB,QAAWA,MAChB,GAAa,IAATlB,EACT,MAAO,GAAGkB,QAAWA,QAAWA,MAC3B,GAAa,IAATlB,EACT,MAAO,GAAGkB,QAAWA,QAAWA,QAAWA,MAE3C,MAAM/G,MAAM,cAAc4Z,cAAe/T,yBAE7C,CAEA,SAAS6tC,GAAc7tC,EAAckB,EAAc6S,GACjD,GAAa,IAAT/T,EACF,MAAO,GAAGkB,IACL,GAAa,IAATlB,EACT,MAAO,GAAGkB,MACL,GAAa,IAATlB,EACT,MAAO,GAAGkB,MACL,GAAa,IAATlB,EACT,MAAO,GAAGkB,MAEV,MAAM/G,MAAM,cAAc4Z,cAAe/T,yBAE7C,UC5FgB8tC,GACZ/5B,EAAezV,EAAe6c,EAAwB6d,EACtDsU,EAAoBC,GACtB,MAAMzU,EAAQx6B,EAAE1B,MAAMrD,OAChBw0C,EAAcjsC,EAAau9B,mBAAmB,CAACrG,GAAOF,GAC5D,IAAIkV,EAAY1vC,EACG,MAAfyvC,IACFC,EAAY50B,GAAU,CAAC/X,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAACyd,KAAMkV,MAE7D,MAAME,EAAensC,EAAa09B,iBAAiB,EAAG1G,GAAO,GAE7D,GAAImV,IAAiBnV,EAAQ,EAC3B,MAAM,IAAI3+B,MACN,oDACImE,EAAE1B,MAAMrD,OAAS,kBACLy/B,KAEtB,MAAMtgC,EAAOs1C,EAAUpxC,MAAMqxC,GAC7B,IAAI9sB,EAASxC,GAAS,CAACtd,OAAQ,CAAC/C,EAAG0vC,GAAY7yB,YAM/C,IAAK,IAAIle,EAAI,EAAGA,GAAKR,KAAKwH,KAAKxH,KAAKyxC,KAAKx1C,IAAS,EAAGuE,IAAK,CACxD,MAAME,EAAU,IAAIkwC,GAAWt5B,EAAIi6B,EAAUpxC,OAAO,EAAO2wC,GACrDY,EAAahtB,EACb3F,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAAC7H,KAC9CkkB,EACIhG,EAAQ5L,iBAAiBpS,EAAS,CAACgkB,GAASA,EAAOrjB,MAAO0d,GAC9DL,EAAQjT,YAAYimC,EAAWhmC,QAIjC,GAAImlC,EAAW,CACb,MAAMnwC,EAAU,IAAIkwC,GAAWt5B,EAAIi6B,EAAUpxC,MAAO0wC,EAAWC,GACzDY,EAAahtB,EACb3F,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAAC,KAC9Cqc,EACIhG,EAAQ5L,iBAAiBpS,EAAS,CAACgkB,GAASA,EAAOrjB,MAAO0d,GAC9DL,EAAQjT,YAAYimC,EAAWhmC,QAGjC,GAAmB,MAAf4lC,EAAqB,CACvB,MACMK,EAA0Bh1B,GAC5B,CAAC/X,OAAQ,CAAC/C,EAAG6iB,GAAShG,UAASC,MAAO,CAACyd,KAFhB/2B,EAAausC,uBAAuBN,MAO/D,OAHA5yB,EAAQjT,YAAYiZ,EAAOhZ,QAC3BgT,EAAQjT,YAAY8lC,EAAU7lC,QAEvBimC,EAGT,OAAOjtB,CACT,CChDO,MAAMmtB,GAA8B,CACzC5yB,WAAY6yB,EACZ3yB,YAAa,SACbC,oBAXEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN23B,KAACA,EAAIsU,UAAEA,EAASC,QAAEA,GAAWnyB,EACnC,OAAO0yB,GAAQV,GAAUK,KAAMnvC,EAAG6c,EAAS6d,EAAMsU,EAAWC,EAC9D,GCEO,MAAMiB,GAA6B,CACxC9yB,WAAY+yB,EACZ7yB,YAAa,SACbC,oBAXEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN23B,KAACA,EAAIsU,UAAEA,EAASC,QAAEA,GAAWnyB,EACnC,OAAO0yB,GAAQV,GAAUsB,IAAKpwC,EAAG6c,EAAS6d,EAAMsU,EAAWC,EAC7D,SCVaoB,GAWX12C,YAAY2L,EAAuB8kC,GAVnCvwC,mBAAgB,CAAC,KAMjBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EACPA,cAAW,mBAGTA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKqY,UAAY,gBAAgBk4B,IACjCvwC,KAAKuwC,WAAaA,EAGpBvqC,cAsBE,MArBiB,WACbmc,GAAK,wJAIOniB,KAAKy2C,8CACLz2C,KAAK02C,6CACL12C,KAAK22C,gTAOX32C,KAAK42C,oFAGG52C,KAAK62C,yFAOjBJ,uBACN,MAAwB,SAApBz2C,KAAKuwC,WACA,YAEA,YAIHmG,sBACN,MAAwB,SAApB12C,KAAKuwC,WACA,YAEA,YAIHoG,sBACN,MAAwB,SAApB32C,KAAKuwC,WACA,YAEA,YAIHqG,qBACN,MAAwB,SAApB52C,KAAKuwC,WACA,uBAEA,uBAIHsG,yBACN,MAAwB,SAApB72C,KAAKuwC,WACA,4BAEA,6BCjDN,MAAMuG,GAAmC,CAC9CvzB,WAAYwzB,EACZtzB,YAAa,SACbC,oBAjC2BX,GAK3B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN8tC,UAACA,EAASzG,WAAEA,GAActtB,EAE1Boc,EAAYl5B,EAAE1B,MAAM,GAKpBwyC,GAJ8B,SAAf1G,EAAyBpqC,EAAE1B,MAAM,GAAK0B,EAAE1B,MAAM,IAIhCuyC,EAC7BE,GAJ6B,SAAf3G,EAAyBpqC,EAAE1B,MAAM,GAAK0B,EAAE1B,MAAM,IAIjCuyC,EAC3BG,GAJ6B,SAAf5G,EAAyBpqC,EAAE1B,MAAM,GAAK0B,EAAE1B,MAAM,KAIhCuyC,EAAYA,GAMxC3zB,EAAc,CAClB,CAAC5a,KAAM,QAASkE,KAAM,CAACqqC,KAGnBhyC,EAAU,IAAIwxC,GARgB,SAAfjG,EACjB,CAAClR,EAAW4X,EAAcC,EAAaC,GACvC,CAAC9X,EAAW8X,EAAaF,EAAcC,GAMU3G,GACrD,OAAOvtB,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAO0d,EACzD,SC3Ba+zB,GAcXt3C,YACI2L,EAAuBk+B,EAAsBD,EAC7C1nB,GAAU,EAAO7C,EAAsC,KACvDk4B,GAAqB,GAZzBr3C,mBAAgB,CAAC,IAAK,KACtBA,cAAW,uCACXA,mBAA0C,CAAC,GAAI,GAAI,GAWjDA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB,CAACtB,EAAG,CAAC,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,EAAG,IAC9C3H,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAE5Cyc,GACFhiB,KAAKkG,cAAc1E,KAAK,QAEtB61C,GACFr3C,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKq3C,mBAAqBA,EAC1Br3C,KAAK2pC,aAAeA,EACpB3pC,KAAK0pC,YAAcA,EACnB1pC,KAAKqY,UAAY,iBAAiBrY,KAAKmf,cAAcnf,KAAK2pC,gBACtD3pC,KAAK0pC,cAGX1jC,cACE,MAAM2kC,EAAa3qC,KAAK0pC,YAAc1pC,KAAK2pC,aACrCpkC,EACFvF,KAAKuF,cAAc,GAAKvF,KAAKuF,cAAc,GAAKvF,KAAKuF,cAAc,GACjE+xC,EAAct3C,KAAKuF,cAAc,GAAKvF,KAAK2pC,aAAe,EAC1D9oB,EAAa7gB,KAAKuF,cAAc,GAAKvF,KAAK0pC,YAAc,EA+E9D,MA7EiB,WACbxqB,GAAoBlf,KAAKmf,WAAYnf,KAAKq3C,oBAAoB,EAAO,yDAE3Bx2B,OAAgBy2B,wDAChBt3C,KAAK0pC,iBAC/C1pC,KAAK2pC,u0CAkCL2N,4BAAsCt3C,KAAKuF,cAAc,6DAEzDsb,4BAAqC7gB,KAAKuF,cAAc,uVAUxDolC,EAAaplC,EACT,gBAAgBolC,KAChB,kBAAkBA,wBAAiCplC,oDAG/BvF,KAAK0pC,+CACL1pC,KAAK0pC,+KAOL1pC,KAAK2pC,iEACH3pC,KAAK0pC,qNAM7BjqB,GAAsBzf,KAAKgiB,QAAShiB,KAAKmf,4LCtHtCo4B,GAeXz3C,YACIgoC,EAAmC9lB,GAAU,EAC7C7C,EAAsC,KAAMk4B,GAAqB,GAZrEr3C,mBAAgB,CAAC,IAAK,KACtBA,cAAW,uCACXA,mBAA0C,CAAC,EAAG,EAAG,GACjDA,mBAAgB,EAKhBA,aAAS,EAKPA,KAAKyL,YAAcq8B,EAAStgC,SAC5BxH,KAAKyH,eAAiB,CAACtB,EAAG,CAAC,GAAIuB,EAAG,CAAC,GAAIC,EAAG,CAAC,EAAG,IAC9C3H,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAAC,EAAGvF,KAAKsgB,cAAe,IAE5B9W,EAAK4B,OACuB,iBAAxB08B,EAASyI,YACT,IAAM,gCAENvuB,GACFhiB,KAAKkG,cAAc1E,KAAK,QAEtB61C,GACFr3C,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAK8nC,SAAWA,EAChB9nC,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKq3C,mBAAqBA,EAE1Br3C,KAAKqY,UACD,iBAAiB8G,KAAcnf,KAAK8nC,SAAS6B,gBACzC3pC,KAAK8nC,SAAS4B,eAAe1pC,KAAK8nC,SAASoC,gBAC3ClqC,KAAK8nC,SAASqC,eAAenqC,KAAKsgB,gBAG5Cta,cACE,MAAMwxC,GAAWx3C,KAAKsgB,cAAgB,GAAKtgB,KAAK8nC,SAASqC,YACrDnqC,KAAK8nC,SAAS4B,YAwDlB,MAtDiB,WACbxqB,GAAoBlf,KAAKmf,WAAYnf,KAAKq3C,oBAAoB,EAAM,4SAS/Cr3C,KAAK8nC,SAASoC,4CACflqC,KAAK8nC,SAASqC,sUAKNnqC,KAAKsgB,2QAMFk3B,+CACEx3C,KAAKsgB,gDAChBtgB,KAAKsgB,sLAKHtgB,KAAK8nC,SAAS6B,wJAGZ6N,6HAGEx3C,KAAK8nC,SAAS4B,mHAEd1pC,KAAKsgB,oMAOXtgB,KAAKsgB,uMAIrBb,GAAsBzf,KAAKgiB,QAAShiB,KAAKmf,+ICjG1Cs4B,GAgBX33C,YACIgoC,EAAmC9lB,GAAU,EAC7C7C,EAAsC,KAAMk4B,GAAqB,GAbrEr3C,mBAAgB,CAAC,IAAK,KACtBA,cAAW,+HAGXA,mBAA0C,CAAC,IAAK,EAAG,GAUjDA,KAAKyL,YAAcq8B,EAAStgC,SAC5BxH,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKswC,eAAyC,iBAAxBxI,EAASyI,WAE3BvuB,GACFhiB,KAAKkG,cAAc1E,KAAK,QAEtB61C,GACFr3C,KAAKkG,cAAc1E,KAAK,0BAG1BxB,KAAK8nC,SAAWA,EAChB9nC,KAAKgiB,QAAUA,EACfhiB,KAAKmf,WAAaA,EAClBnf,KAAKq3C,mBAAqBA,EAC1Br3C,KAAKqY,UAAY,aAAarY,KAAKmf,cAAcnf,KAAKswC,iBAGxDtqC,cACE,MAAMorC,EAAcpxC,KAAKswC,eAAiB,2BACA,2BAsE1C,MApEiB,WACbpxB,GAAoBlf,KAAKmf,WAAYnf,KAAKq3C,oBAAoB,EAAO,eAErEl1B,6HAIAniB,KAAKswC,eAAiB,KAAO,oEACXtwC,KAAKswC,eAAiB,EAAI,yuCA4BvBc,wqBAoBAA,6JAMjB3xB,GAAsBzf,KAAKgiB,QAAShiB,KAAKmf,sLCnD9C,MAAMu4B,GAA4C,CACvDn0B,WAAYo0B,EACZl0B,YAAa,SACbC,oBAxDoCX,GAKpC,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,EAAC6O,OAAEA,GAAU9L,GACdtE,QAACA,EAAOgmC,IAAEA,EAAG2F,WAAEA,EAAUkC,UAAEA,EAAS5H,gBAAEA,GAAmB5nB,EACzDyvB,EAAc/oC,EAAagpC,wBAAwBpC,GACzD,IAAIqH,EAAanF,EACC,MAAdmF,IACFA,EAAa,CAAC,EAAG,IAGnB,MAAM9P,EAAWn+B,EAAaipC,kBAC1BzsC,EAAE1B,MACFuQ,EAAOvQ,MAA2CG,EAASgzC,EAC3DhN,EAAKC,GAAiB,EAAsB6H,GAC1CxqC,EAAa,CACjB,CAACO,KAAM,QAASkE,KAAM,CAACm7B,EAASiC,QAAQK,IAAKtC,EAASiC,QAAQ3T,OAC9D,CAAC3tB,KAAM,QAASkE,KAAM,CAACm7B,EAASgC,SAAUhC,EAAS+B,WAG/CyG,EAAyC,iBAAxBxI,EAASyI,WAChC,IAAIvrC,EA0BJ,OAxBKsrC,GAAkBxI,EAASgC,SAAW,IAAMhC,EAAS+B,QAAU,IACtC,IAA1B/B,EAASoC,cAA+C,IAAzBpC,EAASqC,aACb,IAA3BrC,EAASwC,eAAmD,IAA5BxC,EAASuC,gBACzCvC,EAAS0I,aAAe1I,EAAS4I,YACnC1rC,EAAU,IAAIoyC,GACVtP,EAAStgC,SAAUsgC,EAAS6B,aAAc7B,EAAS4B,aAErD4G,GAAkBxI,EAASgC,SAAW,GAAKhC,EAAS+B,QAAU,GAC9D/B,EAASqC,aAAe,GACxBrC,EAAS0I,aAAe1I,EAAS4I,aACL,IAA5B5I,EAASuC,gBAAmD,IAA3BvC,EAASwC,eAC1CxC,EAAS0I,WAAa,GAAM,EAC9BxrC,EAAU,IAAIuyC,GAA2BzP,IAEzC9iC,EAAU,IAAIyyC,GAAuB3P,GACrC5/B,EAAW1G,KACP,CAACiH,KAAM,QAASkE,KAAM,CAACm7B,EAAS6B,eAChC,CAAClhC,KAAM,QAASkE,KAAM,CAACm7B,EAAS4B,cAChC,CAACjhC,KAAM,QAASkE,KAAM,CAACm7B,EAASoC,aAAcpC,EAASqC,cAAe,CACpE1hC,KAAM,QACNkE,KAAM,CAACm7B,EAASuC,eAAgBvC,EAASwC,kBAI1CtnB,EAAQ5L,iBAAiBpS,EAAS,CAACmB,EAAG6O,GAAS7O,EAAER,MAAOuC,EACjE,GCpDa2vC,GAAqBpwB,GAAiB,CACjDN,OAAQ1M,GAAawB,IACrBmL,cAAe0wB,GACfpwB,iBAAiB,IAGNqwB,GAA+B,CAC1Cx0B,WAAYy0B,EACZv0B,YAAa,SACbC,WAAYm0B,aCVEviC,GACZyN,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN23B,KAACA,EAAI4H,SAAEA,GAAYxlB,EAEzB,OAAO2b,GAAOz4B,EAAG06B,EAAM4H,EAAU,MAAOzlB,EAC1C,CAEO,MAAMi1B,GAA0B,CACrC10B,WAAYgzB,EACZ9yB,YAAa,SACbC,WAAYpO,IC+DP,MAAM4iC,GAA6B,CACxC30B,WAAY40B,EACZ10B,YAAa,SACbC,oBA1EEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3Bq1B,SAACA,GAAYn1B,EACb6iB,EAAU58B,GAEVmvC,QAACA,EAAOC,WAAEA,EAAUC,OAAEA,GACxB5uC,EAAa6uC,qBAAqBJ,EAAUtS,EAAQ1kC,QACxDuI,EAAa8uC,oBAAoBJ,EAAQj3C,OAAQm3C,EAAQzS,GACzD,MAAM4S,KAACA,EAAIC,MAAEA,GAAShvC,EAAaivC,qBAAqBN,EAAYC,GAE9DM,EAASF,EAAMv3C,OACrB,IAAImkB,EAAuB,KACvBuzB,EAAmBT,EAAQj3C,OAC/B,MAAM23C,EAAiC,GACvC,IAAK,IAAIj0C,EAAI,EAAGA,EAAI+zC,IAAU/zC,EAAG,CAC/B,IAAK,MAAMk0C,KAAUL,EAAM7zC,GAAI,CAC7B,MAAOm0C,mBAAoBvY,EAAMwY,WAAYC,GACzCxvC,EAAayvC,qBAAqBN,EAAkBP,EAAOS,IAC/D,IAAI7yC,EACAwD,EAAa0vC,sBAAsB3Y,GACrCv6B,EAAI2/B,EAAQkT,IAEZ7yC,EAAI8a,GAAU,CAAC/X,OAAQ,CAAC/C,EAAG2/B,EAAQkT,IAAUh2B,UAASC,MAAO,CAACyd,UAC9DqY,EAAiBv3C,KAAK2E,IAExB,MAAMi3B,EAAwBj3B,EAAE1B,MAAM+B,QACtC,IAAK,IAAI2vB,EAAI,EAAGA,EAAIgjB,EAAa/3C,SAAU+0B,EACzCiH,EAAYn7B,OAAOk3C,EAAahjB,GAAI,EAAG,GAGpC3sB,EAAKC,YAAYtD,EAAE1B,MAAO24B,KAC7Bj3B,EAAIwd,GAAQ,CAACza,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAACxe,MAAO24B,KAClD2b,EAAiBv3C,KAAK2E,IAEZ,OAARof,EACFA,EAAMpf,GAGNof,EACIsyB,GAAmB,CAAC3uC,OAAQ,CAACib,EAAGhe,EAAG+S,EAAGqM,GAAMvC,YAChD+1B,EAAiBv3C,KAAK+jB,IAGtBzgB,EAAI+zC,EAAS,IACXH,EAAK5zC,IAAM,IACbygB,EAAMjQ,GAAI,CACRpM,OAAQ,CAAC/C,EAAGof,GACZvC,UACAC,MAAO,CACL4d,KAAM6X,EAAK5zC,IAAMuzC,EAAQj3C,OAAS03C,GAClCrQ,UAAU,KAGdsQ,EAAiBv3C,KAAK+jB,IAExBuzB,KAKJ,IAAK,MAAMllC,KAAcmlC,EACnBnlC,IAAe2R,GAGnBvC,EAAQjT,YAAY6D,EAAW5D,QAGjC,OAAOuV,CACT,GCzEa+zB,GAA0B,CACrC/1B,WAAYg2B,GACZ91B,YAAa,SACbC,WALiBwD,GAAgB,CAACC,OAAQ9J,GAAYM,OCK3C67B,GAA4B,CACvCj2B,WAAYk2B,GACZh2B,YAAa,SACbC,WANmB+D,GACjB,CAACN,OAAQ1M,GAAa6B,MAAO3W,MAAO,OAAQyhB,cAAesyB,MCFlDvvB,GAAMjD,GAAgB,CACjCC,OAAQ9J,GAAYO,IACpBwJ,cAAekb,GACf38B,MAAO,YAGIg0C,GAA0B,CACrCp2B,WAAYq2B,GACZn2B,YAAa,SACbC,WAAYyG,aCTE+uB,GAAWn2B,GAKzB,MAAM7Z,OAACA,EAAM+Z,MAAEA,EAAKD,QAAEA,GAAWD,GAC3BvV,IAACA,GAAOyV,GACR9K,MAACA,GAASjP,EAEV80B,EAAY7lB,EAAM1T,MAAMrD,OACxBwnB,EAAWzQ,EAAM1T,MAAM+B,QAC7B,IAAIqzC,EAAOrsC,EAWX,OAVIA,EAAM,IAERhE,EAAK4B,SACC4yB,EAAY,IAAMxwB,GACpB,IAAM,mCAAoCwwB,EAAY,OAClDA,OACR6b,EAAO7b,EAAYxwB,EAAM,GAE3Bob,EAAS3mB,OAAO43C,EAAM,EAAG,GAElBl2B,GAAQ,CAACza,OAAQ,CAAC/C,EAAGgS,GAAQ6K,UAASC,MAAO,CAACxe,MAAOmkB,IAC9D,CAEO,MAAMkxB,GAAiC,CAC5Cv2B,WAAYw2B,GACZt2B,YAAa,SACbC,WAAYw1B,ICzBDc,GAA4B,CACvCz2B,WAAY02B,GACZx2B,YAAa,SACbC,WALEwD,GAAgB,CAACC,OAAQ9J,GAAYQ,MAAOuJ,cAAemb,YCHlD2X,GASXp6C,YAAYq6C,GARZn6C,iBAAwB,GAIxBA,mBAAgB,CAAC,KACjBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAGLA,KAAKyL,YAAc0uC,EACnBn6C,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKqY,UAAY,gBAGnBrS,cAWE,MAViB,WACbmc,GAAK,0TChBN,MAAMi4B,GAAoC,CAC7C72B,WAAY82B,GACZ52B,YAAa,SACbC,WAAY,EAAExa,SAAQ8Z,cACpB,MAAM6xB,MAACA,GAAS3rC,EACVme,EAAgBrE,EAEhBhe,EAAU,IAAIk1C,GAAsBrF,EAAmBpwC,OAG7D,OADI4iB,EAAcjQ,iBAAiBpS,EAAS,CAAC6vC,GAAQA,EAAMlvC,MAC9C,GCPN20C,GAA4B,CACvC/2B,WAAYg3B,GACZ92B,YAAa,SACbC,WALEwD,GAAgB,CAACC,OAAQ9J,GAAYS,MAAOsJ,cAAeob,MCClDgY,GAA+B,CAC1Cj3B,WAAYk3B,GACZh3B,YAAa,SACbC,WALE+D,GAAiB,CAACN,OAAQ1M,GAAaqC,QAASnX,MAAO,iBCH9C+0C,GAWX56C,YAAY2L,EAAuBkvC,EAAqBC,GAAc,GARtE56C,mBAAe,EACfA,iBAAwB,CAAC,GAGzBA,mBAA0B,GAC1BA,mBACI,CAAC,IAAK,EAAG,GAGXA,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACo1C,EAAa,EAAG,IAErB36C,KAAK46C,YAAcA,EACnB56C,KAAKqY,UAAY,cAAcrY,KAAK46C,cAGtC50C,cACE,MAAM60C,EAAc76C,KAAK46C,YACrB,0CACA,4CAGJ,MAAO,0CADH56C,KAAK46C,YAAc,mBAAqB,6BAGxCz4B,GAAK,8LAIY04B,iLC9BlB,MAAMC,GAAiC,CAC5Cv3B,WAAYw3B,GACZt3B,YAAa,SACbC,oBAOyBX,GAKzB,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,EACjC,IAAIi4B,OAACA,GAAU9xC,EACf,MAAMyxC,YAACA,GAAe13B,EAEtB,GAAc,MAAV+3B,EACF,MAAM,IAAIh5C,MAAM,4DAGlB,MAAMi5C,EAAwC,sCAC1CD,aAAkBE,iBAChBC,EAAwC,sCAC1CH,aAAkBI,iBAChBC,EAA2C,uCAC/BL,aAAkBM,mBACF,qCAC7BN,aAAkBO,gBACjBC,EACuB,iCAAeR,aAAkBS,aAEvDz4C,EAAOC,GAAUg4C,EACpB,CACGD,EAA4BU,WAC5BV,EAA4BW,aAE/B,CAACX,EAAOh4C,MAAOg4C,EAAO/3C,QACpBwI,EAAc,CAACxI,EAAQD,EAAO23C,GAM9BiB,EAAiBX,GAAWE,EAClC,GAAIK,GAAiBH,GAAYO,EAAgB,CAC/C,IAAI3qC,EAkBG,CACL,GAAI2qC,EAAgB,CAClB,MAAMC,EACFl8C,IAAMoP,QAAQ,yCACS,MAAvB+sC,IACAD,IAA0BE,KAC5BA,GAAqBF,EACrBC,GACI7sC,SAASC,cAAc,UAAUE,WAC7B,KAAM,CAAC2sC,yBAEjBD,GAAoBE,OAAOh5C,MAAQA,EACnC84C,GAAoBE,OAAO/4C,OAASA,EACpC64C,GAAoBG,UAChBjB,EAA+C,EAAG,EAAGh4C,EAAOC,GAChE+3C,EAASc,GAAoBE,OAG/B,MAAMx7C,EAAQ07C,gBAAgBpsC,SAC1BosC,gBAAgBC,kBAAoBD,gBAAgBE,gBAClDl5C,EAAS,aACTW,EAAUmf,EAAQxU,eAAezL,eACnC0I,EAAY,GAAIA,EAAY,GAAIvI,EAAQ1C,GAC5CwiB,EAAQ9U,MAAMmuC,2BACV,CAACl3C,OAAQ61C,GAA4C,CAACn3C,WACtD,CAAC4H,EAAY,GAAIA,EAAY,KACjCwF,EAAc,CAACjO,QAAOC,SAAQC,SAAQ1C,QAAOqD,WAG/C,MAAMtD,EAAOiJ,EAAK2M,cAAc1K,GAC1B7G,EAAU4E,EAAK0B,eAAeO,GAC9BzG,EACF,IAAI01C,GAAkBjvC,EAAakvC,EArDrC,OAuDIt3B,EAAc,CAClB,CAAC5a,KAAM,SAAUkE,KAAM,CAACpM,IAAQ,CAACkI,KAAM,SAAUkE,KAAM,CAACguC,IACxD,CAAClyC,KAAM,SAAUkE,KAAM,IAAI/H,KAEvBuT,EAAQ6K,EAAQnP,eAAe,CAAC5Q,EAAQD,GAAQ,SACzCggB,EAAQvU,UAAUtN,IAAIgX,EAAMnI,QACpCgB,aAAeC,EAEpB,MAAM+X,EACFhG,EAAQ5L,iBAAiBpS,EAAS,CAACmT,GAAQ,QAASkL,GAExD,OADAL,EAAQjT,YAAYoI,EAAMnI,QACnBgZ,EAKT,MAAMszB,EAAatB,EAA8CruC,KACjE,IAAI4vC,EAAaD,EACjB,GAAmB,MAAf3B,GAAuC,IAAhBA,EAAmB,CAC5C4B,EAAa,IAAIzvC,WAAWkuC,EAAOh4C,MAAQg4C,EAAO/3C,OAAS03C,GAE3D,MAAMplB,EAAa+mB,EAAUl7C,OAC7B,IAAI6G,EAAI,EACR,IAAK,IAAInD,EAAI,EAAGA,EAAIywB,EAAYzwB,IAC1BA,EAAI,EAAI61C,IACV4B,EAAWt0C,KAAOq0C,EAAUx3C,IAKlC,MAAMI,EACF8d,EAAQnP,eAAepI,EAAa,QAAS,IAAIoB,WAAW0vC,IAEhE,OADAv5B,EAAQ/M,YAAY/Q,EAAO8K,QACpB9K,CACT,GAhIA,IAAI42C,GACAC,GAAqBp8C,IAAMoP,QAAQ,+CCV1BytC,GAcX18C,YACI05B,EAAkBijB,EAAqBC,EACvCC,EAA4BC,GAVhC58C,cAAW,yBAEXA,mBAA0C,CAAC,IAAK,EAAG,GAInDA,WAAO,EAKLA,KAAKkG,cAAgB,CAAC,IAAK,OAAQ,YACnCyD,EAAaqb,2BAA2BwU,EAAQijB,GAChD9yC,EAAaqb,2BAA2BwU,EAAQkjB,GAChD18C,KAAKyL,YAAc+tB,EACnBx5B,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAE7B,MAAfo3C,IACFhzC,EAAaqb,2BAA2BwU,EAAQmjB,GAChD38C,KAAKkG,cAAc1E,KAAK,WAER,MAAdo7C,IACFjzC,EAAaqb,2BAA2BwU,EAAQojB,GAChD58C,KAAKkG,cAAc1E,KAAK,UAE1BxB,KAAK28C,YAAcA,EACnB38C,KAAK48C,WAAaA,EAClB58C,KAAKqY,UAAY,YAGnBrS,cACE,IAAI62C,EAAgB,MACI,MAApB78C,KAAK28C,cACPE,EAAgB,iCAGlB,IAAIC,EAAe,MACI,MAAnB98C,KAAK48C,aACPE,EAAe,gCAiBjB,MAdiB,WACb36B,GAAK,kQAMiB06B,kCACDC,wOCvDtB,MAAMC,GAAqC,CAChDx5B,WAAYy5B,GACZv5B,YAAa,SACbC,WAAY,EAAExa,SAAQ+Z,QAAOD,cAC3B,MAAM7c,EAACA,EAAC82C,MAAEA,EAAKlnC,OAAEA,EAAMuzB,KAAEA,EAAI4T,SAAEA,GAAYh0C,GACrCi0C,gBAACA,GAAmBl6B,EACpBm6B,EAAgBp6B,EAChBq6B,EAAkB,CAACl3C,EAAamjC,EAAgB4T,GACtD,IAAIP,EAAc,KACJ,MAAV5mC,IACF4mC,EAAc5mC,EAAOtR,MACrB44C,EAAgB77C,KAAKuU,IAEvB,IAAI6mC,EAAa,KACJ,MAATK,IACFL,EAAaK,EAAMx4C,MACnB44C,EAAgB77C,KAAKy7C,IAEvB,MAAMj4C,EAAU,IAAIw3C,GAChBr2C,EAAE1B,MAAO6kC,EAAK7kC,MAAOy4C,EAASz4C,MAAOk4C,EAAaC,GAChDv5B,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAACwwC,KAC9C,OAAOC,EAAchmC,iBACjBpS,EAASq4C,EAAiBl3C,EAAER,MAAO0d,EAAY,GCahD,MAAMi6B,GAAkC,CAC7C/5B,WAAYg6B,GACZ95B,YAAa,SACbC,oBAtC0BX,GAK1B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,EAAC6O,OAAEA,EAAM6M,KAAEA,EAAIC,uBAAEA,GAA0B5Y,GAC5CtE,QACJA,EAAOgmC,IACPA,EAAG2F,WACHA,EAAUkC,UACVA,EAAS5H,gBACTA,EAAe1rB,WACfA,EAAUiF,eACVA,GACEnB,EAEEyvB,EAAc/oC,EAAagpC,wBAAwBpC,GAMzD,OAAOuB,GAAW,CAChB3rC,IACA6O,SACA8yB,SARen+B,EAAaipC,kBAC1BzsC,EAAE1B,MACFuQ,EAAOvQ,MAA2CG,EAAS6tC,EAAW7H,EACtEC,GAAiB,EAAuB6H,GAM1C1vB,UACAnB,OACAC,yBACAsC,iBACAjF,cAEJ,GCsCO,MAAMq+B,GAA2C,CACtDj6B,WAAYk6B,GACZh6B,YAAa,SACbC,oBA1EmCX,GAKnC,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,EAAC6O,OAAEA,EAAM6M,KAAEA,EAAIC,uBAAEA,GAA0B5Y,GAC5CtE,QAACA,EAAOgmC,IAAEA,EAAG6H,UAAEA,EAAS5H,gBAAEA,EAAe1rB,WAAEA,EAAUiF,eAAEA,GACzDnB,EAEJ,IAAI20B,EAAanF,EACC,MAAdmF,IACFA,EAAa,CAAC,EAAG,IAGnBpuC,EAAK4B,OACDzB,EAAa+zC,+BAA+B94C,EAASgzC,IACrD,IACI,gFAAkBhzC,oBAA0BgzC,OAEpD,MAAM9P,EAAWn+B,EAAaipC,kBAC1BzsC,EAAE1B,MACFuQ,EAAOvQ,MAA2CG,EAASgzC,EAC3DhN,EAAKC,GAAiB,GAEpB8S,EAA8B,CAACx3C,EAAG6O,GAElC0K,EAAkB,MAARmC,EACVzC,EAAsD,MAA1B0C,EAE9BpC,GACFi+B,EAAcn8C,KAAKqgB,GAEjBzC,GACFu+B,EAAcn8C,KAAKsgB,GAGrB,MAAM5Z,EAAa,CACjB,CAACO,KAAM,QAASkE,KAAM,CAACm7B,EAASiC,QAAQK,IAAKtC,EAASiC,QAAQ3T,OAC9D,CAAC3tB,KAAM,QAASkE,KAAM,CAACm7B,EAASgC,SAAUhC,EAAS+B,WAGrD,IAAI7kC,EA0BJ,OAzBI8iC,EAASgC,SAAW,GAAKhC,EAAS+B,QAAU,GAC5C/B,EAASqC,aAAe,GACxBrC,EAAS0I,aAAe1I,EAAS4I,aACL,IAA5B5I,EAASuC,gBAAmD,IAA3BvC,EAASwC,eAC1CxC,EAAS0I,WAAa,GAAM,EAC9BxrC,EAAU,IAAIuyC,GACVzP,EAAUpoB,EAASP,EAAYC,IAEnCpa,EAAU,IAAIyyC,GACV3P,EAAUpoB,EAASP,EAAYC,GACnClX,EAAW1G,KACP,CAACiH,KAAM,QAASkE,KAAM,CAACm7B,EAAS6B,eAChC,CAAClhC,KAAM,QAASkE,KAAM,CAACm7B,EAAS4B,cAChC,CAACjhC,KAAM,QAASkE,KAAM,CAACm7B,EAASoC,aAAcpC,EAASqC,cAAe,CACpE1hC,KAAM,QACNkE,KAAM,CAACm7B,EAASuC,eAAgBvC,EAASwC,kBAG9B,cAAfnrB,IACFjX,EAAW1G,KAAK,CAACiH,KAAM,UAAWkE,KAAM,CAACyX,KACzCpf,EAAQ2B,UAAY,iBAGlBqc,EAAQ5L,iBAAiBpS,EAAS24C,EAAe,UAAWz1C,EAGlE,SCxEa01C,GAUX99C,YAAY+9C,EAAkBp5C,GAL9BzE,mBAA0B,CAAC,IAAK,WAEhCA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAGLA,KAAKyL,YAAchH,EACnBzE,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKqY,UAAY,YAAYwlC,IAC7B79C,KAAK69C,SAAWA,EAChB79C,KAAK2G,SAAW,6BAA6BN,GAAkBw3C,MAGjE73C,cACE,IAAI83C,EAEFA,EADE99C,KAAK69C,SAAW,EACH,sBAEA,mBAiBjB,MAfiB,WACb17B,GAAK,uSAMiB27B,sLCgBvB,MAAMC,GAA+B,CAC1Cx6B,WAAYy6B,GACZv6B,YAAa,SACbC,oBA/CEX,GACF,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpB/X,OAACA,EAAMsgB,QAAEA,GAAWpiB,EAEpBqiB,EAAeD,EAAQ7mB,MACvB8zB,EAAYhN,EAAaA,EAAanqB,OAAS,GAC/Cs3B,EAAalvB,EAAK2M,cAAcnL,EAAOvG,QAEtCmzB,EAAaU,EAAWE,EAAW5zB,GACtC+E,EAAas0C,mBAAmBjzC,EAAQsgB,GAEtC4yB,EAAiBv6B,GACnB,CAACza,OAAQ,CAAC/C,EAAGmlB,GAAUtI,UAASC,MAAO,CAACxe,MAAO,CAAC6zB,EAAWC,MACzD4lB,EAAWx6B,GAAQ,CACvBza,OAAQ,CAAC/C,EAAG6E,GACZgY,UACAC,MAAO,CAACxe,MAAO,CAAE+E,EAAK2M,cAAcnL,EAAOvG,OAAS+zB,EAAYA,MAElE,GAAIxV,EAAQ3I,mBAAmB,CAACrP,EAAQsgB,KACnB,WAAjBtgB,EAAOrF,MAAoB,CAC7B,MAAMyyB,EAAcpV,EAAQjQ,SAASuY,EAAQtb,QACvCqoB,EAAYrV,EAAQ/O,WAA4BjJ,GAChDozC,EAAW1b,GACbtK,EAAaC,EAAWrtB,EAAOrF,MAAO2yB,EAAWC,EAAWC,EAC5D5zB,EAASoG,EAAOvG,MAAOi0B,GAE3B,OAAO1V,EAAQnP,eAAe+jB,EAAa5sB,EAAOrF,MAAOy4C,EAAS9sC,QAEpE,MAAMtM,EAAU,IAAI44C,GAAgBrlB,EAAW,CAACD,EAAWE,IACrDnV,EACF,CAAC,CAAC5a,KAAM,QAASkE,KAAM,CAAC4rB,IAAa,CAAC9vB,KAAM,QAASkE,KAAM/H,IACzDiE,EAAMma,EAAQ5L,iBAChBpS,EAAS,CAACm5C,EAAUD,GAAiBC,EAASx4C,MAAO0d,GAEnD6oB,EACFvoB,GAAQ,CAACza,OAAQ,CAAC/C,EAAG0C,GAAMma,UAASC,MAAO,CAACxe,MAAOmzB,KAMvD,OAJA5U,EAAQjT,YAAYmuC,EAAeluC,QACnCgT,EAAQjT,YAAYouC,EAASnuC,QAC7BgT,EAAQjT,YAAYlH,EAAImH,QAEjBk8B,CACT,SChDamS,GAUXv+C,YAAY8hB,EAAkBnW,GAL9BzL,mBAA0B,CAAC,IAAK,WAChCA,mBAA0C,CAAC,GAAI,EAAG,GAElDA,WAAO,EAGLA,KAAKyL,YAAcmW,EAAOpb,QAC1BxG,KAAK4hB,OAASA,EACd5hB,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKqY,UAAY,SAGnBrS,cACE,MAAMmlC,EAgBV,SAAyBvpB,GACvB,MAAM08B,EAAgB,CAAC,UAAW,UAAW,UAAW,WAClDnT,EAAe,GACrB,IAAK,IAAIrmC,EAAI,EAAGA,EAAI8c,EAAOxgB,OAAQ0D,IACvB,IAANA,EACFqmC,EAAa3pC,KAAK,UAElB2pC,EAAa3pC,KAAK,GAAG88C,EAAcx5C,MAGvC,OAAOqmC,EAAarlC,MACtB,CA3ByBy4C,CAAgBv+C,KAAK4hB,QAW1C,MAViB,WACbO,GAAK,4SAKuCgpB,2CCvBpCqT,GACZz7B,GAGF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,EAACmlB,QAAEA,GAAWpiB,GACf23B,KAACA,EAAI4d,UAAEA,GAAax7B,EAIpBy7B,EAAal1C,EAAKu3B,eAAeF,EAAM16B,EAAE1B,OAAO,GAEhDk6C,EAAYh1C,EAAai1C,aAAaC,yBACxC14C,EAAGmlB,EAASozB,EAAYD,GAEtBK,EAAct1C,EAAK2M,cAAcmV,EAAQ7mB,OAEzCikC,EAAY,GAEZyV,EAAWx6B,GAAQ,CACvBza,OAAQ,CAAC/C,KACT6c,UACAC,MAAO,CACLxe,MAAO,CACLk6C,EAAUtf,UAAWsf,EAAUI,UAAWJ,EAAUK,QACpDL,EAAUnmB,cAKVG,EAAehV,GAAQ,CAC3Bza,OAAQ,CAAC/C,EAAGmlB,GACZtI,UACAC,MAAO,CAACxe,MAAO,CAACk6C,EAAUtf,UAAWyf,EAAcH,EAAUtf,cAG/DqJ,EAAUlnC,KAAK28C,GACfzV,EAAUlnC,KAAKm3B,GAEf,MAAME,EAAqB,CACzB8lB,EAAUtf,UAAWsf,EAAUI,UAAWD,EAAcH,EAAUtf,UAClEsf,EAAUnmB,WAGZ,GAAIxV,EAAQ3I,mBAAmB,CAAClU,EAAGmlB,IAAW,CAC5C,MACM2zB,EADoBj8B,EAAQvU,UAAUtN,IAAIw3B,EAAa3oB,QACrBsB,OAClCsnB,EACFh3B,EAAO+2B,EAAal0B,MAAOk0B,EAAahzB,MAAOs5C,GAG7CC,EADcl8B,EAAQvU,UAAUtN,IAAIg9C,EAASnuC,QACvBsB,OACtB4lB,EACFt1B,EAAOu8C,EAAS15C,MAAO05C,EAASx4C,MAAOu5C,GACrC3nB,EAASqL,GAAgB1L,EAAM0B,EAAYC,GAIjD,OAFA6P,EAAU/lC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UAEtCgT,EAAQnP,eACX8qC,EAAUlzC,YAAa8rB,EAAO5xB,MAAO4xB,EAAOjmB,QAGlD,MAAMtM,EAAU,IAAIq5C,GAAcF,EAAS15C,MAAOo0B,GAC5ChwB,EAAMma,EAAQ5L,iBAChBpS,EAAS,CAACm5C,EAAUxlB,GAAewlB,EAASx4C,OAChD+iC,EAAUlnC,KAAKqH,GAEf,MAAMqjC,EAAWvoB,GACb,CAACza,OAAQ,CAAC/C,EAAG0C,GAAMma,UAASC,MAAO,CAACxe,MAAOk6C,EAAUlzC,eAEzD,OADAi9B,EAAU/lC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UACtCk8B,CACT,CAEO,MAAMiT,GAA+B,CAC1C57B,WAAY67B,GACZ37B,YAAa,SACbC,WAAY86B,ICxEDa,GAA8B,CACzC97B,WAAY+7B,GACZ77B,YAAa,SACbC,WATqB+D,GAAiB,CACtCN,OAAQ1M,GAAa8B,QACrB6K,cAAem4B,GACf55C,MAAO,UCGI65C,GAAmC,CAC9Cj8B,WAAYk8B,GACZh8B,YAAa,SACbC,WAT0B+D,GAAiB,CAC3CN,OAAQ1M,GAAa+B,cACrB7W,MAAO,OACPyhB,cAAes4B,MCFJC,GAA4B,CACvCp8B,WAAYq8B,GACZn8B,YAAa,SACbC,WALEwD,GAAgB,CAACC,OAAQ9J,GAAYU,OAAQpY,MAAO,UCejD,MAAMk6C,GAAgC,CAC3Ct8B,WAAYu8B,GACZr8B,YAAa,SACbC,oBAjBwBX,GAKxB,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN62C,MAACA,GAAS98B,EACVI,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAACozC,KACxC/6C,EAAU,IAAIiiB,GAAe9gB,EAAE1B,MAAO4Y,GAAYe,WAExD,OADApZ,EAAQ2B,SAAW,eACZqc,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAI,UAAWkd,EAC3D,GCTa28B,GAA2B,CACtCz8B,WAAY08B,GACZx8B,YAAa,SACbC,WANkB+D,GAChB,CAACN,OAAQ1M,GAAagC,KAAM9W,MAAO,OAAQyhB,cAAe84B,MCKjDC,GAAgC,CAC3C58B,WAAY68B,GACZ38B,YAAa,SACbC,WATuB+D,GAAiB,CACxCN,OAAQ1M,GAAaiC,WACrB/W,MAAO,OACPyhB,cAAei5B,MCDJC,GAA0B,CACrC/8B,WAAYg9B,GACZ98B,YAAa,SACbC,WALEwD,GAAgB,CAACC,OAAQ9J,GAAYY,IAAKmJ,cAAe6b,MCEhDud,GAAiC,CAC5Cj9B,WAAYk9B,GACZh9B,YAAa,SACbC,WALE+D,GAAiB,CAACN,OAAQ1M,GAAakC,YAAahX,MAAO,UCElD+6C,GAAiC,CAC5Cn9B,WAAYo9B,GACZl9B,YAAa,SACbC,WALwBwD,GAAgB,CAACC,OAAQ9J,GAAYa,eCKlD0iC,GAA8B,CACzCr9B,WAAYs9B,GACZp9B,YAAa,SACbC,WARqB+D,GAAiB,CACtCN,OAAQ1M,GAAauC,IACrBoK,cAAe05B,MCUV,MAAMC,GAA8B,CACzCx9B,WAAYy9B,GACZv9B,YAAa,SACbC,oBAhBEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNyhC,WAACA,EAAU/lC,QAAEA,EAAOgmC,IAAEA,EAAGC,gBAAEA,GAAmB5nB,EAMpD,OAAOwmB,GAAStjC,EAJCwD,EAAamhC,kBAC1B3kC,EAAE1B,MAA2CkmC,EAAY/lC,EAF3C,EAGHgmC,EAAKC,GAES,MAAO7nB,EACtC,GCDO,MAAMi+B,GAA0B,CACrC19B,WAAY29B,GACZz9B,YAAa,SACbC,oBAZEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN23B,KAACA,EAAI4H,SAAEA,GAAYxlB,EAEzB,OAAO2b,GAAOz4B,EAAG06B,EAAM4H,EAAU,MAAOzlB,EAC1C,GCFam+B,GAA8B,CACzC59B,WAAY69B,GACZ39B,YAAa,SACbC,WARqB+D,GAAiB,CACtCN,OAAQ1M,GAAawC,IACrBmK,cAAei6B,YCLJC,GAYXxhD,YACI05B,EAAkB+nB,EAClBC,GAXJxhD,cAAW,GAGXA,mBAAgB,CAAC,KACjBA,mBAA0C,CAAC,GAAI,EAAG,GAGlDA,WAAO,EAKLA,KAAKyL,YAAc81C,EAAS78C,KACxB,CAAC+8C,EAAG38C,IAAM28C,EAAE,GAAqBjoB,EAAO10B,GAAK28C,EAAE,KACnDzhD,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKw5B,OAASA,EACd+nB,EAAS78C,KAAI,CAACuC,EAAGnC,KACf9E,KAAK2G,UAAY,OAAO7B,gBAAgB,IAE1C9E,KAAK+V,OAAkB,YAATyrC,EAAqB,EAAI,EACvCxhD,KAAKqY,UAAY,aAAampC,IAGhCx7C,cACE,MAAM6B,EAAO7H,KAAKw5B,OAAOp4B,OAEnB+qB,EAAQnsB,KAAKw5B,OAAO90B,KAAI,CAACuC,EAAGnC,IAAM,eAAeA,SAAQgB,KAAK,KAC9DoM,EAAMlS,KAAKw5B,OACA90B,KACG,CAACuC,EAAGnC,IAAM,eAAeA,yBACrB+C,EAAO,EAAI,IAAI/C,KAAO,OAC7BgB,KAAK,KAEhB47C,EAAuB,IAAT75C,EAAa,QAAU,WACrC85C,EAAqB,IAAT95C,EAAa,MAAQ,SACjC+5C,EAAsB,IAAT/5C,EAAa,OAAS,UACnClC,EAAQU,GAAkBwB,GAC1Bg6C,EAAiBh6C,EAAO,EAC1B,CAAC,YAAa,YAAa,YAAa,aAAarB,MAAM,EAAGqB,GAC9D,SAEJ,MAAO,WACHsa,GAAK,2EAEWxc,KAASwmB,4BACXxmB,KAASuM,uFAECrK,oCACd+5C,OAAgBF,uBAClBE,OAAgBF,WAAqBE,OAC7C5hD,KAAK+V,kCACW6rC,QAAiBD,uBACzBC,QAAiBD,gBAAwBC,OACjD5hD,KAAK+V,qHAI4B8rC,kCC5DlC,MAAMC,GAAgC,CAC3Cv+B,WAAYw+B,GACZt+B,YAAa,SACbC,WAAY,EAAExa,SAAQ+Z,QAAOD,cAC3B,MAAM7c,EAACA,GAAK+C,GACNq4C,SAACA,EAAQC,KAAEA,GAAQv+B,EACnBm6B,EAAgBp6B,EAEhBK,EAAck+B,EAAS78C,KAAI+8C,IACxB,CAACh5C,KAAM,QAASkE,KAAM,CAAC80C,EAAE,GAAIA,EAAE,QAElCz8C,EAAU,IAAIs8C,GAAiBn7C,EAAE1B,MAAO88C,EAAUC,GAIxD,OAFIpE,EAAchmC,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAO0d,EAE7C,GCMV,MAAM2+B,GAA0B,CACrCz+B,WAAY0+B,GACZx+B,YAAa,SACbC,oBApBkBX,GAElB,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpB5c,EAACA,GAAK+C,EAEZ,GAAI8Z,EAAQ3I,mBAAmB,CAAClU,IAAK,CACnC,MAAMohB,EAAQvE,EAAQvU,UAAUtN,IAAIgF,EAAE6J,SAC/BwX,EAAWoB,GACd4a,GAAWjc,EAAMjW,OAAsBnL,EAAE1B,MAAO0B,EAAER,OACtD,OAAOqd,EAAQnP,eAAe+U,EAAUziB,EAAER,MAAO6hB,GAGnD,MAAMxiB,EAAU,IAAIiiB,GAAe9gB,EAAE1B,MAAO4Y,GAAYc,KAExD,OAAO6E,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAClD,GCCO,MAAMu8C,GAA0C,CACrD3+B,WAAY4+B,GACZ1+B,YAAa,SACbC,oBA1BkCX,GAKlCzO,QAAQC,KACJ,kGAGJ,MAAMrL,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B+xB,MAACA,EAAKsN,OAAEA,GAAUl5C,GAClBm5C,cAACA,EAAaC,aAAEA,EAAYC,eAAEA,GAAkBt/B,EAEhDu/B,EAAYx/B,EAAQjQ,SAAS+hC,EAAM9kC,QACnCyyC,EAAaz/B,EAAQjQ,SAASqvC,EAAOpyC,SAErC0yC,gBAACA,GAAmBC,GAAaC,wBACnCJ,EAAWC,EAAYJ,EAAeC,EAAcC,GAExD,OAAOv/B,EAAQnP,eACX,CAAC6uC,EAAgBthD,QAAS,QAAS,IAAIyL,WAAW61C,GACxD,GCcO,MAAMG,GAA0C,CACrDt/B,WAAYu/B,GACZr/B,YAAa,SACbC,oBArCkCX,GAKlCzO,QAAQC,KACJ,kGAGJ,MAAMrL,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B+xB,MAACA,EAAKsN,OAAEA,GAAUl5C,GAClBm5C,cAACA,EAAaC,aAAEA,EAAYC,eAAEA,EAAcQ,aAAEA,GAAgB9/B,EAE9Du/B,EAAYx/B,EAAQjQ,SAAS+hC,EAAM9kC,QACnCyyC,EAAaz/B,EAAQjQ,SAASqvC,EAAOpyC,QAErCgzC,EAAmBX,EACnBY,EAAkBX,EAClBY,EAAoBX,EACpBY,EAAkBJ,GAElBL,gBAACA,EAAeU,eAAEA,GACpBT,GAAaU,wBACTb,EAAWC,EAAYO,EAAkBC,EACzCC,EAAmBC,GAE3B,MAAO,CACLngC,EAAQnP,eACJ,CAAC6uC,EAAgBthD,QAAS,QAAS,IAAIyL,WAAW61C,IACtD1/B,EAAQnP,eACJ,CAACuvC,EAAehiD,QAAS,UAAW,IAAIwL,aAAaw2C,IAE7D,YC3BgBE,GACZvgC,GACF,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpB5c,EAACA,GAAK+C,EACZ,GAAgB,cAAZ/C,EAAER,MAAuB,CAC3B,MAAMioC,EAAWp9B,GAAK,CAACtH,OAAQ,CAACiP,MAAOhS,GAAI6c,YACrCosB,EAAIkU,GAAU,CAACp6C,OAAQ,CAAC/C,EAAGynC,GAAW5qB,YACtCugC,EAAW9yC,GAAK,CAACvH,OAAQ,CAACiP,MAAOhS,GAAI6c,YACrCle,EAAIw+C,GAAU,CAACp6C,OAAQ,CAAC/C,EAAGo9C,GAAWvgC,YAEtCgG,EAASrC,GAAQ,CAACzd,OAAQ,CAACsH,KAAM4+B,EAAG3+B,KAAM3L,GAAIke,YAOpD,OALAA,EAAQjT,YAAY69B,EAAS59B,QAC7BgT,EAAQjT,YAAYq/B,EAAEp/B,QACtBgT,EAAQjT,YAAYwzC,EAASvzC,QAC7BgT,EAAQjT,YAAYjL,EAAEkL,QAEfgZ,EAEP,OAAOlG,GAAK,CACVG,MAAO,CACLxe,MAAO0B,EAAE1B,MACTkB,MAAOQ,EAAER,MACTud,MAAmB,WAAZ/c,EAAER,MAAqB,GAAK,GAErCqd,WAGN,CAEO,MAAMwgC,GAAgC,CAC3CjgC,WAAYkgC,GACZhgC,YAAa,SACbC,WAAY4/B,ICNP,MAAMI,GAA+B,CAC1CngC,WAAYogC,GACZlgC,YAAa,SACbC,oBA7BckgC,EACZ7gC,GACF,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpB5c,EAACA,GAAK+C,EAEZ,GAAgB,WAAZ/C,EAAER,MACJ,MAAM,IAAI3D,MAAM,gDACX,GAAgB,cAAZmE,EAAER,MAAuB,CAClC,MAAMioC,EAAWp9B,GAAK,CAACtH,OAAQ,CAACiP,MAAOhS,GAAI6c,YACrCosB,EAAIwU,EAAS,CAAC16C,OAAQ,CAAC/C,EAAGynC,GAAW5qB,YACrCugC,EAAW9yC,GAAK,CAACvH,OAAQ,CAACiP,MAAOhS,GAAI6c,YACrCle,EAAIw+C,GAAU,CAACp6C,OAAQ,CAAC/C,EAAGo9C,GAAWvgC,YAEtCgG,EAASrC,GAAQ,CAACzd,OAAQ,CAACsH,KAAM4+B,EAAG3+B,KAAM3L,GAAIke,YAOpD,OALAA,EAAQjT,YAAY69B,EAAS59B,QAC7BgT,EAAQjT,YAAYq/B,EAAEp/B,QACtBgT,EAAQjT,YAAYwzC,EAASvzC,QAC7BgT,EAAQjT,YAAYjL,EAAEkL,QAEfgZ,EAEP,OAAOlG,GAAK,CAACG,MAAO,CAACxe,MAAO0B,EAAE1B,MAAOkB,MAAOQ,EAAER,MAAOud,MAAO,GAAIF,WAEpE,GCUO,MAAM6gC,GAA2B,CACtCtgC,WAAYugC,GACZrgC,YAAa,SACbC,oBAxCEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B8d,KAACA,GAAQ5d,EAEf,GAAsB,IAAlB/Z,EAAO9H,OACT,OAAO83C,GACH,CAAChwC,OAAQ,CAACiP,MAAOjP,EAAO,IAAK8Z,UAASC,MAAO,CAACzV,IAAKqzB,KAGzD,MAAMp8B,EAAQyE,EAAO,GAAGzE,MAClBkB,EAAQuD,EAAO,GAAGvD,MAExBuD,EAAOvG,SAAQuR,IACb1K,EAAKu6C,kBACDt/C,EAAOyP,EAAEzP,MACT,yDACJ+E,EAAK4B,OACDzF,IAAUuO,EAAEvO,OACZ,IAAM,yDAAwD,IAGpE,MAAMyhC,EAAwC,GAQxCpe,EAAS/Q,GAAO,CAAC/O,OAPCA,EAAOxE,KAAIwP,IACjC,MAAM8vC,EACF9K,GAAW,CAAChwC,OAAQ,CAACiP,MAAOjE,GAAI8O,UAASC,MAAO,CAACzV,IAAKqzB,KAE1D,OADAuG,EAAwB5lC,KAAKwiD,GACtBA,CAAS,IAG8BhhC,UAASC,MAAO,CAAC4d,UAIjE,OAFAuG,EAAwBzkC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UAEpDgZ,CACT,SCvCai7B,GAWXnkD,YAAY05B,EAAkB+nB,GAN9BvhD,mBAAgB,CAAC,KACjBA,cAAW,uBACXA,mBAA0C,CAAC,GAAI,EAAG,GAElDA,WAAO,EAGLA,KAAKyL,YAAc81C,EAAS78C,KACxB,CAAC+8C,EAAG38C,IAAM28C,EAAE,GAAqBjoB,EAAO10B,GAAK28C,EAAE,KACnDzhD,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDg8C,EAAS78C,KAAI,CAACuC,EAAGnC,KACf9E,KAAK2G,UAAY,OAAO7B,gBAAgB,IAE1C9E,KAAKw5B,OAASA,EACdx5B,KAAKqY,UAAY,MAGnBrS,cACE,MAAM6B,EAAO7H,KAAKw5B,OAAOp4B,OACnBqH,EAAOpC,GAAkBwB,GAEzBskB,EAAQnsB,KAAKw5B,OAAO90B,KAAI,CAACuC,EAAGnC,IAAM,eAAeA,SAAQgB,KAAK,KAC9DoM,EAAMlS,KAAKw5B,OACA90B,KACG,CAACuC,EAAGnC,IAAM,eAAeA,yBACrB+C,EAAO,EAAI,IAAI/C,KAAO,OAC7BgB,KAAK,KAChBo+C,EAAar8C,EAAO,EAAI,GAAGY,KAAQ0jB,KAAW,GAAGA,IACjDg4B,EAAWt8C,EAAO,EAAI,GAAGY,KAAQyJ,KAAS,GAAGA,IAE7CkyC,EAAmBv8C,EAAO,EAAI,oBAAsB,eACpDw8C,EAAoBx8C,EAAO,EAAI,mBAAqB,cAEpDg6C,EAAiBh6C,EAAO,EAC1B,CAAC,YAAa,YAAa,YAAa,aAAarB,MAAM,EAAGqB,GAC9D,SAkBJ,MAhBiB,WACbsa,GAAK,2EAEW+hC,2BACFC,wEAGNC,QAAuBC,4KAIIxC,+CCnDpC,MAAMyC,GACRvhC,IAGC,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNq4C,SAACA,EAAQgD,cAAEA,GAAiBthC,EAClC,GAAIs+B,EAASh0C,OAAMk0C,GAAKj4C,EAAKC,YAAYg4C,EAAG,CAAC,EAAG,MAC9C,OAAOj7B,GAAS,CAACtd,OAAQ,CAAC/C,KAAI6c,YAEhC,GAAoC,IAAhCxZ,EAAK2M,cAAchQ,EAAE1B,OAAc,CAMrC,OAAOqe,GAAK,CACVE,UACAC,MAAO,CAACxe,MALU88C,EAAS78C,KACzB,CAAC+8C,EAAG38C,IACA28C,EAAE,GAAqBt7C,EAAE1B,MAAMK,GAAK28C,EAAE,KAGhBv+B,MAAOqhC,EAAe5+C,MAAOQ,EAAER,SAG/D,MAAM0d,EAAc,CAAC,CAAC5a,KAAM,UAAWkE,KAAM,CAAC43C,KAC9ChD,EAAS78C,KAAI+8C,GAAKp+B,EAAY7hB,KAAK,CAACiH,KAAM,QAASkE,KAAM,CAAC80C,EAAE,GAAIA,EAAE,QAClE,MAAMz8C,EAAU,IAAIi/C,GAAW99C,EAAE1B,MAAO88C,GACxC,OAAOv+B,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAO0d,EAAY,EAG5DmhC,GAA4B,CACvCjhC,WAAYkhC,GACZhhC,YAAa,SACbC,WAAY4gC,IC5BDI,GAA0B,CACrCnhC,WAAYohC,GACZlhC,YAAa,SACbC,WAPiB+D,GAAiB,CAClCN,OAAQ1M,GAAayC,OCUhB,MAAM0nC,GAA4B,CACvCrhC,WAAYshC,GACZphC,YAAa,SACbC,oBAZoBX,GAEpB,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpB5c,EAACA,EAAC45C,MAAEA,GAAS72C,EAEblE,EAAU,IAAIghB,GAAgBvL,GAAasC,MAAO5W,EAAE1B,MAAOs7C,EAAMt7C,OACvE,OAAOue,EAAQ5L,iBAAiBpS,EAAS,CAACmB,EAAG45C,GAAQ,UACvD,GCCO,MAAM+E,GAA2B,CACtCvhC,WAAY+xB,GACZ7xB,YAAa,SACbC,oBAZEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN23B,KAACA,EAAI4H,SAAEA,GAAYxlB,EAEzB,OAAO2b,GAAOz4B,EAAG06B,EAAM4H,EAAU,OAAQzlB,EAC3C,GCAa+hC,GAA4B,CACvCxhC,WAAYyhC,GACZvhC,YAAa,SACbC,WAVGX,IACC,MAAMC,QAACA,EAAOC,MAAEA,GAASF,GACnBoJ,MAACA,EAAKgN,KAAEA,EAAIE,KAAEA,EAAI1zB,MAAEA,GAASsd,EAC7B3R,EAASuyB,GAAa1X,EAAOgN,EAAME,EAAM1zB,GAC/C,OAAOqd,EAAQnP,eAAe,CAACvC,EAAOlQ,QAASuE,EAAO2L,EAAO,GCLtD2zC,GAAUx9B,GAAiB,CAACN,OAAQ1M,GAAa4B,MAEjD6oC,GAA8B,CACzC3hC,WAAY4hC,GACZ1hC,YAAa,SACbC,WAAYuhC,ICJDG,GAAiC,CAC5C7hC,WAAY8hC,GACZ5hC,YAAa,SACbC,WALwBwD,GAAgB,CAACC,OAAQ9J,GAAYgB,cCElDinC,GAA2B,CACtC/hC,WAAYgiC,GACZ9hC,YAAa,SACbC,WALkBwD,GAAgB,CAACC,OAAQ9J,GAAYiB,QCE5CknC,GAA4B,CACvCjiC,WAAYkiC,GACZhiC,YAAa,SACbC,WALmBwD,GAAgB,CAACC,OAAQ9J,GAAYkB,eCD7CmnC,GAUX5lD,YACIq9B,EAA8CwoB,EAC9CC,GAPJ5lD,mBAAgB,CAAC,KACjBA,cAAW,yDACXA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAKLA,KAAKyL,YAAc,CAAC0xB,EAAW,GAAIwoB,EAAWC,EAAUzoB,EAAW,IAEnEn9B,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAE9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKqY,UAAY,iBAGnBrS,cA6CE,MA5CiB,WACbmc,GAAK,ovDCCN,MAAM0jC,GAAqC,CAChDtiC,WAAYuiC,GACZriC,YAAa,SACbC,oBA3B6BX,GAK7B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BgjC,OAACA,GAAU78C,GACX88C,aAACA,EAAYzlD,KAAEA,EAAI0lD,iBAAEA,GAAoBhjC,GAExC0iC,EAAWC,GAAYrlD,EAIxB8iB,EAAc,CAClB,CAAC5a,KAAM,UAAWkE,KAAM,CAJLq5C,GAAgBL,EAAY,EAAI,EAAM,EACvCK,GAAgBJ,EAAW,EAAI,EAAM,IAIvD,CAACn9C,KAAM,UAAWkE,KAAM,CAHIs5C,EAAmB,GAAM,KAMjDjhD,EAAU,IAAI0gD,GAChBK,EAAOthD,MAA2CkhD,EAAWC,GAEjE,OAAO5iC,EAAQ5L,iBAAiBpS,EAAS,CAAC+gD,GAAS,UAAW1iC,EAChE,SCxBa6iC,GAWXpmD,YACIq9B,EAA8CwoB,EAC9CC,EAAkBK,GARtBjmD,mBAAgB,CAAC,KACjBA,cAAW,kDACXA,mBAA0C,CAAC,GAAI,EAAG,GAElDA,WAAO,EAKLA,KAAKyL,YAAc,CAAC0xB,EAAW,GAAIwoB,EAAWC,EAAUzoB,EAAW,IAEnEn9B,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAE9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKimD,iBAAmBA,EACxBjmD,KAAKqY,UAAY,iBAAiB4tC,IAGpCjgD,cACE,IAAImgD,EAEFA,EADEnmD,KAAKimD,iBAEH,0FAGgB,kDAmCtB,MAhCiB,WACb9jC,GAAK,0uBAmBuBgkC,2bC5B7B,MAAMC,GAA4C,CACvD7iC,WAAY8iC,GACZ5iC,YAAa,SACbC,oBA5BoCX,GAKpC,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BgjC,OAACA,GAAU78C,GACX88C,aAACA,EAAYC,iBAAEA,EAAgB1lD,KAAEA,GAAQ0iB,GAExC0iC,EAAWC,GAAYrlD,EAKxB8iB,EAAc,CAClB,CAAC5a,KAAM,UAAWkE,KAAM,CALLq5C,GAAgBL,EAAY,EAAI,EAAM,EACvCK,GAAgBJ,EAAW,EAAI,EAAM,IAKvD,CAACn9C,KAAM,UAAWkE,KAAM,CAHRq5C,EAAe,GAAM,KAMjChhD,EAAU,IAAIkhD,GAChBH,EAAOthD,MAA2CkhD,EAAWC,EAC7DK,GACJ,OAAOjjC,EAAQ5L,iBAAiBpS,EAAS,CAAC+gD,GAASA,EAAOpgD,MAAO0d,EACnE,SCzBaijC,GAWXxmD,YACIq6C,EACAoM,GAZJvmD,iBAAwB,GAIxBA,mBAAgB,CAAC,KAEjBA,mBAA0C,CAAC,GAAI,EAAG,GAElDA,WAAO,EAKLA,KAAKyL,YAAc0uC,EACnBn6C,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAK2G,SAAW,+EAEhB3G,KAAKqY,UAAY,SACjBrY,KAAKyL,YAAc0uC,EAEM,iBAAdoM,GACTvmD,KAAK2G,UAAY,oBACjB3G,KAAKwmD,YAAc,wCACnBxmD,KAAKqY,WAAa,WAElBrY,KAAK2G,UAAY,0BACjB3G,KAAKwmD,YAAc,mDACnBxmD,KAAKqY,WAAa,SAItBrS,cAsBE,MArBiB,aACXmc,GAAK,onBAWDniB,KAAKwmD,uTC5CZ,MAAMC,GAAuC,CAChDljC,WAAYmjC,GACZjjC,YAAa,SACbC,WAAY,EAAExa,SAAQ+Z,QAAOD,cAC3B,MAAM6xB,MAACA,GAAS3rC,GACVy9C,QAACA,EAAOJ,UAAEA,EAASK,OAAEA,GAAU3jC,EAC/BoE,EAAgBrE,EAEhBhe,EAAU,IAAIshD,GAAezR,EAAmBpwC,MAAO8hD,IACtDM,EAASC,GACZn9C,EAAao9C,eAAeH,EAAQ/R,EAAMpwC,MAAM,GAAIowC,EAAMpwC,MAAM,IAC9D4e,EAAc,CACd,CAAC5a,KAAM,UAAWkE,KAAM,CAACk6C,IACzB,CAACp+C,KAAM,UAAWkE,KAAM,CAACm6C,IACzB,CAACr+C,KAAM,UAAWkE,KAAM,CAACrI,KAAK0iD,IAAIL,KAClC,CAACl+C,KAAM,UAAWkE,KAAM,CAACrI,KAAK2iD,IAAIN,MAGf,iBAAdJ,EACTljC,EAAY7hB,KACR,CAACiH,KAAM,UAAWkE,KAAM,CAACyN,OAAO8sC,WAAWX,EAAUY,QAAQ,OAEjE9jC,EAAY7hB,KAAK,CAACiH,KAAM,UAAWkE,KAAM45C,IAK3C,OAFel/B,EAAcjQ,iBACzBpS,EAAS,CAAC6vC,GAAQA,EAAMlvC,MAAO0d,EACtB,GCzBN+jC,GAA4B,CACvC7jC,WAAY8jC,GACZ5jC,YAAa,SACbC,WALEwD,GAAgB,CAACC,OAAQ9J,GAAYmB,MAAO4I,cAAe0c,YCFlDwjB,GAeXxnD,YACIynD,EAAyB1J,EAAkB2J,EAC3CC,EAAqB7iD,EAAmBH,EACxC4S,EAAuBwjB,GAAiB,GAjB5C76B,mBAAgB,CAAC,UAAW,WAO5BA,mBAA0C,CAAC,GAAI,EAAG,GAIlDA,aAAS,EAOPA,KAAKyL,YAAchH,EACnBzE,KAAKyI,KAAO4O,EACZrX,KAAK66B,eAAiBA,EACtB76B,KAAKyH,eAAiB+E,GAAmB+6C,GAEzCvnD,KAAKqL,SACDG,GAAgBxL,KAAKyH,eAAgB8/C,EAAevnD,KAAKuF,eAC7DvF,KAAK0nD,uBAAyB7J,EAAW,EACzC79C,KAAKqY,UAAY,WAAWmvC,KAAeC,KACvCznD,KAAK0nD,0BAA0BrwC,KAAewjB,IAClD,MAAM8sB,EAActhD,GAAkBzB,EAAQxD,QAC9CpB,KAAK2G,SAAW,4BAA4BghD,gBAC5C3nD,KAAKynD,YAAcA,EACnBznD,KAAKwnD,YAAcA,EAGrBxhD,cACE,IAAI4hD,EAAgB,GACK,IAArB5nD,KAAKwnD,YACPI,EAAgB,YACc,IAArB5nD,KAAKwnD,cACdI,EAAgB,gBAElB,MAAMC,EAAiB,cAAcD,KAE/B9J,EAAe99C,KAAK0nD,uBAAyB,sBACA,mBAEnD,IAAII,EAAkB,GAClBC,EAAgC,GACC,IAAjC/nD,KAAKyH,eAAetB,EAAE/E,QACxB0mD,EAAkB,iBAClBC,EAAgC,0GAKU,IAAjC/nD,KAAKyH,eAAetB,EAAE/E,SAC/B0mD,EAAkB,uCAClBC,EAAgC,ugBAalC,MAEMC,EAAiB,cADnBnjD,MAAMkI,KAAK,CAAC3L,OAAQpB,KAAKynD,cAAc,CAACxgD,EAAGy0B,IAAQ,UAAUA,OACd51B,KAAK,SA4CxD,MAlBiB,SACfiiD,cAEE5lC,GAAK,6PAK6B0lC,qEACoB/J,+DAG9Cp4C,GAAe1F,KAAKyI,MAAM,MAAUu/C,2DACCF,oBArC/B,EAACG,EAAa1S,KAC9B,IAAI5yB,EAAmB,aAAaslC,mBAAqB1S,MACvC,YAAdv1C,KAAKyI,OACPka,EAAmB,uFAGc4yB,+EAEY0S,+OAMV1S,8FAMrC,MAAM2S,EAAqB,eAAeD,mBAAqB1S,OAC/D,OAAOv1C,KAAK66B,eAAiBlY,EAAmBulC,CAAkB,EAkB5DC,CAAU,qBAAsB,uCChErC,MAAMC,GAAgC,CAC3C7kC,WAAY8kC,GACZ5kC,YAAa,SACbC,oBAjDwBX,GAKxB,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BuI,QAACA,EAAOqP,QAAEA,GAAWzxB,GACrBzE,MAACA,GAASwe,GAEVsV,UAACA,EAASqC,WAAEA,EAAUpC,UAAEA,EAAS5zB,QAAEA,EAAO8rB,WAAEA,GAC9C/mB,EAAa2+C,gBAAgB3tB,EAASrP,EAAS7mB,GAE7Cq2B,EAAe,CAACpK,EAAa8H,EAAWA,GAE9C,GAAmB,IAAf9H,EACF,OAAO1N,EAAQnP,eAAepP,EAAO6mB,EAAQ3lB,OAG/C,MAAMu4C,EAAiBv6B,GACnB,CAACza,OAAQ,CAAC/C,EAAGmlB,GAAUtI,UAASC,MAAO,CAACxe,MAAO,CAACm2B,EAAYrC,MAC1D4lB,EAAWx6B,GACb,CAACza,OAAQ,CAAC/C,EAAGw0B,GAAU3X,UAASC,MAAO,CAACxe,MAAO,CAACm2B,EAAYpC,MAE1D/vB,EAAO01C,EAASx4C,MAChBT,EACF4d,GAAK,CAACE,UAASC,MAAO,CAACxe,MAAOq2B,EAAc5X,MAAO,EAAGvd,MAAO8C,KAE3D4a,EAAc,CAClB,CAAC5a,KAAM,QAASkE,KAAM,CAAC4rB,IAAa,CAAC9vB,KAAM,QAASkE,KAAM/H,GAC1D,CAAC6D,KAAM,QAASkE,KAAM,CAHXnD,EAAK2M,cAAcgoC,EAAS15C,UAKnCO,EAAU,IAAIsiD,GAChBnJ,EAAS15C,MAAO8zB,EAAW2lB,EAAez5C,MAAMrD,OAChD+8C,EAAS15C,MAAMrD,OAAQwD,EAASk2B,EAAcryB,GAC5CI,EAAMma,EAAQ5L,iBAChBpS,EAAS,CAACm5C,EAAUD,GAAiBz1C,EAAM4a,EAAane,GAEtDgnC,EAAWvoB,GAAQ,CAACza,OAAQ,CAAC/C,EAAG0C,GAAMma,UAASC,MAAO,CAACxe,WAM7D,OAJAue,EAAQjT,YAAYmuC,EAAeluC,QACnCgT,EAAQjT,YAAYouC,EAASnuC,QAC7BgT,EAAQjT,YAAYlH,EAAImH,QAEjBk8B,CACT,SCjDaqc,GAWXzoD,YAAY0oD,EAAe/jD,EAAiBoD,GAV5C7H,mBAAgB,CAAC,IAAK,IAAK,KAK3BA,mBAA0C,CAAC,GAAI,EAAG,GAGlDA,WAAO,EAGLA,KAAKyL,YAAchH,EACnBzE,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAEhDvF,KAAKwoD,MAAQA,EACbxoD,KAAK6H,KAAOA,EACZ7H,KAAKqY,UAAY,SAGnBrS,cAEE,IAAIyiD,EACAC,EACJ,GAAI1oD,KAAK6H,KAAO,EACd,MAAM7F,MAAM,kBAAkBhC,KAAK6H,6BAGrC,GAAkB,IAAd7H,KAAK6H,KACP6gD,EAAW,QACXD,EAAU,YACL,CACL,MAAMnK,EAAgB,CAAC,UAAW,UAAW,UAAW,WAClDqK,EAAa,GACbC,EAAc,GACpB,IAAK,IAAI9jD,EAAI,EAAGA,EAAI9E,KAAKyL,YAAYrK,OAAQ0D,IAC3C8jD,EAAYpnD,KAAK,GAAG88C,EAAcx5C,MAC9BA,EAAI9E,KAAKwoD,OACXG,EAAWnnD,KAAK,GAAG88C,EAAcx5C,MAGrC2jD,EAAUE,EAAW7iD,OACrB4iD,EAAWE,EAAY9iD,OAgBzB,MAbiB,WACbqc,GAAK,iIAGesmC,+EAEeC,sEAEAA,+CC1CpC,MAAMG,GAA6B,CACxCtlC,WAAYulC,GACZrlC,YAAa,SACbC,oBAdqBX,GAErB,MAAM7Z,OAACA,EAAM8Z,QAAEA,GAAWD,GACpByyB,UAACA,EAASthC,EAAEA,EAAC60C,EAAEA,GAAK7/C,EAEpBlE,EACF,IAAIujD,GAAc/S,EAAU/wC,MAAMrD,OAAQ8S,EAAEzP,MAAOyP,EAAEzP,MAAMrD,QAC/D,OAAO4hB,EAAQ5L,iBACXpS,EAAS,CAACwwC,EAAWthC,EAAG60C,GAAI7gC,EAAWhU,EAAEvO,MAAOojD,EAAEpjD,OACxD,GCRaqjD,GAA8B,CACzCzlC,WAAY0lC,GACZxlC,YAAa,SACbC,WALqBwD,GAAgB,CAACC,OAAQ9J,GAAYoB,WCI/CyqC,GAA0B,CACrC3lC,WAAY4lC,GACZ1lC,YAAa,SACbC,WALiBwD,GAAgB,CAACC,OAAQ9J,GAAYqB,OCE3C0qC,GAA2B,CACtC7lC,WAAY8lC,GACZ5lC,YAAa,SACbC,WALkBwD,GAAgB,CAACC,OAAQ9J,GAAYsB,QCA5C2qC,GAAM7hC,GACf,CAACN,OAAQ1M,GAAa2B,IAAKgL,cAAemiC,GAAQ7hC,iBAAiB,IAE1D8hC,GAA0B,CACrCjmC,WAAYkmC,GACZhmC,YAAa,SACbC,WAAY4lC,ICsCP,MAAMI,GAA8B,CACzCnmC,WAAYomC,GACZlmC,YAAa,SACbC,oBAzCEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B6mC,OAACA,GAAU1gD,GACXsE,IAACA,GAAOyV,EAERkjB,EAAO38B,EAAKu3B,eAAe,CAACvzB,GAAMo8C,EAAOnlD,OAEzColD,EAAWtlD,GAAI,CACnB2E,OAAQ,CAAC/C,EAAGyjD,GACZ5mC,UACAC,MAAO,CAACkmB,iBAAkBhD,EAAMsC,UAAU,KAGtCqhB,EAAgBngD,EAAam/B,qBAAqB+gB,EAASplD,MAAO0hC,GAElE4jB,EACFpmC,GAAQ,CAACza,OAAQ,CAAC/C,EAAG0jD,GAAW7mC,UAASC,MAAO,CAACxe,MAAOqlD,KACtD3lC,EACFmlC,GAAI,CAACpgD,OAAQ,CAACib,EAAGylC,EAAQ1wC,EAAG6wC,GAAoB/mC,YAC9C9J,EAAIiR,GAAI,CAACjhB,OAAQ,CAAC/C,EAAGge,GAAInB,YACzBgnC,EACF10C,GAAI,CAACpM,OAAQ,CAAC/C,EAAG+S,GAAI8J,UAASC,MAAO,CAAC4d,KAAMsF,EAAMsC,UAAU,KAC1DwhB,EACFtmC,GAAQ,CAACza,OAAQ,CAAC/C,EAAG6jD,GAAShnC,UAASC,MAAO,CAACxe,MAAOqlD,KACpDjhD,EACFo8C,GAAQ,CAAC/7C,OAAQ,CAACib,EAAGjL,EAAGA,EAAG+wC,GAAiBjnC,YAShD,OAPAA,EAAQjT,YAAY85C,EAAS75C,QAC7BgT,EAAQjT,YAAYg6C,EAAkB/5C,QACtCgT,EAAQjT,YAAYoU,EAAEnU,QACtBgT,EAAQjT,YAAYmJ,EAAElJ,QACtBgT,EAAQjT,YAAYi6C,EAAOh6C,QAC3BgT,EAAQjT,YAAYk6C,EAAej6C,QAE5BnH,CACT,GCoBaqhD,GAAqC,CAChD3mC,WAAY4mC,GACZ1mC,YAAa,SACbC,WA/D6BX,IAK7B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN8iC,WAACA,EAAUuV,SAAEA,GAAYt+B,EAE/BzZ,EAAK4B,OACDjF,EAAE1B,MAAMrD,QAAU,GAClB,IAAM,0EAGV,MAAM44B,EAAOgS,EAAWpN,QAAO,CAACza,EAAGjL,IAAMiL,EAAIjL,IAEvCkxC,EAA4C,CAAC,CAAC,EAAG,IACvDA,EAAiB5oD,QAAQ+/C,GACzB,IAAK,IAAIz8C,EAAI,EAAIknC,EAAW5qC,OAAQ0D,EAAIqB,EAAE1B,MAAMrD,SAAU0D,EACxDslD,EAAiB5oD,KAAK,CAAC,EAAG,IAG5B,MAAMknC,EAAY,GAEZ2hB,EAAU/F,GAAM,CACpBp7C,OAAQ,CAAC/C,KACT6c,UACAC,MAAO,CAACs+B,SAAU6I,EAAkB7F,cAAe,KAG/C+F,EACF3gD,EAAawiC,YAAYke,EAAQ5lD,MAAOunC,EAAYhS,GAAM,GAExDuwB,EAAoC5gD,EAAa0iC,YACnDie,EAAoBlpD,OAAQ4qC,EAAW5qC,QAAQ,GAE7C05B,EACFnxB,EAAa4iC,oBAAoB8d,EAAQ5lD,MAAOunC,EAAYhS,GAAM,GAEhEwwB,EAAkB7mC,GACpB,CAACza,OAAQ,CAAC/C,EAAGkkD,GAAUrnC,UAASC,MAAO,CAACxe,MAAO6lD,KAE7CG,EAAWxpC,GAAU,CACzB/X,OAAQ,CAAC/C,EAAGqkD,GACZxnC,UACAC,MAAO,CAACyd,KAAM6pB,KAGVvhC,EACFrF,GAAQ,CAACza,OAAQ,CAAC/C,EAAGskD,GAAWznC,UAASC,MAAO,CAACxe,MAAOq2B,KAQ5D,OANA4N,EAAUlnC,KAAK6oD,GACf3hB,EAAUlnC,KAAKgpD,GACf9hB,EAAUlnC,KAAKipD,GAEf/hB,EAAU/lC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UAEtCgZ,CAAM,SC9DF0hC,GAUX5qD,YAAY8hB,EAAkBme,GAT9B//B,mBAAgB,CAAC,KAKjBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAIL,MAAMyL,EAAwB,IAAI5G,MAAM+c,EAAOxgB,QAC/C,IAAK,IAAI0D,EAAI,EAAGA,EAAI2G,EAAYrK,OAAQ0D,IACtC2G,EAAY3G,GAAK8c,EAAO9c,GAAKi7B,EAAKj7B,GAEpC9E,KAAKyL,YAAcA,EACnBzL,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAK6H,KAAO7H,KAAKyL,YAAYrK,OAC7BpB,KAAKqY,UAAY,OAGnBrS,cACE,MAAMmlC,EAcV,SAAyBtjC,EAAc8iD,EAAgB,IACrD,GAAI9iD,GAAQ,EACV,MAAM7F,MAAM,iBAAiB6F,0BAE/B,GAAa,IAATA,EACF,MAAO,YAAY8iD,WAGrB,MAAMrM,EAAgB,CAAC,UAAW,UAAW,UAAW,WAClDnT,EAAe,GACrB,IAAK,IAAIrmC,EAAI,EAAGA,EAAI+C,EAAM/C,IACxBqmC,EAAa3pC,KAAK,IAAI88C,EAAcx5C,QAAQ6lD,WAAuB7lD,OAErE,OAAOqmC,EAAarlC,MACtB,CA5ByBy4C,CAAgBv+C,KAAK6H,KAAM,aAUhD,MARiB,WACbsa,GAAK,8IAG4BgpB,2CC3BzByf,GACZ5/C,GAEF,MAAM9B,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASjY,GAC3B7E,EAACA,GAAK+C,GACN62B,KAACA,GAAQ9c,EAGf,GAAID,EAAQ3I,mBAAmB,CAAClU,KAAmB,WAAZA,EAAER,OACrCQ,EAAE1B,MAAMrD,QAAU,EAAG,CAGvB,MAAMuL,EAAOqW,EAAQjQ,SAAS5M,EAAE6J,QAC1BkT,EAAoB,WAAZ/c,EAAER,MACXgH,EAAsBjI,KAAIC,GAAK6E,EAAK4K,aAAazP,KAClDgI,EACEk+C,EAAMjpD,EAAOuE,EAAE1B,MAAO0B,EAAER,MAAOud,GAC/BqU,EAASoN,GAAYkmB,EAAK9qB,GAChC,OAAO/c,EAAQnP,eAAe0jB,EAAO9yB,MAAO8yB,EAAO5xB,MAAO4xB,EAAOjmB,QAGnE,MAAMtM,EAAU,IAAI0lD,GAAYvkD,EAAE1B,MAAOs7B,GAGzC,OAFe/c,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAG1D,CAEO,MAAMmlD,GAA2B,CACtCvnC,WAAYwnC,GACZtnC,YAAa,SACbC,WAAYknC,IC8EP,MAAMI,GAAoC,CAC/CznC,WAAY0nC,GACZxnC,YAAa,SACbC,oBA3G4BX,GAK5B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BmoC,cAACA,EAAaC,aAAEA,EAAYt9B,aAAEA,GAAgB3kB,GAC9CuC,YAACA,GAAewX,GAEhBsV,UAACA,EAASqC,WAAEA,EAAUpC,UAAEA,EAAS5zB,QAAEA,EAAO8rB,WAAEA,GAC9C/mB,EAAa2+C,gBAAgB6C,EAAcD,EAAez/C,GAExDovB,GAAiB,EACvB,GAA2B,WAAvBswB,EAAaxlD,MAAoB,CACnC,MAAMizB,EAAa5V,EAAQ/O,WAA0Bi3C,GAC/CE,EAAapoC,EAAQ/O,WAA2Bk3C,GAChDE,EAAgB7hD,EAAK4K,aACvB4O,EAAQjQ,SAAS8a,EAAa7d,QAAQ,IACpCunB,EAASyM,GACXpL,EAAYwyB,EAAY3/C,EAAailB,EAAY8H,EAAWoC,EAC5DrC,EAAW3zB,EAASymD,EAAexwB,GACvC,OAAO7X,EAAQnP,eAAepI,EAAa8rB,EAAO5xB,MAAO4xB,EAAOjmB,QAGlE,MAAMwpB,EAAe,CAACpK,EAAa8H,EAAWA,GAExC8yB,EAAiB3nC,GAAQ,CAC7Bza,OAAQ,CAAC/C,EAAG+kD,GACZloC,UACAC,MAAO,CAACxe,MAAO,CAACm2B,EAAYrC,MAExBgzB,EAAgBJ,EAAa1mD,MAAMrD,OACrCuiB,GAAQ,CACNza,OAAQ,CAAC/C,EAAGglD,GACZnoC,UACAC,MAAO,CAACxe,MAAO,CAACm2B,EAAYpC,MAE9BhS,GAAS,CAACtd,OAAQ,CAAC/C,EAAGglD,GAAenoC,YAEnCva,EAAO8iD,EAAc5lD,MACrB8xB,EACFzU,EAAQnP,eAAe,GAAIpL,EAAMe,EAAKytB,oBAAoB,EAAGxuB,IAG3D4iD,EAAgB1nC,GAAQ,CAC5Bza,OAAQ,CAAC/C,EAAG0nB,GACZ7K,UACAC,MAAO,CAACxe,MAAOI,MAAMi2B,EAAa15B,QAAQ0hB,KAAK,MAE3C0oC,EACFZ,GAAK,CAAC1hD,OAAQ,CAAC/C,EAAGklD,GAAgBroC,UAASC,MAAO,CAAC8c,KAAMjF,KAGvDzX,EAAc,CAClB,CAAC5a,KAAM,QAASkE,KAAM,CAAC4rB,IACvB,CAAC9vB,KAAM,QAASkE,KAAM/H,GACtB,CAAC6D,KAAM,QAASkE,KAAM,CAJXnD,EAAK2M,cAAc,CAACykB,EAAYpC,OAO7C,OAAQoC,GACN,KAAK,EACH,MACF,KAAK,EACO,CACR,MAAM51B,EAAU,IAAIsiD,GAChB,CAAC1sB,EAAYpC,GAAYD,EAAW+yB,EAAe7mD,MAAMrD,OACzDmqD,EAAc9mD,MAAMrD,OAAQwD,EAASk2B,EAAcryB,EACnDoyB,GACJ7X,EAAQ5L,iBACJpS,EAAS,CAACumD,EAAeD,GAAiB7iD,EAAM4a,EAChDmoC,GAEN,MACF,QACY,CAER,MAAMxmD,EAAU,IAAIsiD,GAChB,CAAC1sB,EAAYpC,GAAYD,EAAW+yB,EAAe7mD,MAAMrD,OACzDq2B,EAAKhzB,MAAMrD,OAAQwD,EAASk2B,EAAcryB,EAAMoyB,GACpD7X,EAAQ5L,iBACJpS,EAAS,CAACyyB,EAAM6zB,GAAiB7iD,EAAM4a,EAAamoC,GAE1D,CAEE,MAAMxmD,EAAU,IAAIsiD,GAChB,CAAC1sB,EAAYpC,GAAYD,EAAW+yB,EAAe7mD,MAAMrD,OACzDmqD,EAAc9mD,MAAMrD,OAAQwD,EAASk2B,EAAcryB,GACvDua,EAAQ5L,iBACJpS,EAAS,CAACumD,EAAeD,GAAiB7iD,EAAM4a,EAChDmoC,IAIV,MAAMC,EAAc9nC,GAChB,CAACza,OAAQ,CAAC/C,EAAGqlD,GAAexoC,UAASC,MAAO,CAACxe,MAAOgH,KAOxD,OALAuX,EAAQjT,YAAYu7C,EAAet7C,QACnCgT,EAAQjT,YAAYw7C,EAAcv7C,QAClCgT,EAAQjT,YAAYs7C,EAAcr7C,QAClCgT,EAAQjT,YAAY0nB,EAAKznB,QACzBgT,EAAQjT,YAAYy7C,EAAax7C,QAC1By7C,CACT,GCnFO,MAAMC,GAA6B,CACxCnoC,WAAYooC,GACZloC,YAAa,SACbC,oBA1BEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN0iD,gBAACA,EAAe/qB,KAAEA,GAAQ5d,EAE1B6d,EAAQt3B,EAAKu3B,eAAeF,EAAM16B,EAAE1B,OAAO,GAC3ConD,EAAaliD,EAAamiD,iBAAiB3lD,EAAGylD,EAAiB9qB,GAE/DH,EAAQx6B,EAAE1B,MAAMrD,OAChB45B,EAAQ,IAAIn2B,MAAM87B,GAAO7d,KAAK,GAC9BviB,EAAO4F,EAAE1B,MAAM+B,QAErB,OAAOqlD,EAAWnnD,KAAIwF,IACpB,MAAMsuB,EAAY,IAAIj4B,GACtBi4B,EAAUsI,GAAS52B,EACnB,MAAM6hD,EACFvlD,GAAM,CAAC0C,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAAC+X,QAAOz6B,KAAMi4B,KAEtD,OADAwC,EAAM8F,IAAU52B,EACT6hD,CAAM,GAEjB,GCrBaC,GAA2B,CACtCzoC,WAAY0oC,GACZxoC,YAAa,SACbC,WALkBwD,GAAgB,CAACC,OAAQ9J,GAAYuB,QCC5CstC,GAA6B,CACxC3oC,WAAY4oC,GACZ1oC,YAAa,SACbC,WAAY,EAAExa,SAAQ8Z,cACpB,MAAM7c,EAACA,GAAK+C,EACNk0C,EAAgBp6B,EAChBhe,EAAU,IAAIiiB,GAAe9gB,EAAE1B,MAAO4Y,GAAYwB,QACxD,OAAOu+B,EAAchmC,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAM,GCHnDymD,GAAwC,CACnD7oC,WAAY8oC,GACZ5oC,YAAa,SACbC,WAP+B+D,GAAiB,CAChDN,OAAQ1M,GAAaoC,4BCHVyvC,GAYXxsD,YAAYorC,GAXZlrC,mBAAgB,CAAC,KAOjBA,mBAAgB,EAChBA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAGLA,KAAKyL,YAAcy/B,EACnBlrC,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,cAC5C,CAACvF,KAAKsgB,cAAe,EAAG,IAE5B,MAAM3a,EAAQU,GAAkBrG,KAAKyL,YAAYrK,QACjDpB,KAAK2G,SAAW,WAAWhB,iBAAqBA,MAChD3F,KAAKqY,UAAY,eAGnBrS,cAEE,IAAIumD,EAAY,GAChB,GAAa,IAFAvsD,KAAKyL,YAAYrK,OAG5BmrD,EAAY,iDACP,CACL,IAAIC,EAAa,EACjBD,EACIvsD,KAAKyL,YACA/G,KAAI,CAACuC,EAAGnC,KACP0nD,IACmC,IAA5BxsD,KAAKyL,YAAYrK,OACpB,6BAA6B0D,uBAAuBA,KACpD,UAAU0nD,EAAa,yBACnB1nD,uBAAuBA,QAEhCgB,KAAK,KAWhB,MARiB,YACZqc,GAAK,kJAG4BoqC,qCC+BnC,MAAME,GAAmC,CAC9ClpC,WAAYmpC,GACZjpC,YAAa,SACbC,oBA3E2BX,GAK3B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACN8xB,MACJA,EAAK9oB,IACLA,EAAGtN,QACHA,EAAO+nD,UACPA,EAASC,QACTA,EAAOC,aACPA,EAAYC,YACZA,EAAWC,eACXA,GACE9pC,GAEE+pC,iBACJA,EAAgBC,WAChBA,EAAUC,WACVA,EAAUC,UACVA,EAASC,cACTA,EACApyB,MAAOuQ,EACPr5B,IAAKm7C,EACLzoD,QAAS0oD,GAEPpyB,EAAWqyB,UACPpnD,EAAE1B,MAAOu2B,EAAO9oB,EAAKtN,EAAS+nD,EAAWC,EAASC,EAClDC,EAAaC,GAErB,IAAI/jC,EAEJ,GAAIkkC,EAEFlkC,EAASrF,GAAQ,CAACza,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAACxe,MAAOwoD,UAClD,GAAIE,GAAaC,EAAe,CAErC5jD,EAAK4B,OACDjF,EAAE1B,MAAMrD,QAAU,GAClB,IAAM,yCAAyC+E,EAAE1B,MAAMrD,WAE3D,MAAMb,EAAO26B,EAAWwT,gBAAgBnD,EAAQ8hB,EAAMC,GAEhDxgB,EAAStmC,GAAM,CAAC0C,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAAC+X,MAAOuQ,EAAQhrC,UACnEyoB,EACIrF,GAAQ,CAACza,OAAQ,CAAC/C,EAAG2mC,GAAS9pB,UAASC,MAAO,CAACxe,MAAOwoD,KAC1DjqC,EAAQjT,YAAY+8B,EAAO98B,YACtB,CAEL,GAD2BgT,EAAQ3I,mBAAmB,CAAClU,IAC/B,CACtB,MAAMmL,EAAS0R,EAAQjQ,SAAS5M,EAAE6J,QAC5BknB,EAAOt1B,EAAOuE,EAAE1B,MAAO0B,EAAER,MAAO2L,GAChCmlB,EACF6N,GAAoB0oB,EAAkB91B,EAAMo2B,EAAU/hB,GAC1DviB,EAAShG,EAAQnP,eAAeo5C,EAAY9mD,EAAER,MAAO8wB,EAAanlB,YAC7D,CACL,MAAMtM,EAAU,IAAIsnD,GAAoBU,GAClC3pC,EACF,CAAC,CAAC5a,KAAM,QAASkE,KAAM4+B,GAAS,CAAC9iC,KAAM,QAASkE,KAAM2gD,IACpD72B,EACFzT,EAAQ5L,iBAAiBpS,EAAS,CAACmB,GAAIA,EAAER,MAAO0d,GACpD2F,EAASrF,GACL,CAACza,OAAQ,CAAC/C,EAAGswB,GAAezT,UAASC,MAAO,CAACxe,MAAOwoD,KACxDjqC,EAAQjT,YAAY0mB,EAAazmB,SAIrC,OAAOgZ,CACT,GC/CO,MAAMwkC,GAAmC,CAC9CjqC,WAAYkqC,GACZhqC,YAAa,SACbC,oBA9B2BX,GAK3B,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BsQ,UACJA,EAASC,YACTA,EAAWC,QACXA,EAAOC,SACPA,EAAQC,SACRA,EAAQC,uBACRA,GACEzQ,GACEtW,KAACA,EAAIyyB,WAAEA,GAAcl2B,EACrBwkD,EAAQ1qC,EAAQjQ,SAASpG,EAAKqD,QAC9B29C,EAAc3qC,EAAQjQ,SAASqsB,EAAWpvB,SAEzCqlB,EAAQF,GAAgBqP,GAC3BkpB,EAAOC,EAAat6B,EAAWC,EAAaC,EAASC,EAAUC,EAC/DC,GACJ,MAAO,CACL1Q,EAAQnP,eAAe,CAACwhB,EAAOj0B,QAAS,SAAUi0B,GAClDrS,EAAQnP,eAAeurB,EAAW36B,MAAO,QAAS0wB,GAEtD,GCxBay4B,GAA2B,CACtCrqC,WAAYsqC,GACZpqC,YAAa,SACbC,WALkBwD,GAAgB,CAACC,OAAQ9J,GAAYyB,cCS5CgvC,GAUXhuD,YAAY2E,GALZzE,mBAAgB,CAAC,IAAK,WAEtBA,mBAA0C,CAAC,IAAK,EAAG,GACnDA,WAAO,EAGLA,KAAKyL,YAAchH,EACnBzE,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAK2G,SAAW,sFAEhB3G,KAAKqY,UAAY,OAGnBrS,cAqEE,MApEiB,aACXmc,GAAK,w+EAuEF4rC,GAUXjuD,YAAY2E,GALZzE,mBAAgB,CAAC,IAAK,WAEtBA,mBAA0C,CAAC,IAAK,EAAG,GACnDA,WAAO,EAGLA,KAAKyL,YAAchH,EACnBzE,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAKhDvF,KAAK2G,SAAW,6CAChB3G,KAAKqY,UAAY,QAGnBrS,cA6DE,MA5DiB,aACXmc,GAAK,+3ECzHf,SAAS6rC,GACLhrC,EAAwBpP,GACP,OAAfA,GACFoP,EAAQjT,YAAY6D,EAAW5D,OAEnC,CAEA,SAASi+C,GAAc70B,GACrB,IAAI80B,EAAO,EACX,KAAOA,EAAO90B,GACZ80B,GAAQ,EAEV,OAAOA,CACT,CAuIO,MAAMC,GAA2B,CACtC5qC,WAAY6qC,GACZ3qC,YAAa,SACbC,oBArIEX,GAEF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B5c,EAACA,GAAK+C,GACNitB,EAACA,EAAC6J,OAAEA,GAAS/c,EAEbuW,EAASrzB,EAAE1B,MACXw7B,EAAUzG,EAAOA,EAAOp4B,OAAS,GAEvC,GAAI4hB,EAAQ3I,mBAAmB,CAAClU,IAAK,CACnC,MAAMwwB,EAAQ3T,EAAQjQ,SAAS5M,EAAE6J,SAC1BmwB,EAAaC,GAChByE,GAAYlO,EAAO6C,EAAQrzB,EAAER,MAA0BwwB,EAAG6J,GAE9D,MAAO,CACLhd,EAAQnP,eACJssB,EAAY17B,MAAO07B,EAAYx6B,MAAOw6B,EAAY7uB,QACtD0R,EAAQnP,eACJusB,EAAe37B,MAAO27B,EAAez6B,MAAOy6B,EAAe9uB,SAInE,GAAU,IAAN6kB,EAEF,OADAqD,EAAOA,EAAOp4B,OAAS,GAAK,EACrB,CACL4hB,EAAQnP,eAAe2lB,EAAQrzB,EAAER,MAAO,IACxCqd,EAAQnP,eAAe2lB,EAAQ,QAAS,KAI5C,GAAgB,IAAZyG,EACF,MAAO,CACL95B,EAAG2c,GAAK,CAACG,MAAO,CAACxe,MAAO+0B,EAAQ7zB,MAAO,QAASud,MAAO,GAAIF,aAK/D,MACMkd,EADQ12B,EAAK2M,cAAcqjB,GACXyG,EAChBouB,EAAM1qC,GAAQ,CAACza,OAAQ,CAAC/C,KAAI8c,MAAO,CAACxe,MAAO,CAACy7B,EAAOD,IAAWjd,YAE9DsrC,EAAQL,GAAc93B,GACtBo4B,EAAcN,GAAchuB,GAMlC,IAAI3U,EAAsB,KAK1B,MAAMkjC,EAAY,IAAkB,OAAZljC,EAAmB,CAAC+iC,EAAKA,GAAO,CAACA,EAAK/iC,GAExDmjC,EAAU,CAACC,EAAaC,EAAalqD,KACzC,MAAMyE,EAASslD,IACTxpD,EAAU,IAAI8oD,GAAYrpD,GAE1BmqD,EAAkB,CACpB,CAACnmD,KAAM,QAASkE,KAAM,CAACszB,IACvB,CAACx3B,KAAM,QAASkE,KAAM,CAHI,OAAZ2e,EAAmB,EAAI,IAIrC,CAAC7iB,KAAM,UAAWkE,KAAM,CAACyN,OAAOmtB,oBAChC,CAAC9+B,KAAM,QAASkE,KAAM,CAAC+hD,IACvB,CAACjmD,KAAM,QAASkE,KAAM,CAACgiD,KAErBE,EAAcvjC,EACpBA,EAAUtI,EAAQ5L,iBACdpS,EAASkE,EAAQ,QAAS0lD,GAC9BZ,GAAoChrC,EAAS6rC,EAAY,EAI3D,IAAK,IAAIC,EAAM,EAAGA,EAAMR,EAAOQ,GAAO,EAAG,CACvC,MAAMJ,EAAY,EAANI,EACZ,IAAK,IAAIH,EAAMG,EAAKH,GAAO,EAAGA,GAAO,EACnCF,EAAQC,EAAKC,EAAK,CAACzuB,EAAOquB,IAK9B,IAAK,IAAIzP,EAAcyP,EAAazP,EAAcwP,EAAOxP,GAAe,EAAG,CACzE,MAAM51C,EAASslD,IACTO,EAAe,IAAIhB,GAAa,CAAC7tB,EAAO4e,EAAc,IAEtDkQ,EAAmB,CACrB,CAACvmD,KAAM,QAASkE,KAAM,CAACszB,IACvB,CAACx3B,KAAM,QAASkE,KAAM,CAHI,OAAZ2e,EAAmB,EAAI,IAIrC,CAAC7iB,KAAM,QAASkE,KAAM,CAAC2hD,KAErBO,EAAcvjC,EACpBA,EAAUtI,EAAQ5L,iBACd23C,EAAc7lD,EAAQ,QAAS8lD,GACnChB,GAAoChrC,EAAS6rC,GAG7C,MAAMC,EAAMR,EAAQ,EACdI,EAAY,EAANI,EACZ,IAAK,IAAIH,EAAMG,EAAKH,GAAO,EAAGA,GAAO,EACnCF,EAAQC,EAAKC,EAAKrjC,EAAQ7mB,OAK9B,IAAIoqD,EAAcvjC,EAClBA,EAAU9kB,GACN,CAAC0C,OAAQ,CAAC/C,EAAGmlB,GAAUtI,UAASC,MAAO,CAAC+X,MAAO,EAAGz6B,KAAM,CAAC2/B,EAAO/J,MACpE63B,GAAoChrC,EAAS6rC,GAG7C,IAAIv9C,EAASktC,GACT,CAACt1C,OAAQ,CAAC/C,EAAGkoD,EAAK/iC,WAAUtI,UAASC,MAAO,CAAC4d,KAAM,EAAG4d,UAAW,KACrEuP,GAAoChrC,EAASqrC,GAI7C,MAAMzlC,EAAW4Q,EAAOhzB,MAAM,GAAI,GAClCoiB,EAASpnB,KAAK20B,GAEd04B,EAAcvjC,EACdA,EAAU3H,GAAQ,CAACza,OAAQ,CAAC/C,EAAGmlB,GAAUrI,MAAO,CAACxe,MAAOmkB,GAAW5F,YACnEgrC,GAAoChrC,EAAS6rC,GAE7C,MAAMI,EAAa39C,EAInB,OAHAA,EAASqS,GAAQ,CAACza,OAAQ,CAAC/C,EAAGmL,GAAS2R,MAAO,CAACxe,MAAOmkB,GAAW5F,YACjEgrC,GAAoChrC,EAASisC,GAEtC,CAAC39C,EAAQga,EAClB,SCzJa4jC,GAUXpvD,YAAY0H,GATZxH,mBAAgB,CAAC,QAAS,cAE1BA,cAAW,gEAIXA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAGLA,KAAKyL,YAAcjE,EACnBxH,KAAKyH,eAAiB+E,GAAmBxM,KAAKyL,aAC9CzL,KAAKqL,SAAWG,GACZxL,KAAKyH,eAAgBzH,KAAKyL,YAAazL,KAAKuF,eAChDvF,KAAKqY,UAAY,YAGnBrS,cAsHE,MArHiB,w5EAgETmc,GAAK,y2ECnCV,MCwDDgtC,GAAgC,CACpCtpC,GACAsf,GACAE,GACAO,GACAmB,GACAS,GACAG,GACA8C,GACAM,GACAe,GACAuB,GACAY,GACAI,GACAtnB,GACAopB,GACAoC,GACAY,GACAG,GACAE,GACAmB,GACAwB,GACAE,GACAS,GACAY,GACAQ,GACAoB,GACAE,GACAG,GACAG,GACAE,GACA12B,GACA82B,GACAU,GACAR,GACAE,GACAuC,GACAO,GACAE,GACAO,GACAoB,GACAE,GACAG,GACA/4B,GACAqoB,GACA6Q,GACAE,GACAG,GACAG,GACAG,GACAE,GACAE,GACAtX,GACAwX,GACAG,GACAxX,GACA0X,GACAE,GACAW,GACA/J,GACAiK,GACAE,GACAW,GACA5V,GACAyW,GACAG,GACAW,GACAE,GACAE,GACAE,GACAC,GACA5X,GACA+X,GACAE,GACAE,GACAE,GACAxhC,GACA6hC,GACAO,GACAK,GACAW,GACAgB,GACAS,GACAG,GACAE,GACAE,GACAxd,GACA6gB,GACAe,GACA9D,GACAQ,GACAc,GACAU,GACAM,GACAE,GACAE,GACA5C,GACAvR,GACA2V,GACA9C,GACAqD,GC9J2C,CAC3C5qC,WAAY6rC,GACZ3rC,YAAa,SACbC,oBA/CwBX,GAKxB,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3B8xB,MAACA,EAAKwa,WAAEA,GAAcnmD,GACtBomD,cAACA,EAAaC,SAAEA,EAAQhJ,UAAEA,EAAS96C,YAAEA,GAAewX,GAEnDid,EAAOsvB,EAAaC,EAAY9U,GAAe9F,EAAMpwC,OACrD4tC,EAAW5B,GACC,MAAfhlC,EAAsBA,EAAc,CAAC+jD,EAAaC,GAKhDzqD,EAAU,IAAIkqD,GAHhB,CAAChvB,EAAOmS,EAAW5B,EAClBkK,IAGC+U,EAAwC,YAAlBJ,EAA8B,EAAI,EAC9D,IAAIK,EACJ,OAAQJ,GACN,IAAK,WAYL,QACEI,EAAa,EACb,MAXF,IAAK,UACHA,EAAa,EACb,MACF,IAAK,OACHA,EAAa,EACb,MACF,IAAK,UACHA,EAAa,EAMjB,MAAMtsC,EAAc,CAClB,CAAC5a,KAAM,QAASkE,KAAM,CAAC+iD,IACvB,CAACjnD,KAAM,QAASkE,KAAM,CAACgjD,IAAc,CAAClnD,KAAM,UAAWkE,KAAM,CAAC45C,KAEhE,OAAOvjC,EAAQ5L,iBACXpS,EAAS,CAAC6vC,EAAOwa,GAAa,UAAWhsC,EAC/C,GDkKEwjB,GD9JwC,CACxCtjB,WAAYqsC,GACZnsC,YAAa,SACbC,oBA9CEX,GAGF,MAAM7Z,OAACA,EAAM8Z,QAAEA,EAAOC,MAAEA,GAASF,GAC3BG,MAACA,GAASha,EAChB,IAAI23B,KAACA,GAAQ5d,EAET4d,EAAO,IACTA,GAAQ3d,EAAMze,MAAMrD,QAGtB,MAAM+E,EAAI+c,EACJyd,EAAQx6B,EAAE1B,MAAMrD,OAEhBg4B,EAAMlW,EAAMze,MAAMo8B,GAClBr5B,EAAqB,IAAI3C,MAAM87B,EAAQ,GAC7C,IAAI7B,EAAW,EACf,IAAK,IAAIh6B,EAAI,EAAGA,EAAI67B,EAAO77B,IACrBA,IAAM+7B,IACRr5B,EAASs3B,KAAc34B,EAAE1B,MAAMK,IAInC,MAAM4jC,EAAY,GAEZ1N,EAAQ,IAAIn2B,MAAM87B,GAAO7d,KAAK,GAC9BviB,EAAO4F,EAAE1B,MAAM+B,QACrBjG,EAAKsgC,GAAQ,EACb,MAAMh4B,EAAoB,IAAIhE,MAAMu0B,GACpC,IAAK,IAAIt0B,EAAI,EAAGA,EAAI+D,EAAIzH,OAAQ0D,IAAK,CACnCk2B,EAAM6F,GAAQ/7B,EACd,MAAMgoC,EAAStmC,GAAM,CAAC0C,OAAQ,CAAC/C,KAAI6c,UAASC,MAAO,CAAC+X,QAAOz6B,UACrD2rC,EACFvoB,GAAQ,CAACza,OAAQ,CAAC/C,EAAG2mC,GAAS9pB,UAASC,MAAO,CAACxe,MAAO+C,KAC1DqB,EAAI/D,GAAKonC,EAETxD,EAAUlnC,KAAKsrC,GAIjB,OADApE,EAAU/lC,SAAQuR,GAAK8O,EAAQjT,YAAYmE,EAAElE,UACtCnH,CACT,GCkKE26C,IAGF,IAAK,MAAMqM,KAAgBV,GACzBW,GAAeD"}